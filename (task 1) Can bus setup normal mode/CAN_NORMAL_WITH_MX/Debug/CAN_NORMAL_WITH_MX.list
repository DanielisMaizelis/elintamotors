
CAN_NORMAL_WITH_MX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dbc  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f60  08002f60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002f74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002f74  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c24e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d09  00000000  00000000  0002c283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002df90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002eab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d408  00000000  00000000  0002f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd43  00000000  00000000  0004c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3bdd  00000000  00000000  00058653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  0010c280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08002f28 	.word	0x08002f28

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08002f28 	.word	0x08002f28

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:
extern uint8_t message_can1_received;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) // When the period is elapsed
// It will activate the function.
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	CAN1_Tx();
 80004d4:	f000 f804 	bl	80004e0 <CAN1_Tx>
//	message_can1_received = 1;
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <CAN1_Tx>:


// Step 1.
void CAN1_Tx(void) // First Message Transmission to CAN2
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t send_message[5] = {'H','E','L','L','O'}; // Message That I will Send
 80004e6:	4a11      	ldr	r2, [pc, #68]	; (800052c <CAN1_Tx+0x4c>)
 80004e8:	f107 0308 	add.w	r3, r7, #8
 80004ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f0:	6018      	str	r0, [r3, #0]
 80004f2:	3304      	adds	r3, #4
 80004f4:	7019      	strb	r1, [r3, #0]
	uint32_t TxMailbox; // Keeps the stored message and prioritises it

	TxHeader.DLC = 5; //Length of the message in bytes - 'hello' is 5 bytes
 80004f6:	2305      	movs	r3, #5
 80004f8:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D; // Standard 11bit identifier
 80004fa:	f240 635d 	movw	r3, #1629	; 0x65d
 80004fe:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD; // Standard or extended
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;  // Data frame (request frame) or remote frame
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, send_message, &TxMailbox) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	f107 0208 	add.w	r2, r7, #8
 800050e:	f107 0110 	add.w	r1, r7, #16
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <CAN1_Tx+0x50>)
 8000514:	f000 fec0 	bl	8001298 <HAL_CAN_AddTxMessage>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <CAN1_Tx+0x42>
	{ // If the message isn't sent into the mailbox
		Error_Handler();
 800051e:	f000 fa8f 	bl	8000a40 <Error_Handler>
		// Tells me the error of sending the data into mailbox
		// is not OK.
	}
}
 8000522:	bf00      	nop
 8000524:	3728      	adds	r7, #40	; 0x28
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	08002f40 	.word	0x08002f40
 8000530:	20000028 	.word	0x20000028

08000534 <HAL_CAN_RxFifo0MsgPendingCallback>:


// Step 4.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08c      	sub	sp, #48	; 0x30
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef Rx_Header; // Struct specified
	uint8_t received_msg[5]; // Received 'hello' message

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rx_Header, received_msg) != HAL_OK)// gets the message
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	f107 0214 	add.w	r2, r7, #20
 8000544:	2100      	movs	r1, #0
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000548:	f000 ff80 	bl	800144c <HAL_CAN_GetRxMessage>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 8000552:	f000 fa75 	bl	8000a40 <Error_Handler>
	}

	if(Rx_Header.StdId == 0x65C && Rx_Header.RTR == 0) // Check the message details
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	f240 625c 	movw	r2, #1628	; 0x65c
 800055c:	4293      	cmp	r3, r2
 800055e:	d105      	bne.n	800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d102      	bne.n	800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
	{
		message_can1_received = 1;
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
	}
}
 800056c:	bf00      	nop
 800056e:	3730      	adds	r7, #48	; 0x30
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	200000c1 	.word	0x200000c1

0800057c <CAN1_Filter_Config>:
//-------------------------------------------------------------------------------------------
// Configurations for CAN1


void CAN1_Filter_Config(void) // Configuring the CAN1 Filter
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;
    can1_filter_init.FilterActivation = ENABLE;
 8000582:	2301      	movs	r3, #1
 8000584:	623b      	str	r3, [r7, #32]
    can1_filter_init.FilterBank = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
    can1_filter_init.SlaveStartFilterBank = 14; // 14 each banks
 800058a:	230e      	movs	r3, #14
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
    can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
    can1_filter_init.FilterIdHigh = 0x0000;
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
    can1_filter_init.FilterIdLow = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
    can1_filter_init.FilterMaskIdHigh = 0x0000;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
    can1_filter_init.FilterMaskIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
    can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
    can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a6:	2301      	movs	r3, #1
 80005a8:	61fb      	str	r3, [r7, #28]

    if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <CAN1_Filter_Config+0x4c>)
 80005b0:	f000 fd4e 	bl	8001050 <HAL_CAN_ConfigFilter>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <CAN1_Filter_Config+0x42>
    {
    	Error_Handler();
 80005ba:	f000 fa41 	bl	8000a40 <Error_Handler>
    }
}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <CAN1_IRQ_Start>:



void CAN1_IRQ_Start(void) // This function is for starting the CAN1 and its IRQs
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK)
 80005d0:	2103      	movs	r1, #3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <CAN1_IRQ_Start+0x2c>)
 80005d4:	f001 f84b 	bl	800166e <HAL_CAN_ActivateNotification>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <CAN1_IRQ_Start+0x16>
	{
		Error_Handler();
 80005de:	f000 fa2f 	bl	8000a40 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <CAN1_IRQ_Start+0x2c>)
 80005e4:	f000 fe14 	bl	8001210 <HAL_CAN_Start>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <CAN1_IRQ_Start+0x26>
	{
		Error_Handler();
 80005ee:	f000 fa27 	bl	8000a40 <Error_Handler>
	}
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028

080005fc <HAL_CAN_RxFifo1MsgPendingCallback>:
extern CAN_HandleTypeDef hcan2;
extern uint8_t message_can2_received;

// Step 2.
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef Rx_Header; // Struct specified
	uint8_t received_msg[5]; // Received 'hello' message

	if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &Rx_Header, received_msg) != HAL_OK)// gets the message
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	f107 0214 	add.w	r2, r7, #20
 800060c:	2101      	movs	r1, #1
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8000610:	f000 ff1c 	bl	800144c <HAL_CAN_GetRxMessage>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		Error_Handler();
 800061a:	f000 fa11 	bl	8000a40 <Error_Handler>
	}

	if(Rx_Header.StdId == 0x65D && Rx_Header.RTR == 0) // Check the message details
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	f240 625d 	movw	r2, #1629	; 0x65d
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d109      	bne.n	8000642 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
	{
		//--
		CAN2_Tx();
 800062e:	f000 f813 	bl	8000658 <CAN2_Tx>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_7, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2194      	movs	r1, #148	; 0x94
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000638:	f001 fd04 	bl	8002044 <HAL_GPIO_WritePin>
		message_can2_received = 1;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
	}
}
 8000642:	bf00      	nop
 8000644:	3730      	adds	r7, #48	; 0x30
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000050 	.word	0x20000050
 8000650:	40020000 	.word	0x40020000
 8000654:	200000c0 	.word	0x200000c0

08000658 <CAN2_Tx>:

// Step 3.
void CAN2_Tx(void) // +
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t send_message[5] = {'B','Y','E'}; // Message That I will Send
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <CAN2_Tx+0x44>)
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	2300      	movs	r3, #0
 8000664:	733b      	strb	r3, [r7, #12]
	uint32_t TxMailbox; // Keeps the stored message and prioritises it

	TxHeader.DLC = 3; //Length of the message in bytes - 'bye' is 3 bytes
 8000666:	2303      	movs	r3, #3
 8000668:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65C; // Standard 11bit identifier
 800066a:	f240 635c 	movw	r3, #1628	; 0x65c
 800066e:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD; // Standard or extended
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;  // Data frame (request frame) or remote frame
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, send_message, &TxMailbox) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	f107 0208 	add.w	r2, r7, #8
 800067e:	f107 0110 	add.w	r1, r7, #16
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <CAN2_Tx+0x48>)
 8000684:	f000 fe08 	bl	8001298 <HAL_CAN_AddTxMessage>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <CAN2_Tx+0x3a>
	{ // If the message isn't sent into the mailbox
		Error_Handler();
 800068e:	f000 f9d7 	bl	8000a40 <Error_Handler>
		// Tells me the error of sending the data into mailbox
		// is not OK.
	}
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	00455942 	.word	0x00455942
 80006a0:	20000050 	.word	0x20000050

080006a4 <CAN2_Filter_Config>:
// Configurations for CAN2



void CAN2_Filter_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can2_filter_init = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2228      	movs	r2, #40	; 0x28
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fc31 	bl	8002f18 <memset>
	can2_filter_init.FilterActivation = ENABLE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
	can2_filter_init.FilterBank = 15;
 80006ba:	230f      	movs	r3, #15
 80006bc:	617b      	str	r3, [r7, #20]
	can2_filter_init.SlaveStartFilterBank = 14; //14 each banks
 80006be:	230e      	movs	r3, #14
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
	can2_filter_init.FilterFIFOAssignment = CAN_RX_FIFO1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
	can2_filter_init.FilterIdHigh = 0x0000;
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
	can2_filter_init.FilterIdLow = 0x0000;
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
	can2_filter_init.FilterMaskIdHigh = 0x0000;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
	can2_filter_init.FilterMaskIdLow = 0x0000;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
	can2_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
	can2_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80006da:	2301      	movs	r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan2, &can2_filter_init) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <CAN2_Filter_Config+0x58>)
 80006e4:	f000 fcb4 	bl	8001050 <HAL_CAN_ConfigFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <CAN2_Filter_Config+0x4e>
	{
		Error_Handler();
 80006ee:	f000 f9a7 	bl	8000a40 <Error_Handler>
	}
}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	; 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000050 	.word	0x20000050

08000700 <CAN2_IRQ_Start>:


void CAN2_IRQ_Start(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK)
 8000704:	2110      	movs	r1, #16
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <CAN2_IRQ_Start+0x2c>)
 8000708:	f000 ffb1 	bl	800166e <HAL_CAN_ActivateNotification>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <CAN2_IRQ_Start+0x16>
	{
		Error_Handler();
 8000712:	f000 f995 	bl	8000a40 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <CAN2_IRQ_Start+0x2c>)
 8000718:	f000 fd7a 	bl	8001210 <HAL_CAN_Start>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <CAN2_IRQ_Start+0x26>
	{
		Error_Handler();
 8000722:	f000 f98d 	bl	8000a40 <Error_Handler>
	}
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000050 	.word	0x20000050

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fafd 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f855 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 f92f 	bl	80009a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000742:	f000 f88b 	bl	800085c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000746:	f000 f8bf 	bl	80008c8 <MX_CAN2_Init>
  MX_TIM6_Init();
 800074a:	f000 f8f3 	bl	8000934 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CAN1_Filter_Config();
 800074e:	f7ff ff15 	bl	800057c <CAN1_Filter_Config>
  CAN2_Filter_Config();
 8000752:	f7ff ffa7 	bl	80006a4 <CAN2_Filter_Config>

  CAN1_IRQ_Start();
 8000756:	f7ff ff39 	bl	80005cc <CAN1_IRQ_Start>
  CAN2_IRQ_Start();
 800075a:	f7ff ffd1 	bl	8000700 <CAN2_IRQ_Start>

//  CAN1_Tx();
  HAL_TIM_Base_Start_IT(&htim6);
 800075e:	481e      	ldr	r0, [pc, #120]	; (80007d8 <main+0xa8>)
 8000760:	f002 f8f2 	bl	8002948 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	 if(message_can2_received == 1)
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <main+0xac>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d118      	bne.n	800079e <main+0x6e>
	 {
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_7, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2194      	movs	r1, #148	; 0x94
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <main+0xb0>)
 8000772:	f001 fc67 	bl	8002044 <HAL_GPIO_WritePin>
		 message_can2_received = 0;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <main+0xac>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		 for(int i=0; i<10; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	e009      	b.n	8000796 <main+0x66>
		 {
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4);
 8000782:	2114      	movs	r1, #20
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <main+0xb0>)
 8000786:	f001 fc75 	bl	8002074 <HAL_GPIO_TogglePin>
			 HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f000 fb40 	bl	8000e10 <HAL_Delay>
		 for(int i=0; i<10; i++)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3301      	adds	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b09      	cmp	r3, #9
 800079a:	ddf2      	ble.n	8000782 <main+0x52>
 800079c:	e7e2      	b.n	8000764 <main+0x34>
		 }
	 }
	 else if(message_can1_received == 1)
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <main+0xb4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d1de      	bne.n	8000764 <main+0x34>
	 {

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_7, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2194      	movs	r1, #148	; 0x94
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <main+0xb0>)
 80007ac:	f001 fc4a 	bl	8002044 <HAL_GPIO_WritePin>
		 message_can1_received = 0;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <main+0xb4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
		 for(int i=0; i<10; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	e009      	b.n	80007d0 <main+0xa0>
		 {
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_7);
 80007bc:	2194      	movs	r1, #148	; 0x94
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <main+0xb0>)
 80007c0:	f001 fc58 	bl	8002074 <HAL_GPIO_TogglePin>
			 HAL_Delay(100);
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f000 fb23 	bl	8000e10 <HAL_Delay>
		 for(int i=0; i<10; i++)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	ddf2      	ble.n	80007bc <main+0x8c>
	 if(message_can2_received == 1)
 80007d6:	e7c5      	b.n	8000764 <main+0x34>
 80007d8:	20000078 	.word	0x20000078
 80007dc:	200000c0 	.word	0x200000c0
 80007e0:	40020000 	.word	0x40020000
 80007e4:	200000c1 	.word	0x200000c1

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b092      	sub	sp, #72	; 0x48
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fb8e 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fc44 	bl	80020a8 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000826:	f000 f90b 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800082e:	2301      	movs	r3, #1
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fe7e 	bl	8002544 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800084e:	f000 f8f7 	bl	8000a40 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3748      	adds	r7, #72	; 0x48
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_CAN1_Init+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000868:	2201      	movs	r2, #1
 800086a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_CAN1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_CAN1_Init+0x64>)
 800087a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800087e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_CAN1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_CAN1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_CAN1_Init+0x64>)
 800089a:	2201      	movs	r2, #1
 800089c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_CAN1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_CAN1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_CAN1_Init+0x64>)
 80008ac:	f000 fad4 	bl	8000e58 <HAL_CAN_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80008b6:	f000 f8c3 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000028 	.word	0x20000028
 80008c4:	40006400 	.word	0x40006400

080008c8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_CAN2_Init+0x64>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_CAN2_Init+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_CAN2_Init+0x64>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_CAN2_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_CAN2_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_CAN2_Init+0x64>)
 80008e6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80008ea:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_CAN2_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_CAN2_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_CAN2_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_CAN2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_CAN2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_CAN2_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_CAN2_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_CAN2_Init+0x64>)
 8000918:	f000 fa9e 	bl	8000e58 <HAL_CAN_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000922:	f000 f88d 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  /* USER CODE END CAN2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000050 	.word	0x20000050
 8000930:	40006800 	.word	0x40006800

08000934 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_TIM6_Init+0x64>)
 8000944:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_TIM6_Init+0x68>)
 8000946:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11999;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_TIM6_Init+0x64>)
 800094a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800094e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_TIM6_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_TIM6_Init+0x64>)
 8000958:	f241 3287 	movw	r2, #4999	; 0x1387
 800095c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_TIM6_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_TIM6_Init+0x64>)
 8000966:	f001 ff9f 	bl	80028a8 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000970:	f000 f866 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_TIM6_Init+0x64>)
 8000982:	f002 fa19 	bl	8002db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 f858 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000078 	.word	0x20000078
 800099c:	40001000 	.word	0x40001000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x98>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_GPIO_Init+0x98>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2194      	movs	r1, #148	; 0x94
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <MX_GPIO_Init+0x9c>)
 8000a10:	f001 fb18 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA4 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_2;
 8000a14:	2394      	movs	r3, #148	; 0x94
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x9c>)
 8000a2c:	f001 f96c 	bl	8001d08 <HAL_GPIO_Init>

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x48>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x48>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x48>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_MspInit+0x48>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_MspInit+0x48>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_MspInit+0x48>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_CAN_MspInit+0x14c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d13e      	bne.n	8000b38 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000aba:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <HAL_CAN_MspInit+0x150>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a49      	ldr	r2, [pc, #292]	; (8000be8 <HAL_CAN_MspInit+0x150>)
 8000ac2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ac4:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <HAL_CAN_MspInit+0x150>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10d      	bne.n	8000ae8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	4b46      	ldr	r3, [pc, #280]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a45      	ldr	r2, [pc, #276]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b43      	ldr	r3, [pc, #268]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a3e      	ldr	r2, [pc, #248]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB9     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b16:	2309      	movs	r3, #9
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4833      	ldr	r0, [pc, #204]	; (8000bf0 <HAL_CAN_MspInit+0x158>)
 8000b22:	f001 f8f1 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	2014      	movs	r0, #20
 8000b2c:	f001 f8b5 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b30:	2014      	movs	r0, #20
 8000b32:	f001 f8ce 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 15, 0);
	HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b36:	e050      	b.n	8000bda <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <HAL_CAN_MspInit+0x15c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d14b      	bne.n	8000bda <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a28      	ldr	r2, [pc, #160]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <HAL_CAN_MspInit+0x150>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <HAL_CAN_MspInit+0x150>)
 8000b66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_CAN_MspInit+0x150>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d10d      	bne.n	8000b8c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a15      	ldr	r2, [pc, #84]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_CAN_MspInit+0x154>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000ba8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000bba:	2309      	movs	r3, #9
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <HAL_CAN_MspInit+0x158>)
 8000bc6:	f001 f89f 	bl	8001d08 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 15, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210f      	movs	r1, #15
 8000bce:	2041      	movs	r0, #65	; 0x41
 8000bd0:	f001 f863 	bl	8001c9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000bd4:	2041      	movs	r0, #65	; 0x41
 8000bd6:	f001 f87c 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	; 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40006400 	.word	0x40006400
 8000be8:	200000c4 	.word	0x200000c4
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40006800 	.word	0x40006800

08000bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d115      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_TIM_Base_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_TIM_Base_MspInit+0x4c>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_TIM_Base_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */
	//appropriate CMSIS device file (stm32f4xxxx.h)) (don't know where to look for inside)
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c26:	2036      	movs	r0, #54	; 0x36
 8000c28:	f001 f853 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

	// Setup the priority for this IRQ
	 HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15, 0); // Lowest in priority
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	210f      	movs	r1, #15
 8000c30:	2036      	movs	r0, #54	; 0x36
 8000c32:	f001 f832 	bl	8001c9a <HAL_NVIC_SetPriority>
  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40001000 	.word	0x40001000
 8000c44:	40023800 	.word	0x40023800

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f8a3 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <CAN1_RX0_IRQHandler>:
/* USER CODE BEGIN 1 */

// CAN 1 IRQs

void CAN1_RX0_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1); // Inside the handlers once the interrupts are triggered
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <CAN1_RX0_IRQHandler+0x10>)
 8000c9e:	f000 fd0b 	bl	80016b8 <HAL_CAN_IRQHandler>
	//the callback will be triggered
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000028 	.word	0x20000028

08000cac <CAN2_RX1_IRQHandler>:



// CAN 2 IRQs
void CAN2_RX1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan2); // Inside the handlers once the interrupts are triggered
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <CAN2_RX1_IRQHandler+0x10>)
 8000cb2:	f000 fd01 	bl	80016b8 <HAL_CAN_IRQHandler>
	//the callback will be triggered
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000050 	.word	0x20000050

08000cc0 <TIM6_DAC_IRQHandler>:


// Timer 6
void TIM6_DAC_IRQHandler(void) // found in the startup file
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6); // Interrupt will be proccessed in this functions
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM6_DAC_IRQHandler+0x10>)
 8000cc6:	f001 fead 	bl	8002a24 <HAL_TIM_IRQHandler>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000078 	.word	0x20000078

08000cd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cfc:	4c0b      	ldr	r4, [pc, #44]	; (8000d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d0a:	f7ff ffe3 	bl	8000cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f002 f8df 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fd0d 	bl	8000730 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d24:	08002f68 	.word	0x08002f68
  ldr r2, =_sbss
 8000d28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d2c:	200000cc 	.word	0x200000cc

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_Init+0x40>)
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_Init+0x40>)
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x40>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 ff91 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fe70 	bl	8000a4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 ffa9 	bl	8001cee <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 ff71 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x20>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000008 	.word	0x20000008
 8000df8:	200000c8 	.word	0x200000c8

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <HAL_GetTick+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	200000c8 	.word	0x200000c8

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff0 	bl	8000dfc <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffe0 	bl	8000dfc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008

08000e58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e0ed      	b.n	8001046 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fe0e 	bl	8000a98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0201 	orr.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e8c:	f7ff ffb6 	bl	8000dfc <HAL_GetTick>
 8000e90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e92:	e012      	b.n	8000eba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e94:	f7ff ffb2 	bl	8000dfc <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d90b      	bls.n	8000eba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0c5      	b.n	8001046 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0e5      	beq.n	8000e94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0202 	bic.w	r2, r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed8:	f7ff ff90 	bl	8000dfc <HAL_GetTick>
 8000edc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ede:	e012      	b.n	8000f06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee0:	f7ff ff8c 	bl	8000dfc <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d90b      	bls.n	8000f06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2205      	movs	r2, #5
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e09f      	b.n	8001046 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e5      	bne.n	8000ee0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7e1b      	ldrb	r3, [r3, #24]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d108      	bne.n	8000f2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7e5b      	ldrb	r3, [r3, #25]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d108      	bne.n	8000f58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e007      	b.n	8000f68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7e9b      	ldrb	r3, [r3, #26]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d108      	bne.n	8000f82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e007      	b.n	8000f92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0220 	bic.w	r2, r2, #32
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7edb      	ldrb	r3, [r3, #27]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0210 	bic.w	r2, r2, #16
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e007      	b.n	8000fbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0210 	orr.w	r2, r2, #16
 8000fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7f1b      	ldrb	r3, [r3, #28]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0208 	orr.w	r2, r2, #8
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e007      	b.n	8000fe6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0208 	bic.w	r2, r2, #8
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7f5b      	ldrb	r3, [r3, #29]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0204 	orr.w	r2, r2, #4
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0204 	bic.w	r2, r2, #4
 800100e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	ea42 0103 	orr.w	r1, r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001066:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001068:	7cfb      	ldrb	r3, [r7, #19]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d003      	beq.n	8001076 <HAL_CAN_ConfigFilter+0x26>
 800106e:	7cfb      	ldrb	r3, [r7, #19]
 8001070:	2b02      	cmp	r3, #2
 8001072:	f040 80be 	bne.w	80011f2 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001076:	4b65      	ldr	r3, [pc, #404]	; (800120c <HAL_CAN_ConfigFilter+0x1bc>)
 8001078:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001080:	f043 0201 	orr.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001090:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	431a      	orrs	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2201      	movs	r2, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	401a      	ands	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d123      	bne.n	8001120 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3248      	adds	r2, #72	; 0x48
 8001100:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001114:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001116:	6979      	ldr	r1, [r7, #20]
 8001118:	3348      	adds	r3, #72	; 0x48
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d122      	bne.n	800116e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	431a      	orrs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001148:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3248      	adds	r2, #72	; 0x48
 800114e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001162:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001164:	6979      	ldr	r1, [r7, #20]
 8001166:	3348      	adds	r3, #72	; 0x48
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001188:	e007      	b.n	800119a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	431a      	orrs	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	401a      	ands	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011b4:	e007      	b.n	80011c6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	431a      	orrs	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011e4:	f023 0201 	bic.w	r2, r3, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e006      	b.n	8001200 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
  }
}
 8001200:	4618      	mov	r0, r3
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40006400 	.word	0x40006400

08001210 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d12e      	bne.n	8001282 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800123c:	f7ff fdde 	bl	8000dfc <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001242:	e012      	b.n	800126a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001244:	f7ff fdda 	bl	8000dfc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d90b      	bls.n	800126a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e012      	b.n	8001290 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e5      	bne.n	8001244 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e006      	b.n	8001290 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
  }
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d003      	beq.n	80012c4 <HAL_CAN_AddTxMessage+0x2c>
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	f040 80b8 	bne.w	8001434 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10a      	bne.n	80012e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80a0 	beq.w	8001424 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	0e1b      	lsrs	r3, r3, #24
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d907      	bls.n	8001304 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e09e      	b.n	8001442 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001304:	2201      	movs	r2, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	409a      	lsls	r2, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001320:	68f9      	ldr	r1, [r7, #12]
 8001322:	6809      	ldr	r1, [r1, #0]
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3318      	adds	r3, #24
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	440b      	add	r3, r1
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e00f      	b.n	8001352 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001346:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3318      	adds	r3, #24
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	440b      	add	r3, r1
 8001350:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6819      	ldr	r1, [r3, #0]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3318      	adds	r3, #24
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	440b      	add	r3, r1
 8001362:	3304      	adds	r3, #4
 8001364:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	7d1b      	ldrb	r3, [r3, #20]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d111      	bne.n	8001392 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3318      	adds	r3, #24
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	3304      	adds	r3, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	6811      	ldr	r1, [r2, #0]
 8001382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3318      	adds	r3, #24
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	440b      	add	r3, r1
 800138e:	3304      	adds	r3, #4
 8001390:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3307      	adds	r3, #7
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	061a      	lsls	r2, r3, #24
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3306      	adds	r3, #6
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3305      	adds	r3, #5
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	4313      	orrs	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	3204      	adds	r2, #4
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	4610      	mov	r0, r2
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	6811      	ldr	r1, [r2, #0]
 80013ba:	ea43 0200 	orr.w	r2, r3, r0
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	440b      	add	r3, r1
 80013c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3303      	adds	r3, #3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	061a      	lsls	r2, r3, #24
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3302      	adds	r3, #2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	041b      	lsls	r3, r3, #16
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	4313      	orrs	r3, r2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	4610      	mov	r0, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	6811      	ldr	r1, [r2, #0]
 80013f0:	ea43 0200 	orr.w	r2, r3, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	440b      	add	r3, r1
 80013fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3318      	adds	r3, #24
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	4413      	add	r3, r2
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	6811      	ldr	r1, [r2, #0]
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3318      	adds	r3, #24
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	440b      	add	r3, r1
 800141e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	e00e      	b.n	8001442 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e006      	b.n	8001442 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001460:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d003      	beq.n	8001470 <HAL_CAN_GetRxMessage+0x24>
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b02      	cmp	r3, #2
 800146c:	f040 80f3 	bne.w	8001656 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10e      	bne.n	8001494 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d116      	bne.n	80014b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0e7      	b.n	8001664 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d107      	bne.n	80014b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0d8      	b.n	8001664 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	331b      	adds	r3, #27
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0204 	and.w	r2, r3, #4
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10c      	bne.n	80014ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	331b      	adds	r3, #27
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0d5b      	lsrs	r3, r3, #21
 80014e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e00b      	b.n	8001502 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	331b      	adds	r3, #27
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	331b      	adds	r3, #27
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0202 	and.w	r2, r3, #2
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	331b      	adds	r3, #27
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4413      	add	r3, r2
 8001524:	3304      	adds	r3, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 020f 	and.w	r2, r3, #15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	331b      	adds	r3, #27
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	b2da      	uxtb	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	331b      	adds	r3, #27
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4413      	add	r3, r2
 8001554:	3304      	adds	r3, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0c1b      	lsrs	r3, r3, #16
 800155a:	b29a      	uxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0a1a      	lsrs	r2, r3, #8
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0c1a      	lsrs	r2, r3, #16
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3302      	adds	r3, #2
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	0e1a      	lsrs	r2, r3, #24
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3303      	adds	r3, #3
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	3304      	adds	r3, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	4413      	add	r3, r2
 80015e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0a1a      	lsrs	r2, r3, #8
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3305      	adds	r3, #5
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	0c1a      	lsrs	r2, r3, #16
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	3306      	adds	r3, #6
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0e1a      	lsrs	r2, r3, #24
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3307      	adds	r3, #7
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d108      	bne.n	8001642 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	e007      	b.n	8001652 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0220 	orr.w	r2, r2, #32
 8001650:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e006      	b.n	8001664 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
  }
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d002      	beq.n	800168c <HAL_CAN_ActivateNotification+0x1e>
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d109      	bne.n	80016a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6959      	ldr	r1, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e006      	b.n	80016ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
  }
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d07c      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d023      	beq.n	8001750 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f983 	bl	8001a26 <HAL_CAN_TxMailbox0CompleteCallback>
 8001720:	e016      	b.n	8001750 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
 8001734:	e00c      	b.n	8001750 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
 8001748:	e002      	b.n	8001750 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f986 	bl	8001a5c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d024      	beq.n	80017a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f962 	bl	8001a38 <HAL_CAN_TxMailbox1CompleteCallback>
 8001774:	e016      	b.n	80017a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
 8001788:	e00c      	b.n	80017a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
 800179c:	e002      	b.n	80017a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f965 	bl	8001a6e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d024      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f941 	bl	8001a4a <HAL_CAN_TxMailbox2CompleteCallback>
 80017c8:	e016      	b.n	80017f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
 80017dc:	e00c      	b.n	80017f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
 80017f0:	e002      	b.n	80017f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f944 	bl	8001a80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00c      	beq.n	800181c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2210      	movs	r2, #16
 800181a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f92a 	bl	8001a92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d009      	beq.n	800185c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe fe6c 	bl	8000534 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00c      	beq.n	8001880 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2210      	movs	r2, #16
 800187e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2208      	movs	r2, #8
 800189a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f901 	bl	8001aa4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fe9e 	bl	80005fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2210      	movs	r2, #16
 80018da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8ea 	bl	8001ab6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2208      	movs	r2, #8
 80018fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8e2 	bl	8001ac8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d07b      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d072      	beq.n	80019fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001972:	2b00      	cmp	r3, #0
 8001974:	d043      	beq.n	80019fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800197c:	2b00      	cmp	r3, #0
 800197e:	d03e      	beq.n	80019fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001986:	2b60      	cmp	r3, #96	; 0x60
 8001988:	d02b      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x32a>
 800198a:	2b60      	cmp	r3, #96	; 0x60
 800198c:	d82e      	bhi.n	80019ec <HAL_CAN_IRQHandler+0x334>
 800198e:	2b50      	cmp	r3, #80	; 0x50
 8001990:	d022      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x320>
 8001992:	2b50      	cmp	r3, #80	; 0x50
 8001994:	d82a      	bhi.n	80019ec <HAL_CAN_IRQHandler+0x334>
 8001996:	2b40      	cmp	r3, #64	; 0x40
 8001998:	d019      	beq.n	80019ce <HAL_CAN_IRQHandler+0x316>
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	d826      	bhi.n	80019ec <HAL_CAN_IRQHandler+0x334>
 800199e:	2b30      	cmp	r3, #48	; 0x30
 80019a0:	d010      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x30c>
 80019a2:	2b30      	cmp	r3, #48	; 0x30
 80019a4:	d822      	bhi.n	80019ec <HAL_CAN_IRQHandler+0x334>
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d002      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x2f8>
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d005      	beq.n	80019ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019ae:	e01d      	b.n	80019ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019b8:	e019      	b.n	80019ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019c2:	e014      	b.n	80019ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	f043 0320 	orr.w	r3, r3, #32
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019cc:	e00f      	b.n	80019ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019d6:	e00a      	b.n	80019ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019e0:	e005      	b.n	80019ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ea:	e000      	b.n	80019ee <HAL_CAN_IRQHandler+0x336>
            break;
 80019ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699a      	ldr	r2, [r3, #24]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2204      	movs	r2, #4
 8001a04:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f85e 	bl	8001ada <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <__NVIC_EnableIRQ+0x34>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff90 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff2d 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff42 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff90 	bl	8001bdc <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5f 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff35 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	e16f      	b.n	8001ff8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	4013      	ands	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8161 	beq.w	8001ff2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d005      	beq.n	8001d48 <HAL_GPIO_Init+0x40>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d130      	bne.n	8001daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7e:	2201      	movs	r2, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 0201 	and.w	r2, r3, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d017      	beq.n	8001de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d123      	bne.n	8001e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	08da      	lsrs	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0203 	and.w	r2, r3, #3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80bb 	beq.w	8001ff2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	4b64      	ldr	r3, [pc, #400]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	4a63      	ldr	r2, [pc, #396]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8c:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e98:	4a5f      	ldr	r2, [pc, #380]	; (8002018 <HAL_GPIO_Init+0x310>)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_GPIO_Init+0x314>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d031      	beq.n	8001f28 <HAL_GPIO_Init+0x220>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x318>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d02b      	beq.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a55      	ldr	r2, [pc, #340]	; (8002024 <HAL_GPIO_Init+0x31c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d025      	beq.n	8001f20 <HAL_GPIO_Init+0x218>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x320>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01f      	beq.n	8001f1c <HAL_GPIO_Init+0x214>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a53      	ldr	r2, [pc, #332]	; (800202c <HAL_GPIO_Init+0x324>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d019      	beq.n	8001f18 <HAL_GPIO_Init+0x210>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x328>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_GPIO_Init+0x20c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x32c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <HAL_GPIO_Init+0x208>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x330>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_Init+0x204>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_GPIO_Init+0x200>
 8001f04:	2308      	movs	r3, #8
 8001f06:	e010      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f08:	2309      	movs	r3, #9
 8001f0a:	e00e      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	e00c      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f10:	2306      	movs	r3, #6
 8001f12:	e00a      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f14:	2305      	movs	r3, #5
 8001f16:	e008      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f3c:	4936      	ldr	r1, [pc, #216]	; (8002018 <HAL_GPIO_Init+0x310>)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x338>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae88 	bne.w	8001d18 <HAL_GPIO_Init+0x10>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40023800 	.word	0x40023800
 8002018:	40013800 	.word	0x40013800
 800201c:	40020000 	.word	0x40020000
 8002020:	40020400 	.word	0x40020400
 8002024:	40020800 	.word	0x40020800
 8002028:	40020c00 	.word	0x40020c00
 800202c:	40021000 	.word	0x40021000
 8002030:	40021400 	.word	0x40021400
 8002034:	40021800 	.word	0x40021800
 8002038:	40021c00 	.word	0x40021c00
 800203c:	40022000 	.word	0x40022000
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43d9      	mvns	r1, r3
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	400b      	ands	r3, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e236      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d050      	beq.n	8002168 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c6:	4b9e      	ldr	r3, [pc, #632]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d00c      	beq.n	80020ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d2:	4b9b      	ldr	r3, [pc, #620]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d112      	bne.n	8002104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020de:	4b98      	ldr	r3, [pc, #608]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ea:	d10b      	bne.n	8002104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	4b94      	ldr	r3, [pc, #592]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d036      	beq.n	8002166 <HAL_RCC_OscConfig+0xbe>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d132      	bne.n	8002166 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e211      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <HAL_RCC_OscConfig+0x29c>)
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d013      	beq.n	800213e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe fe71 	bl	8000dfc <HAL_GetTick>
 800211a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211e:	f7fe fe6d 	bl	8000dfc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1fb      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002130:	4b83      	ldr	r3, [pc, #524]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x76>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe fe5d 	bl	8000dfc <HAL_GetTick>
 8002142:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002146:	f7fe fe59 	bl	8000dfc <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e1e7      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x9e>
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002166:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d077      	beq.n	8002264 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002174:	4b72      	ldr	r3, [pc, #456]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00b      	beq.n	8002198 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002188:	2b08      	cmp	r3, #8
 800218a:	d126      	bne.n	80021da <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218c:	4b6c      	ldr	r3, [pc, #432]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d120      	bne.n	80021da <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002198:	4b69      	ldr	r3, [pc, #420]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x108>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e1bb      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	21f8      	movs	r1, #248	; 0xf8
 80021be:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	69b9      	ldr	r1, [r7, #24]
 80021c2:	fa91 f1a1 	rbit	r1, r1
 80021c6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021c8:	6979      	ldr	r1, [r7, #20]
 80021ca:	fab1 f181 	clz	r1, r1
 80021ce:	b2c9      	uxtb	r1, r1
 80021d0:	408b      	lsls	r3, r1
 80021d2:	495b      	ldr	r1, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d8:	e044      	b.n	8002264 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d02a      	beq.n	8002238 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e2:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_OscConfig+0x2a0>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe08 	bl	8000dfc <HAL_GetTick>
 80021ec:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f0:	f7fe fe04 	bl	8000dfc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e192      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	21f8      	movs	r1, #248	; 0xf8
 800221c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	fa91 f1a1 	rbit	r1, r1
 8002224:	60f9      	str	r1, [r7, #12]
  return result;
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	fab1 f181 	clz	r1, r1
 800222c:	b2c9      	uxtb	r1, r1
 800222e:	408b      	lsls	r3, r1
 8002230:	4943      	ldr	r1, [pc, #268]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
 8002236:	e015      	b.n	8002264 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCC_OscConfig+0x2a0>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fddd 	bl	8000dfc <HAL_GetTick>
 8002242:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fdd9 	bl	8000dfc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e167      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002258:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d030      	beq.n	80022d2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d016      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x2a4>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7fe fdbd 	bl	8000dfc <HAL_GetTick>
 8002282:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002286:	f7fe fdb9 	bl	8000dfc <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e147      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x1de>
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x2a4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fda6 	bl	8000dfc <HAL_GetTick>
 80022b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe fda2 	bl	8000dfc <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e130      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8087 	beq.w	80023ee <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d110      	bne.n	8002314 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_RCC_OscConfig+0x298>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_RCC_OscConfig+0x2a8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x2a8>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_OscConfig+0x2a8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d122      	bne.n	8002372 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_RCC_OscConfig+0x2a8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a07      	ldr	r2, [pc, #28]	; (8002350 <HAL_RCC_OscConfig+0x2a8>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002338:	f7fe fd60 	bl	8000dfc <HAL_GetTick>
 800233c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233e:	e012      	b.n	8002366 <HAL_RCC_OscConfig+0x2be>
 8002340:	40023800 	.word	0x40023800
 8002344:	40023802 	.word	0x40023802
 8002348:	42470000 	.word	0x42470000
 800234c:	42470e80 	.word	0x42470e80
 8002350:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002354:	f7fe fd52 	bl	8000dfc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0e0      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b72      	ldr	r3, [pc, #456]	; (8002530 <HAL_RCC_OscConfig+0x488>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x48c>)
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7fe fd3a 	bl	8000dfc <HAL_GetTick>
 8002388:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fd36 	bl	8000dfc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0c2      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	4b65      	ldr	r3, [pc, #404]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0ee      	beq.n	800238c <HAL_RCC_OscConfig+0x2e4>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7fe fd24 	bl	8000dfc <HAL_GetTick>
 80023b4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe fd20 	bl	8000dfc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0ac      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ee      	bne.n	80023b8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8097 	beq.w	8002526 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f8:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d061      	beq.n	80024c8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d146      	bne.n	800249a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_RCC_OscConfig+0x494>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fcf3 	bl	8000dfc <HAL_GetTick>
 8002416:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fcef 	bl	8000dfc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b64      	cmp	r3, #100	; 0x64
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e07d      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002438:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_RCC_OscConfig+0x498>)
 800243e:	4013      	ands	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	69d1      	ldr	r1, [r2, #28]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6a12      	ldr	r2, [r2, #32]
 8002448:	4311      	orrs	r1, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244e:	0192      	lsls	r2, r2, #6
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002456:	0612      	lsls	r2, r2, #24
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0412      	lsls	r2, r2, #16
 8002464:	430a      	orrs	r2, r1
 8002466:	4934      	ldr	r1, [pc, #208]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_RCC_OscConfig+0x494>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fcc3 	bl	8000dfc <HAL_GetTick>
 8002476:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fcbf 	bl	8000dfc <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e04d      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x3d2>
 8002498:	e045      	b.n	8002526 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCC_OscConfig+0x494>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fcac 	bl	8000dfc <HAL_GetTick>
 80024a4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fca8 	bl	8000dfc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e036      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x400>
 80024c6:	e02e      	b.n	8002526 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e029      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_RCC_OscConfig+0x490>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d11c      	bne.n	8002522 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d115      	bne.n	8002522 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d10d      	bne.n	8002522 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40007000 	.word	0x40007000
 8002534:	40023870 	.word	0x40023870
 8002538:	40023800 	.word	0x40023800
 800253c:	42470060 	.word	0x42470060
 8002540:	f0bc8000 	.word	0xf0bc8000

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d2      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d90c      	bls.n	8002580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0be      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002598:	4b5c      	ldr	r3, [pc, #368]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80025b0:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4950      	ldr	r1, [pc, #320]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d040      	beq.n	800265c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d115      	bne.n	800261a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e085      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b44      	ldr	r3, [pc, #272]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e079      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e071      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 0203 	bic.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4939      	ldr	r1, [pc, #228]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800262c:	f7fe fbe6 	bl	8000dfc <HAL_GetTick>
 8002630:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7fe fbe2 	bl	8000dfc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e059      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 020c 	and.w	r2, r3, #12
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d20c      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e03c      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	491b      	ldr	r1, [pc, #108]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4913      	ldr	r1, [pc, #76]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80026c2:	f000 f82b 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026c6:	4601      	mov	r1, r0
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d0:	22f0      	movs	r2, #240	; 0xf0
 80026d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	fa92 f2a2 	rbit	r2, r2
 80026da:	60fa      	str	r2, [r7, #12]
  return result;
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	fab2 f282 	clz	r2, r2
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	40d3      	lsrs	r3, r2
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_RCC_ClockConfig+0x1cc>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	fa21 f303 	lsr.w	r3, r1, r3
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1d0>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1d4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fb3e 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00
 800270c:	40023800 	.word	0x40023800
 8002710:	08002f48 	.word	0x08002f48
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002720:	b090      	sub	sp, #64	; 0x40
 8002722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
 8002728:	2300      	movs	r3, #0
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272c:	2300      	movs	r3, #0
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00d      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x40>
 8002740:	2b08      	cmp	r3, #8
 8002742:	f200 80a2 	bhi.w	800288a <HAL_RCC_GetSysClockFreq+0x16e>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
 800274a:	2b04      	cmp	r3, #4
 800274c:	d003      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x3a>
 800274e:	e09c      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002754:	e09c      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002756:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800275a:	e099      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002766:	4b4d      	ldr	r3, [pc, #308]	; (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d027      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002772:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	2200      	movs	r2, #0
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	627a      	str	r2, [r7, #36]	; 0x24
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002784:	2100      	movs	r1, #0
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002788:	fb03 f201 	mul.w	r2, r3, r1
 800278c:	2300      	movs	r3, #0
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	4413      	add	r3, r2
 8002794:	4a43      	ldr	r2, [pc, #268]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002796:	fba0 2102 	umull	r2, r1, r0, r2
 800279a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800279c:	62ba      	str	r2, [r7, #40]	; 0x28
 800279e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a0:	4413      	add	r3, r2
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	2200      	movs	r2, #0
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	61fa      	str	r2, [r7, #28]
 80027ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027b4:	f7fd fd06 	bl	80001c4 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4613      	mov	r3, r2
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c0:	e055      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c2:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	099b      	lsrs	r3, r3, #6
 80027c8:	2200      	movs	r2, #0
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	617a      	str	r2, [r7, #20]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027d4:	f04f 0b00 	mov.w	fp, #0
 80027d8:	4652      	mov	r2, sl
 80027da:	465b      	mov	r3, fp
 80027dc:	f04f 0000 	mov.w	r0, #0
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	0159      	lsls	r1, r3, #5
 80027e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ea:	0150      	lsls	r0, r2, #5
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	ebb2 080a 	subs.w	r8, r2, sl
 80027f4:	eb63 090b 	sbc.w	r9, r3, fp
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002804:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002808:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800280c:	ebb2 0408 	subs.w	r4, r2, r8
 8002810:	eb63 0509 	sbc.w	r5, r3, r9
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	00eb      	lsls	r3, r5, #3
 800281e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002822:	00e2      	lsls	r2, r4, #3
 8002824:	4614      	mov	r4, r2
 8002826:	461d      	mov	r5, r3
 8002828:	eb14 030a 	adds.w	r3, r4, sl
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	eb45 030b 	adc.w	r3, r5, fp
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002840:	4629      	mov	r1, r5
 8002842:	028b      	lsls	r3, r1, #10
 8002844:	4620      	mov	r0, r4
 8002846:	4629      	mov	r1, r5
 8002848:	4604      	mov	r4, r0
 800284a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800284e:	4601      	mov	r1, r0
 8002850:	028a      	lsls	r2, r1, #10
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	2200      	movs	r2, #0
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	60fa      	str	r2, [r7, #12]
 800285e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002862:	f7fd fcaf 	bl	80001c4 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4613      	mov	r3, r2
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	3301      	adds	r3, #1
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800287e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002888:	e002      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800288e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002892:	4618      	mov	r0, r3
 8002894:	3740      	adds	r7, #64	; 0x40
 8002896:	46bd      	mov	sp, r7
 8002898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	00b71b00 	.word	0x00b71b00

080028a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e041      	b.n	800293e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe f992 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 f9c8 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d001      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e04e      	b.n	80029fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_TIM_Base_Start_IT+0xc0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d022      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d01d      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_TIM_Base_Start_IT+0xc4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_TIM_Base_Start_IT+0xc8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_TIM_Base_Start_IT+0xcc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_TIM_Base_Start_IT+0xd4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_TIM_Base_Start_IT+0xd8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d111      	bne.n	80029ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d010      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	e007      	b.n	80029fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40010400 	.word	0x40010400
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40001800 	.word	0x40001800

08002a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0202 	mvn.w	r2, #2
 8002a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8ed 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8e0 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8ef 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0204 	mvn.w	r2, #4
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8c3 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8b6 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8c5 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0208 	mvn.w	r2, #8
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2204      	movs	r2, #4
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f899 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f88c 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f89b 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0210 	mvn.w	r2, #16
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2208      	movs	r2, #8
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f86f 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f862 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f871 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d107      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0201 	mvn.w	r2, #1
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fc92 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f975 	bl	8002ebe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d107      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f835 	bl	8002c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d10e      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0220 	mvn.w	r2, #32
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f940 	bl	8002eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3f      	ldr	r2, [pc, #252]	; (8002d8c <TIM_Base_SetConfig+0x110>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d00f      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <TIM_Base_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <TIM_Base_SetConfig+0x118>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <TIM_Base_SetConfig+0x11c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a39      	ldr	r2, [pc, #228]	; (8002d9c <TIM_Base_SetConfig+0x120>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <TIM_Base_SetConfig+0x110>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02b      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d027      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <TIM_Base_SetConfig+0x114>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d023      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <TIM_Base_SetConfig+0x118>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <TIM_Base_SetConfig+0x11c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01b      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <TIM_Base_SetConfig+0x120>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d017      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <TIM_Base_SetConfig+0x124>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <TIM_Base_SetConfig+0x128>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <TIM_Base_SetConfig+0x12c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a24      	ldr	r2, [pc, #144]	; (8002dac <TIM_Base_SetConfig+0x130>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <TIM_Base_SetConfig+0x134>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <TIM_Base_SetConfig+0x138>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <TIM_Base_SetConfig+0x110>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0xf8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <TIM_Base_SetConfig+0x120>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	615a      	str	r2, [r3, #20]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40010400 	.word	0x40010400
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400
 8002da8:	40014800 	.word	0x40014800
 8002dac:	40001800 	.word	0x40001800
 8002db0:	40001c00 	.word	0x40001c00
 8002db4:	40002000 	.word	0x40002000

08002db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e05a      	b.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1c:	d01d      	beq.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d018      	beq.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00e      	beq.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10c      	bne.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40010400 	.word	0x40010400
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40001800 	.word	0x40001800

08002eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	2600      	movs	r6, #0
 8002ed4:	4d0c      	ldr	r5, [pc, #48]	; (8002f08 <__libc_init_array+0x38>)
 8002ed6:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed8:	1b64      	subs	r4, r4, r5
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	f000 f822 	bl	8002f28 <_init>
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	4d0a      	ldr	r5, [pc, #40]	; (8002f10 <__libc_init_array+0x40>)
 8002ee8:	4c0a      	ldr	r4, [pc, #40]	; (8002f14 <__libc_init_array+0x44>)
 8002eea:	1b64      	subs	r4, r4, r5
 8002eec:	10a4      	asrs	r4, r4, #2
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08002f60 	.word	0x08002f60
 8002f0c:	08002f60 	.word	0x08002f60
 8002f10:	08002f60 	.word	0x08002f60
 8002f14:	08002f64 	.word	0x08002f64

08002f18 <memset>:
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4402      	add	r2, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <_init>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr

08002f34 <_fini>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	bf00      	nop
 8002f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3a:	bc08      	pop	{r3}
 8002f3c:	469e      	mov	lr, r3
 8002f3e:	4770      	bx	lr
