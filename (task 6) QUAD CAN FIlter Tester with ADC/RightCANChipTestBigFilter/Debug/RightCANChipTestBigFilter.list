
RightCANChipTestBigFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0ec  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800b2d8  0800b2d8  0001b2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9bc  0800b9bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9c4  0800b9c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9c4  0800b9c4  0001b9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9c8  0800b9c8  0001b9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001e0  0800bbac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  0800bbac  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119e5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4a  00000000  00000000  00031bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00034a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00035b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ef2  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001481f  00000000  00000000  00058992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcb1e  00000000  00000000  0006d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a98  00000000  00000000  00129d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b2bc 	.word	0x0800b2bc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800b2bc 	.word	0x0800b2bc

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_uldivmod>:
 8000c54:	b953      	cbnz	r3, 8000c6c <__aeabi_uldivmod+0x18>
 8000c56:	b94a      	cbnz	r2, 8000c6c <__aeabi_uldivmod+0x18>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	2800      	cmpeq	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f04f 31ff 	movne.w	r1, #4294967295
 8000c64:	f04f 30ff 	movne.w	r0, #4294967295
 8000c68:	f000 b9ae 	b.w	8000fc8 <__aeabi_idiv0>
 8000c6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c74:	f000 f83e 	bl	8000cf4 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_d2lz>:
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	4605      	mov	r5, r0
 8000c88:	460c      	mov	r4, r1
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4628      	mov	r0, r5
 8000c90:	4621      	mov	r1, r4
 8000c92:	f7ff ff09 	bl	8000aa8 <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x20>
 8000c98:	4628      	mov	r0, r5
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc7f 	bl	80005c4 <__aeabi_dmul>
 8000cc6:	f7ff ff55 	bl	8000b74 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc00 	bl	80004d0 <__aeabi_ui2d>
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd4:	f7ff fc76 	bl	80005c4 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fab8 	bl	8000254 <__aeabi_dsub>
 8000ce4:	f7ff ff46 	bl	8000b74 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	4688      	mov	r8, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14d      	bne.n	8000da0 <__udivmoddi4+0xac>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d968      	bls.n	8000ddc <__udivmoddi4+0xe8>
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	b152      	cbz	r2, 8000d26 <__udivmoddi4+0x32>
 8000d10:	fa01 f302 	lsl.w	r3, r1, r2
 8000d14:	f1c2 0120 	rsb	r1, r2, #32
 8000d18:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	ea41 0803 	orr.w	r8, r1, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d2a:	fbb8 f7f1 	udiv	r7, r8, r1
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	fb01 8817 	mls	r8, r1, r7, r8
 8000d36:	fb07 f00e 	mul.w	r0, r7, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d40:	4298      	cmp	r0, r3
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x66>
 8000d44:	eb1c 0303 	adds.w	r3, ip, r3
 8000d48:	f107 35ff 	add.w	r5, r7, #4294967295
 8000d4c:	f080 811e 	bcs.w	8000f8c <__udivmoddi4+0x298>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f240 811b 	bls.w	8000f8c <__udivmoddi4+0x298>
 8000d56:	3f02      	subs	r7, #2
 8000d58:	4463      	add	r3, ip
 8000d5a:	1a1b      	subs	r3, r3, r0
 8000d5c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000d60:	fb01 3310 	mls	r3, r1, r0, r3
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	b2a4      	uxth	r4, r4
 8000d6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x94>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	f080 8109 	bcs.w	8000f90 <__udivmoddi4+0x29c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8106 	bls.w	8000f90 <__udivmoddi4+0x29c>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	2100      	movs	r1, #0
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d92:	b11e      	cbz	r6, 8000d9c <__udivmoddi4+0xa8>
 8000d94:	2300      	movs	r3, #0
 8000d96:	40d4      	lsrs	r4, r2
 8000d98:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0xc2>
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	f000 80ee 	beq.w	8000f86 <__udivmoddi4+0x292>
 8000daa:	2100      	movs	r1, #0
 8000dac:	e9c6 0500 	strd	r0, r5, [r6]
 8000db0:	4608      	mov	r0, r1
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f183 	clz	r1, r3
 8000dba:	2900      	cmp	r1, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x160>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd4>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fc 	bhi.w	8000fc0 <__udivmoddi4+0x2cc>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb65 0303 	sbc.w	r3, r5, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e2      	beq.n	8000d9c <__udivmoddi4+0xa8>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7df      	b.n	8000d9c <__udivmoddi4+0xa8>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xec>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 8091 	bne.w	8000f0c <__udivmoddi4+0x218>
 8000dea:	eba1 000c 	sub.w	r0, r1, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb0 f3f7 	udiv	r3, r0, r7
 8000dfc:	fb07 0013 	mls	r0, r7, r3, r0
 8000e00:	0c25      	lsrs	r5, r4, #16
 8000e02:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e06:	fb0e f003 	mul.w	r0, lr, r3
 8000e0a:	42a8      	cmp	r0, r5
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x12c>
 8000e0e:	eb1c 0505 	adds.w	r5, ip, r5
 8000e12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x12a>
 8000e18:	42a8      	cmp	r0, r5
 8000e1a:	f200 80ce 	bhi.w	8000fba <__udivmoddi4+0x2c6>
 8000e1e:	4643      	mov	r3, r8
 8000e20:	1a2d      	subs	r5, r5, r0
 8000e22:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e26:	fb07 5510 	mls	r5, r7, r0, r5
 8000e2a:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e34:	45a6      	cmp	lr, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x156>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e40:	d202      	bcs.n	8000e48 <__udivmoddi4+0x154>
 8000e42:	45a6      	cmp	lr, r4
 8000e44:	f200 80b6 	bhi.w	8000fb4 <__udivmoddi4+0x2c0>
 8000e48:	4628      	mov	r0, r5
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e52:	e79e      	b.n	8000d92 <__udivmoddi4+0x9e>
 8000e54:	f1c1 0720 	rsb	r7, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e62:	fa25 fa07 	lsr.w	sl, r5, r7
 8000e66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6a:	fbba f8f9 	udiv	r8, sl, r9
 8000e6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e72:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e76:	408d      	lsls	r5, r1
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	431d      	orrs	r5, r3
 8000e7e:	fa00 f301 	lsl.w	r3, r0, r1
 8000e82:	fb08 f00e 	mul.w	r0, r8, lr
 8000e86:	0c2c      	lsrs	r4, r5, #16
 8000e88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d90b      	bls.n	8000eac <__udivmoddi4+0x1b8>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e9c:	f080 8088 	bcs.w	8000fb0 <__udivmoddi4+0x2bc>
 8000ea0:	42a0      	cmp	r0, r4
 8000ea2:	f240 8085 	bls.w	8000fb0 <__udivmoddi4+0x2bc>
 8000ea6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eaa:	4464      	add	r4, ip
 8000eac:	1a24      	subs	r4, r4, r0
 8000eae:	fbb4 f0f9 	udiv	r0, r4, r9
 8000eb2:	fb09 4410 	mls	r4, r9, r0, r4
 8000eb6:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	45a6      	cmp	lr, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1e2>
 8000ec4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ecc:	d26c      	bcs.n	8000fa8 <__udivmoddi4+0x2b4>
 8000ece:	45a6      	cmp	lr, r4
 8000ed0:	d96a      	bls.n	8000fa8 <__udivmoddi4+0x2b4>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4464      	add	r4, ip
 8000ed6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eda:	fba0 9502 	umull	r9, r5, r0, r2
 8000ede:	eba4 040e 	sub.w	r4, r4, lr
 8000ee2:	42ac      	cmp	r4, r5
 8000ee4:	46c8      	mov	r8, r9
 8000ee6:	46ae      	mov	lr, r5
 8000ee8:	d356      	bcc.n	8000f98 <__udivmoddi4+0x2a4>
 8000eea:	d053      	beq.n	8000f94 <__udivmoddi4+0x2a0>
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d069      	beq.n	8000fc4 <__udivmoddi4+0x2d0>
 8000ef0:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef4:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef8:	fa22 f301 	lsr.w	r3, r2, r1
 8000efc:	fa04 f707 	lsl.w	r7, r4, r7
 8000f00:	431f      	orrs	r7, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e747      	b.n	8000d9c <__udivmoddi4+0xa8>
 8000f0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f10:	f1c2 0120 	rsb	r1, r2, #32
 8000f14:	fa25 f301 	lsr.w	r3, r5, r1
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000f20:	4095      	lsls	r5, r2
 8000f22:	430d      	orrs	r5, r1
 8000f24:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f28:	fb07 3311 	mls	r3, r7, r1, r3
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	0c28      	lsrs	r0, r5, #16
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	fb01 f30e 	mul.w	r3, r1, lr
 8000f3a:	4283      	cmp	r3, r0
 8000f3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x260>
 8000f42:	eb1c 0000 	adds.w	r0, ip, r0
 8000f46:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f4a:	d22f      	bcs.n	8000fac <__udivmoddi4+0x2b8>
 8000f4c:	4283      	cmp	r3, r0
 8000f4e:	d92d      	bls.n	8000fac <__udivmoddi4+0x2b8>
 8000f50:	3902      	subs	r1, #2
 8000f52:	4460      	add	r0, ip
 8000f54:	1ac0      	subs	r0, r0, r3
 8000f56:	fbb0 f3f7 	udiv	r3, r0, r7
 8000f5a:	fb07 0013 	mls	r0, r7, r3, r0
 8000f5e:	b2ad      	uxth	r5, r5
 8000f60:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f64:	fb03 f00e 	mul.w	r0, r3, lr
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x28a>
 8000f6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f74:	d216      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f76:	42a8      	cmp	r0, r5
 8000f78:	d914      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f7a:	3b02      	subs	r3, #2
 8000f7c:	4465      	add	r5, ip
 8000f7e:	1a28      	subs	r0, r5, r0
 8000f80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f84:	e738      	b.n	8000df8 <__udivmoddi4+0x104>
 8000f86:	4631      	mov	r1, r6
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e707      	b.n	8000d9c <__udivmoddi4+0xa8>
 8000f8c:	462f      	mov	r7, r5
 8000f8e:	e6e4      	b.n	8000d5a <__udivmoddi4+0x66>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6f9      	b.n	8000d88 <__udivmoddi4+0x94>
 8000f94:	454b      	cmp	r3, r9
 8000f96:	d2a9      	bcs.n	8000eec <__udivmoddi4+0x1f8>
 8000f98:	ebb9 0802 	subs.w	r8, r9, r2
 8000f9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7a3      	b.n	8000eec <__udivmoddi4+0x1f8>
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	e7ea      	b.n	8000f7e <__udivmoddi4+0x28a>
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e794      	b.n	8000ed6 <__udivmoddi4+0x1e2>
 8000fac:	4641      	mov	r1, r8
 8000fae:	e7d1      	b.n	8000f54 <__udivmoddi4+0x260>
 8000fb0:	46d0      	mov	r8, sl
 8000fb2:	e77b      	b.n	8000eac <__udivmoddi4+0x1b8>
 8000fb4:	4464      	add	r4, ip
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	e747      	b.n	8000e4a <__udivmoddi4+0x156>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	4465      	add	r5, ip
 8000fbe:	e72f      	b.n	8000e20 <__udivmoddi4+0x12c>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e706      	b.n	8000dd2 <__udivmoddi4+0xde>
 8000fc4:	4631      	mov	r1, r6
 8000fc6:	e6e9      	b.n	8000d9c <__udivmoddi4+0xa8>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd0:	f3bf 8f4f 	dsb	sy
}
 8000fd4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <__NVIC_SystemReset+0x24>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fde:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <__NVIC_SystemReset+0x24>)
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_SystemReset+0x28>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe6:	f3bf 8f4f 	dsb	sy
}
 8000fea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <__NVIC_SystemReset+0x20>
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	05fa0004 	.word	0x05fa0004

08000ff8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Button interrupt, which will trigger the reset.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
  // If the button press is recognised and the debounce is not triggered at the moment
  if(GPIO_Pin == GPIO_PIN_5)
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	2b20      	cmp	r3, #32
 8001006:	d102      	bne.n	800100e <HAL_GPIO_EXTI_Callback+0x16>
  {
    HAL_TIM_Base_Start_IT(&htim6); // Starts a short period timer for debounce
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_GPIO_EXTI_Callback+0x20>)
 800100a:	f004 fbc1 	bl	8005790 <HAL_TIM_Base_Start_IT>
  }
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000027c 	.word	0x2000027c

0800101c <HAL_TIM_PeriodElapsedCallback>:

// Timer callback irq function:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  // Timer for Debounce:
  if(htim->Instance == TIM6)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10b      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
    if(turnOn == 2)
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d101      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
      NVIC_SystemReset();
 8001036:	f7ff ffc9 	bl	8000fcc <__NVIC_SystemReset>
    }
    else
    {
      turnOn = 1;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
    }
    HAL_TIM_Base_Stop_IT(&htim6); // Stops the timer
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001042:	f004 fbff 	bl	8005844 <HAL_TIM_Base_Stop_IT>
  }
  // Timer for Toggling the builtin LED:
  if(htim->Instance == TIM7)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d103      	bne.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
    HAL_GPIO_TogglePin(GPIOC, LED3_Pin);
 8001050:	2108      	movs	r1, #8
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001054:	f003 fcba 	bl	80049cc <HAL_GPIO_TogglePin>
  }
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40001000 	.word	0x40001000
 8001064:	200003f3 	.word	0x200003f3
 8001068:	2000027c 	.word	0x2000027c
 800106c:	40001400 	.word	0x40001400
 8001070:	40011000 	.word	0x40011000

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b0c6      	sub	sp, #280	; 0x118
 8001078:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f001 fc9b 	bl	80029b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 fa45 	bl	800150c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f000 fc25 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001086:	f000 fc05 	bl	8001894 <MX_DMA_Init>
  MX_CAN1_Init();
 800108a:	f000 fad5 	bl	8001638 <MX_CAN1_Init>
  MX_CAN2_Init();
 800108e:	f000 fb09 	bl	80016a4 <MX_CAN2_Init>
  MX_ADC1_Init();
 8001092:	f000 fa93 	bl	80015bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001096:	f000 fba9 	bl	80017ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800109a:	f000 fbd1 	bl	8001840 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800109e:	f000 fb6d 	bl	800177c <MX_TIM7_Init>
  MX_TIM6_Init();
 80010a2:	f000 fb35 	bl	8001710 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  while(turnOn != 1){}
 80010a6:	bf00      	nop
 80010a8:	4bb6      	ldr	r3, [pc, #728]	; (8001384 <main+0x310>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d1fb      	bne.n	80010a8 <main+0x34>
  HAL_UART_Transmit(&huart1,(uint8_t*)"A", 1, 10);
 80010b0:	230a      	movs	r3, #10
 80010b2:	2201      	movs	r2, #1
 80010b4:	49b4      	ldr	r1, [pc, #720]	; (8001388 <main+0x314>)
 80010b6:	48b5      	ldr	r0, [pc, #724]	; (800138c <main+0x318>)
 80010b8:	f004 fe4f 	bl	8005d5a <HAL_UART_Transmit>
  uint8_t C_CheckCount;       // Counter for tested conncetions from the C module
  uint8_t C1_CheckCount;      // Counter for tested conncetions from the C1 module
  uint8_t totalConnCount;     // Total connections tested (C1 and C combined)
  bool    bTestPass = true;
 80010bc:	2301      	movs	r3, #1
 80010be:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

  // These are the main program states:
  MainStates_e  mainState  = MainStates_CHECK_CONNECTIONS;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  // Test stages for each connection test
  TestStages_e testStage;

  // Data from C Module:
  C_Connections_t C_Connection[3]; // "C" MCU struct:
  C_Connection[0] = C_Init((uint8_t*)CAN1_NAME, C_Connection[0]); // CAN 1 parameters (UART):
 80010c8:	f107 0010 	add.w	r0, r7, #16
 80010cc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80010d0:	cb0c      	ldmia	r3, {r2, r3}
 80010d2:	49af      	ldr	r1, [pc, #700]	; (8001390 <main+0x31c>)
 80010d4:	f001 f92e 	bl	8002334 <C_Init>
 80010d8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80010dc:	f107 0210 	add.w	r2, r7, #16
 80010e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e4:	e883 0003 	stmia.w	r3, {r0, r1}
  C_Connection[1] = C_Init((uint8_t*)CAN2_NAME, C_Connection[1]); // CAN 2 parameters (UART):
 80010e8:	f107 0010 	add.w	r0, r7, #16
 80010ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010f0:	cb0c      	ldmia	r3, {r2, r3}
 80010f2:	49a8      	ldr	r1, [pc, #672]	; (8001394 <main+0x320>)
 80010f4:	f001 f91e 	bl	8002334 <C_Init>
 80010f8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010fc:	f107 0210 	add.w	r2, r7, #16
 8001100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001104:	e883 0003 	stmia.w	r3, {r0, r1}
  C_Connection[2] = C_Init((uint8_t*)LIN_NAME, C_Connection[2]);  // LIN parameters (UART):
 8001108:	f107 0010 	add.w	r0, r7, #16
 800110c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001110:	cb0c      	ldmia	r3, {r2, r3}
 8001112:	49a1      	ldr	r1, [pc, #644]	; (8001398 <main+0x324>)
 8001114:	f001 f90e 	bl	8002334 <C_Init>
 8001118:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800111c:	f107 0210 	add.w	r2, r7, #16
 8001120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001124:	e883 0003 	stmia.w	r3, {r0, r1}

  // Data from this - C1 Module:
  C1_Connections_t C1_Connection[2]; // "C1" Connections MCU struct:
  C1_Connection[0] = C1_Init(&hcan1, (uint8_t*)CAN3_NAME, C1_Connection[0]); // CAN3 Parameters:
 8001128:	463d      	mov	r5, r7
 800112a:	466c      	mov	r4, sp
 800112c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001130:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001138:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800113c:	4a97      	ldr	r2, [pc, #604]	; (800139c <main+0x328>)
 800113e:	4998      	ldr	r1, [pc, #608]	; (80013a0 <main+0x32c>)
 8001140:	4628      	mov	r0, r5
 8001142:	f001 f935 	bl	80023b0 <C1_Init>
 8001146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800114a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800114e:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8001152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  C1_Connection[1] = C1_Init(&hcan2, (uint8_t*)CAN4_NAME, C1_Connection[1]); // CAN4 Parameters:
 8001158:	463d      	mov	r5, r7
 800115a:	466c      	mov	r4, sp
 800115c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001160:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001168:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800116c:	4a8d      	ldr	r2, [pc, #564]	; (80013a4 <main+0x330>)
 800116e:	498e      	ldr	r1, [pc, #568]	; (80013a8 <main+0x334>)
 8001170:	4628      	mov	r0, r5
 8001172:	f001 f91d 	bl	80023b0 <C1_Init>
 8001176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800117a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800117e:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  test1  test1[6];
  for(int i=0; i<6 ; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800118e:	e00f      	b.n	80011b0 <main+0x13c>
  {
    test1[i].bCurrentOk = true;
 8001190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001194:	221a      	movs	r2, #26
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800119e:	443b      	add	r3, r7
 80011a0:	3bd3      	subs	r3, #211	; 0xd3
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<6 ; i++)
 80011a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80011b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	ddeb      	ble.n	8001190 <main+0x11c>
  }

  print_startMenu(); // Print start menu in the terminal:
 80011b8:	f001 f94e 	bl	8002458 <print_startMenu>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA,PASS_C1_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	487a      	ldr	r0, [pc, #488]	; (80013ac <main+0x338>)
 80011c2:	f003 fbeb 	bl	800499c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,FAIL_C1_Pin, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	4878      	ldr	r0, [pc, #480]	; (80013ac <main+0x338>)
 80011cc:	f003 fbe6 	bl	800499c <HAL_GPIO_WritePin>

  gChannelsTested = 2;
 80011d0:	4b77      	ldr	r3, [pc, #476]	; (80013b0 <main+0x33c>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]
  uartRx_receiveAdcDataC(&huart1);
 80011d6:	486d      	ldr	r0, [pc, #436]	; (800138c <main+0x318>)
 80011d8:	f001 fb8c 	bl	80028f4 <uartRx_receiveAdcDataC>
  print_adcDataC(gAdcRxDataUart, test1, gChannelsTested);
 80011dc:	4b74      	ldr	r3, [pc, #464]	; (80013b0 <main+0x33c>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4873      	ldr	r0, [pc, #460]	; (80013b4 <main+0x340>)
 80011e8:	f001 f9d0 	bl	800258c <print_adcDataC>

  memset(gAdcRxDataUart, 0, sizeof(gAdcRxDataUart));      // Resets the global variable array
 80011ec:	2215      	movs	r2, #21
 80011ee:	2100      	movs	r1, #0
 80011f0:	4870      	ldr	r0, [pc, #448]	; (80013b4 <main+0x340>)
 80011f2:	f005 fc2b 	bl	8006a4c <memset>
  gStartDmaUart = true;                                   // Starts the dma reading UART
 80011f6:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <main+0x344>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]

  for(uint8_t testTry=1; testTry<=2; testTry++) // 2 test tries are used to fully test the system without any hiccups
 80011fc:	2301      	movs	r3, #1
 80011fe:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8001202:	e116      	b.n	8001432 <main+0x3be>
  {
    // Resets all the counters and states for a new try
    C_CheckCount   = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    C1_CheckCount  = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
    totalConnCount = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
    moduleTested   = ModuleTested_CHECK_C_UART;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    testStage      = TestStages_TRANSMIT_MSG;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
    do
    {
      switch(mainState)
 8001222:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <main+0x1be>
 800122a:	2b01      	cmp	r3, #1
 800122c:	f000 8084 	beq.w	8001338 <main+0x2c4>
 8001230:	e0f5      	b.n	800141e <main+0x3aa>
      {
          case MainStates_CHECK_CONNECTIONS:
            // If the Id is not for CAN1 and CAN2
            switch(moduleTested)
 8001232:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <main+0x1cc>
 800123a:	2b01      	cmp	r3, #1
 800123c:	d039      	beq.n	80012b2 <main+0x23e>
 800123e:	e077      	b.n	8001330 <main+0x2bc>
            {
              case ModuleTested_CHECK_C_UART:
                switch(testStage)
 8001240:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0x1da>
 8001248:	2b01      	cmp	r3, #1
 800124a:	d00f      	beq.n	800126c <main+0x1f8>
                     // The byte received will then return the status of the connection from this funtion (Good or Bad)
                     C_Connection[C_CheckCount].bIsConnected = uartRx_isConnectionOk(C_Connection[C_CheckCount].uartMsg, C_Connection[C_CheckCount].uartMsgError);
                     testStage = TestStages_TRANSMIT_MSG; // Goes to the first stage
                     break;
                }
                break;
 800124c:	e070      	b.n	8001330 <main+0x2bc>
                     HAL_UART_Transmit(&huart1, &C_Connection[C_CheckCount].uartMsg, 1, 10);
 800124e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001252:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	1d19      	adds	r1, r3, #4
 800125c:	230a      	movs	r3, #10
 800125e:	2201      	movs	r2, #1
 8001260:	484a      	ldr	r0, [pc, #296]	; (800138c <main+0x318>)
 8001262:	f004 fd7a 	bl	8005d5a <HAL_UART_Transmit>
                     testStage = TestStages_RECEIVE; // Goes to the next stage
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
                     C_Connection[C_CheckCount].bIsConnected = uartRx_isConnectionOk(C_Connection[C_CheckCount].uartMsg, C_Connection[C_CheckCount].uartMsgError);
 800126c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001276:	443b      	add	r3, r7
 8001278:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 800127c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001286:	443b      	add	r3, r7
 8001288:	f813 3c2b 	ldrb.w	r3, [r3, #-43]
 800128c:	f897 4107 	ldrb.w	r4, [r7, #263]	; 0x107
 8001290:	4619      	mov	r1, r3
 8001292:	4610      	mov	r0, r2
 8001294:	f001 fb52 	bl	800293c <uartRx_isConnectionOk>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	00e3      	lsls	r3, r4, #3
 800129e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80012a2:	443b      	add	r3, r7
 80012a4:	f803 2c2a 	strb.w	r2, [r3, #-42]
                     testStage = TestStages_TRANSMIT_MSG; // Goes to the first stage
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
                     break;
 80012ae:	bf00      	nop
                break;
 80012b0:	e03e      	b.n	8001330 <main+0x2bc>

              case ModuleTested_CHECK_C1:
                switch(testStage)
 80012b2:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <main+0x24c>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d01f      	beq.n	80012fe <main+0x28a>
                  case TestStages_RECEIVE: // Enters the reception stage
                    // This returns the checked status of the connetion (Good or Bad)
                    C1_Connection[C1_CheckCount].bIsConnected = canRx_isCanOk(C1_Connection[C1_CheckCount].canMsg);
                    testStage = TestStages_TRANSMIT_MSG;  // Goes to the first stage
                 }
                break;
 80012be:	e036      	b.n	800132e <main+0x2ba>
                    canTx_sendMsg(C1_Connection[C1_CheckCount].canId, C1_Connection[C1_CheckCount].canMsg, C1_Connection[C1_CheckCount].pCan);
 80012c0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80012ca:	443b      	add	r3, r7
 80012cc:	3b4c      	subs	r3, #76	; 0x4c
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80012da:	443b      	add	r3, r7
 80012dc:	3b48      	subs	r3, #72	; 0x48
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80012ec:	443b      	add	r3, r7
 80012ee:	3b44      	subs	r3, #68	; 0x44
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	f000 fffc 	bl	80022f0 <canTx_sendMsg>
                    testStage = TestStages_RECEIVE; // Goes to the next stage
 80012f8:	2301      	movs	r3, #1
 80012fa:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
                    C1_Connection[C1_CheckCount].bIsConnected = canRx_isCanOk(C1_Connection[C1_CheckCount].canMsg);
 80012fe:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001308:	443b      	add	r3, r7
 800130a:	3b48      	subs	r3, #72	; 0x48
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f897 4106 	ldrb.w	r4, [r7, #262]	; 0x106
 8001312:	4618      	mov	r0, r3
 8001314:	f000 ff82 	bl	800221c <canRx_isCanOk>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	0123      	lsls	r3, r4, #4
 800131e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001322:	443b      	add	r3, r7
 8001324:	3b47      	subs	r3, #71	; 0x47
 8001326:	701a      	strb	r2, [r3, #0]
                    testStage = TestStages_TRANSMIT_MSG;  // Goes to the first stage
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
                break;
 800132e:	bf00      	nop
            }
            mainState = MainStates_PRINT_STATUS_USB; // Moves on to the next state:
 8001330:	2301      	movs	r3, #1
 8001332:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            break;
 8001336:	e072      	b.n	800141e <main+0x3aa>
          case MainStates_PRINT_STATUS_USB:
            // Print status Uart for CAN1 and CAN2
            switch(moduleTested)
 8001338:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <main+0x2d2>
 8001340:	2b01      	cmp	r3, #1
 8001342:	d03d      	beq.n	80013c0 <main+0x34c>
 8001344:	e05b      	b.n	80013fe <main+0x38a>
            {
             case ModuleTested_CHECK_C_UART:
                 if(testTry == 2)  // Print status Uart for CAN3 and CAN4 on a second test try
 8001346:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800134a:	2b02      	cmp	r3, #2
 800134c:	d114      	bne.n	8001378 <main+0x304>
                 {
                   // Prints the C connection data onto the terminal
                   print_connectionStatus(totalConnCount, C_Connection[C_CheckCount].name, C_Connection[C_CheckCount].bIsConnected, &huart2);
 800134e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001358:	443b      	add	r3, r7
 800135a:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800135e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001368:	443b      	add	r3, r7
 800136a:	f813 2c2a 	ldrb.w	r2, [r3, #-42]
 800136e:	f897 0105 	ldrb.w	r0, [r7, #261]	; 0x105
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <main+0x348>)
 8001374:	f001 f8ce 	bl	8002514 <print_connectionStatus>
                 }
                 C_CheckCount++;
 8001378:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800137c:	3301      	adds	r3, #1
 800137e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
                 break;
 8001382:	e03c      	b.n	80013fe <main+0x38a>
 8001384:	200003f3 	.word	0x200003f3
 8001388:	0800b2d8 	.word	0x0800b2d8
 800138c:	2000030c 	.word	0x2000030c
 8001390:	0800b2dc 	.word	0x0800b2dc
 8001394:	0800b2e8 	.word	0x0800b2e8
 8001398:	0800b2f4 	.word	0x0800b2f4
 800139c:	0800b2fc 	.word	0x0800b2fc
 80013a0:	2000022c 	.word	0x2000022c
 80013a4:	0800b308 	.word	0x0800b308
 80013a8:	20000254 	.word	0x20000254
 80013ac:	40010800 	.word	0x40010800
 80013b0:	200003da 	.word	0x200003da
 80013b4:	200003dc 	.word	0x200003dc
 80013b8:	200003f1 	.word	0x200003f1
 80013bc:	20000350 	.word	0x20000350
              case ModuleTested_CHECK_C1:
                if(testTry == 2)  // Print status Uart for CAN1 and CAN2, LIN on a second test try
 80013c0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d114      	bne.n	80013f2 <main+0x37e>
                {
                  // Prints the C1 connection data onto the terminal
                  print_connectionStatus(totalConnCount, C1_Connection[C1_CheckCount].name, C1_Connection[C1_CheckCount].bIsConnected, &huart2);
 80013c8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80013d2:	443b      	add	r3, r7
 80013d4:	3b50      	subs	r3, #80	; 0x50
 80013d6:	6819      	ldr	r1, [r3, #0]
 80013d8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80013e2:	443b      	add	r3, r7
 80013e4:	3b47      	subs	r3, #71	; 0x47
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	f897 0105 	ldrb.w	r0, [r7, #261]	; 0x105
 80013ec:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <main+0x47c>)
 80013ee:	f001 f891 	bl	8002514 <print_connectionStatus>
                }
                C1_CheckCount++;
 80013f2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80013f6:	3301      	adds	r3, #1
 80013f8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
                break;
 80013fc:	bf00      	nop
            }
            totalConnCount++;       // Increments the total connections tested
 80013fe:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001402:	3301      	adds	r3, #1
 8001404:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
            if(totalConnCount == 3) // If CAN1, CAN2 and LIN have already been tested:
 8001408:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800140c:	2b03      	cmp	r3, #3
 800140e:	d102      	bne.n	8001416 <main+0x3a2>
            {
              moduleTested = ModuleTested_CHECK_C1;   // Move to testing the C module connections
 8001410:	2301      	movs	r3, #1
 8001412:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
            }
            mainState = MainStates_CHECK_CONNECTIONS; // Moves on to the primary state:
 8001416:	2300      	movs	r3, #0
 8001418:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            break;
 800141c:	bf00      	nop
      }
    }
    while(totalConnCount < TOTAL_CONNECTIONS); // Checks if all connections (C and C1) have been tested
 800141e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001422:	2b04      	cmp	r3, #4
 8001424:	f67f aefd 	bls.w	8001222 <main+0x1ae>
  for(uint8_t testTry=1; testTry<=2; testTry++) // 2 test tries are used to fully test the system without any hiccups
 8001428:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800142c:	3301      	adds	r3, #1
 800142e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8001432:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001436:	2b02      	cmp	r3, #2
 8001438:	f67f aee4 	bls.w	8001204 <main+0x190>
    }
    gStartDmaUart   = false;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <main+0x480>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,(uint8_t*)"R", 1, 10);
 8001442:	230a      	movs	r3, #10
 8001444:	2201      	movs	r2, #1
 8001446:	492c      	ldr	r1, [pc, #176]	; (80014f8 <main+0x484>)
 8001448:	482c      	ldr	r0, [pc, #176]	; (80014fc <main+0x488>)
 800144a:	f004 fc86 	bl	8005d5a <HAL_UART_Transmit>


    gChannelsTested = 3;
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <main+0x48c>)
 8001450:	2203      	movs	r2, #3
 8001452:	701a      	strb	r2, [r3, #0]
    uartRx_receiveAdcDataC(&huart1);
 8001454:	4829      	ldr	r0, [pc, #164]	; (80014fc <main+0x488>)
 8001456:	f001 fa4d 	bl	80028f4 <uartRx_receiveAdcDataC>
    print_adcDataC(gAdcRxDataUart, test1, gChannelsTested);
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <main+0x48c>)
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4827      	ldr	r0, [pc, #156]	; (8001504 <main+0x490>)
 8001466:	f001 f891 	bl	800258c <print_adcDataC>

    //--
    for(int i = 0; i<3;i++)
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001470:	e014      	b.n	800149c <main+0x428>
    {
      if(C_Connection[i].bIsConnected == false)
 8001472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800147c:	443b      	add	r3, r7
 800147e:	f813 3c2a 	ldrb.w	r3, [r3, #-42]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <main+0x41e>
      {
        bTestPass = false;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    for(int i = 0; i<3;i++)
 8001492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001496:	3301      	adds	r3, #1
 8001498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800149c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	dde6      	ble.n	8001472 <main+0x3fe>
      }
    }
    for(int i = 0; i<2; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80014aa:	e014      	b.n	80014d6 <main+0x462>
    {
      if(C1_Connection[i].bIsConnected == false)
 80014ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80014b6:	443b      	add	r3, r7
 80014b8:	3b47      	subs	r3, #71	; 0x47
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <main+0x458>
      {
        bTestPass = false;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    for(int i = 0; i<2; i++)
 80014cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014d0:	3301      	adds	r3, #1
 80014d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80014d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014da:	2b01      	cmp	r3, #1
 80014dc:	dde6      	ble.n	80014ac <main+0x438>
      }
    }
    print_endNote(bTestPass); // Prints the end data in the terminal
 80014de:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 ffcc 	bl	8002480 <print_endNote>
    //--

    turnOn = 2;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <main+0x494>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	701a      	strb	r2, [r3, #0]
    while(1);
 80014ee:	e7fe      	b.n	80014ee <main+0x47a>
 80014f0:	20000350 	.word	0x20000350
 80014f4:	200003f1 	.word	0x200003f1
 80014f8:	0800b314 	.word	0x0800b314
 80014fc:	2000030c 	.word	0x2000030c
 8001500:	200003da 	.word	0x200003da
 8001504:	200003dc 	.word	0x200003dc
 8001508:	200003f3 	.word	0x200003f3

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b09c      	sub	sp, #112	; 0x70
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001516:	2238      	movs	r2, #56	; 0x38
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f005 fa96 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2220      	movs	r2, #32
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f005 fa88 	bl	8006a4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001546:	2300      	movs	r3, #0
 8001548:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800154a:	2300      	movs	r3, #0
 800154c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fa6c 	bl	8004a30 <HAL_RCC_OscConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800155e:	f000 fa37 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	230f      	movs	r3, #15
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001566:	2301      	movs	r3, #1
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fd6d 	bl	800505c <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001588:	f000 fa22 	bl	80019d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800158c:	2302      	movs	r3, #2
 800158e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001594:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f003 ff77 	bl	800548c <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015a4:	f000 fa14 	bl	80019d0 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <SystemClock_Config+0xac>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	3770      	adds	r7, #112	; 0x70
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	42420070 	.word	0x42420070

080015bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_ADC1_Init+0x74>)
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <MX_ADC1_Init+0x78>)
 80015d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_ADC1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_ADC1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_ADC1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_ADC1_Init+0x74>)
 80015e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_ADC1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_ADC1_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_ADC1_Init+0x74>)
 80015fa:	f001 fa61 	bl	8002ac0 <HAL_ADC_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 f9e4 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001608:	2308      	movs	r3, #8
 800160a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800160c:	2301      	movs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_ADC1_Init+0x74>)
 800161a:	f001 fb29 	bl	8002c70 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001624:	f000 f9d4 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001fc 	.word	0x200001fc
 8001634:	40012400 	.word	0x40012400

08001638 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_CAN1_Init+0x64>)
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <MX_CAN1_Init+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_CAN1_Init+0x64>)
 8001644:	2201      	movs	r2, #1
 8001646:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_CAN1_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_CAN1_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_CAN1_Init+0x64>)
 8001656:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800165a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_CAN1_Init+0x64>)
 800165e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001662:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <MX_CAN1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_CAN1_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_CAN1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_CAN1_Init+0x64>)
 8001678:	2201      	movs	r2, #1
 800167a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_CAN1_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_CAN1_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_CAN1_Init+0x64>)
 800168a:	f001 fc2a 	bl	8002ee2 <HAL_CAN_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001694:	f000 f99c 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000022c 	.word	0x2000022c
 80016a0:	40006400 	.word	0x40006400

080016a4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_CAN2_Init+0x64>)
 80016aa:	4a18      	ldr	r2, [pc, #96]	; (800170c <MX_CAN2_Init+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_CAN2_Init+0x64>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_CAN2_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_CAN2_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_CAN2_Init+0x64>)
 80016c2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80016c6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_CAN2_Init+0x64>)
 80016ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016ce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <MX_CAN2_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_CAN2_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_CAN2_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_CAN2_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <MX_CAN2_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_CAN2_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_CAN2_Init+0x64>)
 80016f6:	f001 fbf4 	bl	8002ee2 <HAL_CAN_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001700:	f000 f966 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000254 	.word	0x20000254
 800170c:	40006800 	.word	0x40006800

08001710 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_TIM6_Init+0x64>)
 8001720:	4a15      	ldr	r2, [pc, #84]	; (8001778 <MX_TIM6_Init+0x68>)
 8001722:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11999;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_TIM6_Init+0x64>)
 8001726:	f642 62df 	movw	r2, #11999	; 0x2edf
 800172a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_TIM6_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_TIM6_Init+0x64>)
 8001734:	2201      	movs	r2, #1
 8001736:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_TIM6_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_TIM6_Init+0x64>)
 8001740:	f003 ffd6 	bl	80056f0 <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800174a:	f000 f941 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001756:	463b      	mov	r3, r7
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_TIM6_Init+0x64>)
 800175c:	f004 fa38 	bl	8005bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001766:	f000 f933 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000027c 	.word	0x2000027c
 8001778:	40001000 	.word	0x40001000

0800177c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	463b      	mov	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_TIM7_Init+0x68>)
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <MX_TIM7_Init+0x6c>)
 800178e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 12000;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_TIM7_Init+0x68>)
 8001792:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001796:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_TIM7_Init+0x68>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_TIM7_Init+0x68>)
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_TIM7_Init+0x68>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017aa:	480e      	ldr	r0, [pc, #56]	; (80017e4 <MX_TIM7_Init+0x68>)
 80017ac:	f003 ffa0 	bl	80056f0 <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80017b6:	f000 f90b 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM7_Init+0x68>)
 80017c8:	f004 fa02 	bl	8005bd0 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80017d2:	f000 f8fd 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM7_Init+0x68>)
 80017d8:	f003 ffda 	bl	8005790 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200002c4 	.word	0x200002c4
 80017e8:	40001400 	.word	0x40001400

080017ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART1_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001824:	f004 fa4c 	bl	8005cc0 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 f8cf 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000030c 	.word	0x2000030c
 800183c:	40013800 	.word	0x40013800

08001840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART2_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800184c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001878:	f004 fa22 	bl	8005cc0 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 f8a5 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000350 	.word	0x20000350
 8001890:	40004400 	.word	0x40004400

08001894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_DMA_Init+0x38>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <MX_DMA_Init+0x38>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6153      	str	r3, [r2, #20]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_DMA_Init+0x38>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	200f      	movs	r0, #15
 80018b8:	f002 fa33 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018bc:	200f      	movs	r0, #15
 80018be:	f002 fa4c 	bl	8003d5a <HAL_NVIC_EnableIRQ>

}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_GPIO_Init+0xf0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <MX_GPIO_Init+0xf0>)
 80018ea:	f043 0320 	orr.w	r3, r3, #32
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <MX_GPIO_Init+0xf0>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <MX_GPIO_Init+0xf0>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <MX_GPIO_Init+0xf0>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <MX_GPIO_Init+0xf0>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <MX_GPIO_Init+0xf0>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <MX_GPIO_Init+0xf0>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <MX_GPIO_Init+0xf0>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <MX_GPIO_Init+0xf0>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <MX_GPIO_Init+0xf0>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_GPIO_Init+0xf0>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	210e      	movs	r1, #14
 8001948:	481e      	ldr	r0, [pc, #120]	; (80019c4 <MX_GPIO_Init+0xf4>)
 800194a:	f003 f827 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PASS_C1_Pin|FAIL_C1_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	21c0      	movs	r1, #192	; 0xc0
 8001952:	481d      	ldr	r0, [pc, #116]	; (80019c8 <MX_GPIO_Init+0xf8>)
 8001954:	f003 f822 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001958:	230e      	movs	r3, #14
 800195a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2302      	movs	r3, #2
 8001966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4619      	mov	r1, r3
 800196e:	4815      	ldr	r0, [pc, #84]	; (80019c4 <MX_GPIO_Init+0xf4>)
 8001970:	f002 fe90 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001974:	2320      	movs	r3, #32
 8001976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_GPIO_Init+0xfc>)
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	4810      	ldr	r0, [pc, #64]	; (80019c8 <MX_GPIO_Init+0xf8>)
 8001988:	f002 fe84 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PASS_C1_Pin FAIL_C1_Pin */
  GPIO_InitStruct.Pin = PASS_C1_Pin|FAIL_C1_Pin;
 800198c:	23c0      	movs	r3, #192	; 0xc0
 800198e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2302      	movs	r3, #2
 800199a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4619      	mov	r1, r3
 80019a2:	4809      	ldr	r0, [pc, #36]	; (80019c8 <MX_GPIO_Init+0xf8>)
 80019a4:	f002 fe76 	bl	8004694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2017      	movs	r0, #23
 80019ae:	f002 f9b8 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b2:	2017      	movs	r0, #23
 80019b4:	f002 f9d1 	bl	8003d5a <HAL_NVIC_EnableIRQ>

}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40011000 	.word	0x40011000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	10310000 	.word	0x10310000

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin | LED3_Pin, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	210e      	movs	r1, #14
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <Error_Handler+0x1c>)
 80019da:	f002 ffdf 	bl	800499c <HAL_GPIO_WritePin>
  while(1)
  {
    HAL_GPIO_WritePin(GPIOC, LED1_Pin, 1);
 80019de:	2201      	movs	r2, #1
 80019e0:	2102      	movs	r1, #2
 80019e2:	4802      	ldr	r0, [pc, #8]	; (80019ec <Error_Handler+0x1c>)
 80019e4:	f002 ffda 	bl	800499c <HAL_GPIO_WritePin>
 80019e8:	e7f9      	b.n	80019de <Error_Handler+0xe>
 80019ea:	bf00      	nop
 80019ec:	40011000 	.word	0x40011000

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_MspInit+0x40>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_MspInit+0x40>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_MspInit+0x40>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_MspInit+0x40>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_MspInit+0x40>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_MspInit+0x40>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_ADC_MspInit+0x6c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d121      	bne.n	8001a98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_ADC_MspInit+0x70>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <HAL_ADC_MspInit+0x70>)
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_ADC_MspInit+0x70>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_ADC_MspInit+0x70>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <HAL_ADC_MspInit+0x70>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_ADC_MspInit+0x70>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a84:	2301      	movs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_ADC_MspInit+0x74>)
 8001a94:	f002 fdfe 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40012400 	.word	0x40012400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010c00 	.word	0x40010c00

08001aac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a68      	ldr	r2, [pc, #416]	; (8001c68 <HAL_CAN_MspInit+0x1bc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d165      	bne.n	8001b98 <HAL_CAN_MspInit+0xec>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001acc:	4b67      	ldr	r3, [pc, #412]	; (8001c6c <HAL_CAN_MspInit+0x1c0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a66      	ldr	r2, [pc, #408]	; (8001c6c <HAL_CAN_MspInit+0x1c0>)
 8001ad4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ad6:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <HAL_CAN_MspInit+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10b      	bne.n	8001af6 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6193      	str	r3, [r2, #24]
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4854      	ldr	r0, [pc, #336]	; (8001c74 <HAL_CAN_MspInit+0x1c8>)
 8001b24:	f002 fdb6 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	484d      	ldr	r0, [pc, #308]	; (8001c74 <HAL_CAN_MspInit+0x1c8>)
 8001b3e:	f002 fda9 	bl	8004694 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001b42:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_CAN_MspInit+0x1cc>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b60:	4a45      	ldr	r2, [pc, #276]	; (8001c78 <HAL_CAN_MspInit+0x1cc>)
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2013      	movs	r0, #19
 8001b6c:	f002 f8d9 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b70:	2013      	movs	r0, #19
 8001b72:	f002 f8f2 	bl	8003d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2014      	movs	r0, #20
 8001b7c:	f002 f8d1 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b80:	2014      	movs	r0, #20
 8001b82:	f002 f8ea 	bl	8003d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2016      	movs	r0, #22
 8001b8c:	f002 f8c9 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001b90:	2016      	movs	r0, #22
 8001b92:	f002 f8e2 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001b96:	e063      	b.n	8001c60 <HAL_CAN_MspInit+0x1b4>
  else if(hcan->Instance==CAN2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a37      	ldr	r2, [pc, #220]	; (8001c7c <HAL_CAN_MspInit+0x1d0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d15e      	bne.n	8001c60 <HAL_CAN_MspInit+0x1b4>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ba2:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a32      	ldr	r2, [pc, #200]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_CAN_MspInit+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_CAN_MspInit+0x1c0>)
 8001bc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_CAN_MspInit+0x1c0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10b      	bne.n	8001be4 <HAL_CAN_MspInit+0x138>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	61d3      	str	r3, [r2, #28]
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_CAN_MspInit+0x1c4>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4818      	ldr	r0, [pc, #96]	; (8001c74 <HAL_CAN_MspInit+0x1c8>)
 8001c12:	f002 fd3f 	bl	8004694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <HAL_CAN_MspInit+0x1c8>)
 8001c2c:	f002 fd32 	bl	8004694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	203f      	movs	r0, #63	; 0x3f
 8001c36:	f002 f874 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001c3a:	203f      	movs	r0, #63	; 0x3f
 8001c3c:	f002 f88d 	bl	8003d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2041      	movs	r0, #65	; 0x41
 8001c46:	f002 f86c 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001c4a:	2041      	movs	r0, #65	; 0x41
 8001c4c:	f002 f885 	bl	8003d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	2042      	movs	r0, #66	; 0x42
 8001c56:	f002 f864 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8001c5a:	2042      	movs	r0, #66	; 0x42
 8001c5c:	f002 f87d 	bl	8003d5a <HAL_NVIC_EnableIRQ>
}
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	; 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40006400 	.word	0x40006400
 8001c6c:	200003f4 	.word	0x200003f4
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40006800 	.word	0x40006800

08001c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_TIM_Base_MspInit+0x78>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d114      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_TIM_Base_MspInit+0x7c>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_TIM_Base_MspInit+0x7c>)
 8001c98:	f043 0310 	orr.w	r3, r3, #16
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_TIM_Base_MspInit+0x7c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2036      	movs	r0, #54	; 0x36
 8001cb0:	f002 f837 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001cb4:	2036      	movs	r0, #54	; 0x36
 8001cb6:	f002 f850 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001cba:	e018      	b.n	8001cee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <HAL_TIM_Base_MspInit+0x80>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d113      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_TIM_Base_MspInit+0x7c>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <HAL_TIM_Base_MspInit+0x7c>)
 8001ccc:	f043 0320 	orr.w	r3, r3, #32
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_TIM_Base_MspInit+0x7c>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2037      	movs	r0, #55	; 0x37
 8001ce4:	f002 f81d 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ce8:	2037      	movs	r0, #55	; 0x37
 8001cea:	f002 f836 	bl	8003d5a <HAL_NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40001000 	.word	0x40001000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40001400 	.word	0x40001400

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_UART_MspInit+0x164>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d160      	bne.n	8001de6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d24:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a50      	ldr	r2, [pc, #320]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a4a      	ldr	r2, [pc, #296]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4619      	mov	r1, r3
 8001d68:	4841      	ldr	r0, [pc, #260]	; (8001e70 <HAL_UART_MspInit+0x16c>)
 8001d6a:	f002 fc93 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	4619      	mov	r1, r3
 8001d82:	483b      	ldr	r0, [pc, #236]	; (8001e70 <HAL_UART_MspInit+0x16c>)
 8001d84:	f002 fc86 	bl	8004694 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001d88:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001d8a:	4a3b      	ldr	r2, [pc, #236]	; (8001e78 <HAL_UART_MspInit+0x174>)
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001db8:	482e      	ldr	r0, [pc, #184]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001dba:	f001 ffe9 	bl	8003d90 <HAL_DMA_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001dc4:	f7ff fe04 	bl	80019d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8001dce:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <HAL_UART_MspInit+0x170>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2025      	movs	r0, #37	; 0x25
 8001dda:	f001 ffa2 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dde:	2025      	movs	r0, #37	; 0x25
 8001de0:	f001 ffbb 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001de4:	e03c      	b.n	8001e60 <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <HAL_UART_MspInit+0x178>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d137      	bne.n	8001e60 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfa:	61d3      	str	r3, [r2, #28]
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_UART_MspInit+0x168>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e20:	2304      	movs	r3, #4
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0318 	add.w	r3, r7, #24
 8001e30:	4619      	mov	r1, r3
 8001e32:	480f      	ldr	r0, [pc, #60]	; (8001e70 <HAL_UART_MspInit+0x16c>)
 8001e34:	f002 fc2e 	bl	8004694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4809      	ldr	r0, [pc, #36]	; (8001e70 <HAL_UART_MspInit+0x16c>)
 8001e4c:	f002 fc22 	bl	8004694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2026      	movs	r0, #38	; 0x26
 8001e56:	f001 ff64 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e5a:	2026      	movs	r0, #38	; 0x26
 8001e5c:	f001 ff7d 	bl	8003d5a <HAL_NVIC_EnableIRQ>
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010800 	.word	0x40010800
 8001e74:	20000394 	.word	0x20000394
 8001e78:	40020058 	.word	0x40020058
 8001e7c:	40004400 	.word	0x40004400

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <NMI_Handler+0x4>

08001e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <MemManage_Handler+0x4>

08001e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler+0x4>

08001e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec6:	f000 fdbb 	bl	8002a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <DMA1_Channel5_IRQHandler+0x10>)
 8001ed6:	f002 f973 	bl	80041c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000394 	.word	0x20000394

08001ee4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <CAN1_TX_IRQHandler+0x10>)
 8001eea:	f001 fc29 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000022c 	.word	0x2000022c

08001ef8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <CAN1_RX0_IRQHandler+0x10>)
 8001efe:	f001 fc1f 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000022c 	.word	0x2000022c

08001f0c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <CAN1_SCE_IRQHandler+0x10>)
 8001f12:	f001 fc15 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000022c 	.word	0x2000022c

08001f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f24:	2020      	movs	r0, #32
 8001f26:	f002 fd6b 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <USART1_IRQHandler+0x10>)
 8001f36:	f004 f803 	bl	8005f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000030c 	.word	0x2000030c

08001f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <USART2_IRQHandler+0x10>)
 8001f4a:	f003 fff9 	bl	8005f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000350 	.word	0x20000350

08001f58 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <TIM6_IRQHandler+0x10>)
 8001f5e:	f003 fc9f 	bl	80058a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000027c 	.word	0x2000027c

08001f6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <TIM7_IRQHandler+0x10>)
 8001f72:	f003 fc95 	bl	80058a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200002c4 	.word	0x200002c4

08001f80 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <CAN2_TX_IRQHandler+0x10>)
 8001f86:	f001 fbdb 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000254 	.word	0x20000254

08001f94 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <CAN2_RX1_IRQHandler+0x10>)
 8001f9a:	f001 fbd1 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000254 	.word	0x20000254

08001fa8 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <CAN2_SCE_IRQHandler+0x10>)
 8001fae:	f001 fbc7 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000254 	.word	0x20000254

08001fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <_kill>:

int _kill(int pid, int sig)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fd4:	f004 fd10 	bl	80069f8 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2216      	movs	r2, #22
 8001fdc:	601a      	str	r2, [r3, #0]
  return -1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_exit>:

void _exit (int status)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffe7 	bl	8001fca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ffc:	e7fe      	b.n	8001ffc <_exit+0x12>

08001ffe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e00a      	b.n	8002026 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002010:	f3af 8000 	nop.w
 8002014:	4601      	mov	r1, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	60ba      	str	r2, [r7, #8]
 800201c:	b2ca      	uxtb	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	dbf0      	blt.n	8002010 <_read+0x12>
  }

  return len;
 800202e:	687b      	ldr	r3, [r7, #4]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e009      	b.n	800205e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	60ba      	str	r2, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	dbf1      	blt.n	800204a <_write+0x12>
  }
  return len;
 8002066:	687b      	ldr	r3, [r7, #4]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_close>:

int _close(int file)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002096:	605a      	str	r2, [r3, #4]
  return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <_isatty>:

int _isatty(int file)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ac:	2301      	movs	r3, #1
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <_sbrk+0x5c>)
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <_sbrk+0x60>)
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <_sbrk+0x64>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <_sbrk+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d207      	bcs.n	8002110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002100:	f004 fc7a 	bl	80069f8 <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e009      	b.n	8002124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <_sbrk+0x64>)
 8002120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20010000 	.word	0x20010000
 8002130:	00000400 	.word	0x00000400
 8002134:	200003f8 	.word	0x200003f8
 8002138:	20000418 	.word	0x20000418

0800213c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <canConfig_filterConfig>:
void canConfig_filterConfig(CAN_HandleTypeDef *hCan); // Configuring the CAN1 Filter
static void canConfig_startCan(CAN_HandleTypeDef *hCan, uint32_t fifoIrq);

//----------------
void canConfig_filterConfig(CAN_HandleTypeDef *hCan) // Configuring the CAN1 Filter
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	; 0x38
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  // Empty the memory
  CAN_FilterTypeDef canFilterInit = {0};
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2228      	movs	r2, #40	; 0x28
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f004 fc77 	bl	8006a4c <memset>
  uint32_t          fifoIrq;

  // Both CAN1 and CAN2 Configs
  canFilterInit.FilterActivation     = ENABLE;
 800215e:	2301      	movs	r3, #1
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  canFilterInit.FilterIdHigh         = 0x0000;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  canFilterInit.FilterIdLow          = 0x0000;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  canFilterInit.FilterMaskIdHigh     = 0x0000;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  canFilterInit.FilterMaskIdLow      = 0x0000;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  canFilterInit.FilterMode           = CAN_FILTERMODE_IDMASK;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  canFilterInit.FilterScale          = CAN_FILTERSCALE_32BIT;
 8002176:	2301      	movs	r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28

  // CAN 1 Filter Configs
  if(hCan -> Instance == CAN1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <canConfig_filterConfig+0x90>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <canConfig_filterConfig+0x4e>
  {
    canFilterInit.FilterBank           = 1;
 8002184:	2301      	movs	r3, #1
 8002186:	623b      	str	r3, [r7, #32]
    canFilterInit.SlaveStartFilterBank = 14; // 14 each banks
 8002188:	230e      	movs	r3, #14
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
    canFilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
    fifoIrq                            = CAN_IT_RX_FIFO0_MSG_PENDING;
 8002190:	2302      	movs	r3, #2
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
 8002194:	e00c      	b.n	80021b0 <canConfig_filterConfig+0x68>
  }

  // CAN 2 Filter Configs
  else if(hCan -> Instance == CAN2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <canConfig_filterConfig+0x94>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d107      	bne.n	80021b0 <canConfig_filterConfig+0x68>
  {
    canFilterInit.FilterBank           = 15;
 80021a0:	230f      	movs	r3, #15
 80021a2:	623b      	str	r3, [r7, #32]
    canFilterInit.SlaveStartFilterBank = 14; // 14 each banks
 80021a4:	230e      	movs	r3, #14
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
    canFilterInit.FilterFIFOAssignment = CAN_RX_FIFO1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
    fifoIrq                            = CAN_IT_RX_FIFO1_MSG_PENDING;
 80021ac:	2310      	movs	r3, #16
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if(HAL_CAN_ConfigFilter(hCan, &canFilterInit) != HAL_OK)
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 ff8e 	bl	80030d8 <HAL_CAN_ConfigFilter>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <canConfig_filterConfig+0x7e>
  {
    Error_Handler();
 80021c2:	f7ff fc05 	bl	80019d0 <Error_Handler>
  }

  canConfig_startCan(hCan, fifoIrq);
 80021c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f809 	bl	80021e0 <canConfig_startCan>
}
 80021ce:	bf00      	nop
 80021d0:	3738      	adds	r7, #56	; 0x38
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40006400 	.word	0x40006400
 80021dc:	40006800 	.word	0x40006800

080021e0 <canConfig_startCan>:

static void canConfig_startCan(CAN_HandleTypeDef *hCan, uint32_t fifoIrq)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  if(HAL_CAN_ActivateNotification(hCan, CAN_IT_TX_MAILBOX_EMPTY | fifoIrq) != HAL_OK)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f001 fa7f 	bl	80036f6 <HAL_CAN_ActivateNotification>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <canConfig_startCan+0x22>
  {
    Error_Handler();
 80021fe:	f7ff fbe7 	bl	80019d0 <Error_Handler>
  }
//  Error_Handler();
  if(HAL_CAN_Start(hCan) != HAL_OK)
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f001 f848 	bl	8003298 <HAL_CAN_Start>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <canConfig_startCan+0x32>
  {
    Error_Handler();
 800220e:	f7ff fbdf 	bl	80019d0 <Error_Handler>
  }
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <canRx_isCanOk>:
bool canRx_isCanOk(uint8_t correctMsg);

//----------------
// Check if the message from either CAN3 or CAN4 has been received:
bool canRx_isCanOk(uint8_t correctMsg)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if(gCanReceivedMsg == correctMsg)
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <canRx_isCanOk+0x30>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	79fa      	ldrb	r2, [r7, #7]
 800222c:	429a      	cmp	r2, r3
 800222e:	d104      	bne.n	800223a <canRx_isCanOk+0x1e>
  {
    gCanReceivedMsg = RESET_VALUE;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <canRx_isCanOk+0x30>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    return true;
 8002236:	2301      	movs	r3, #1
 8002238:	e003      	b.n	8002242 <canRx_isCanOk+0x26>
  }
  else
  {
    gCanReceivedMsg = RESET_VALUE;
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <canRx_isCanOk+0x30>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
    return false;
 8002240:	2300      	movs	r3, #0
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	200003d9 	.word	0x200003d9

08002250 <HAL_CAN_RxFifo0MsgPendingCallback>:
// CAN1 reception:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(hcan->Instance == CAN1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d115      	bne.n	800228e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
  {
    CAN_RxHeaderTypeDef RxHeader; // Struct specified
    uint8_t             canFrame[5]; // Received 'hello' message

    // Gets the message
    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, canFrame) != HAL_OK)
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	f107 0214 	add.w	r2, r7, #20
 800226a:	2100      	movs	r1, #0
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f001 f931 	bl	80034d4 <HAL_CAN_GetRxMessage>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
    {
      Error_Handler();
 8002278:	f7ff fbaa 	bl	80019d0 <Error_Handler>
    }

    if(RxHeader.StdId > 0x000 && RxHeader.RTR == 0) // Check the message details
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
    {
      gCanReceivedMsg = canFrame[0];
 8002288:	7b3a      	ldrb	r2, [r7, #12]
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800228c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800228e:	bf00      	nop
 8002290:	3730      	adds	r7, #48	; 0x30
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40006400 	.word	0x40006400
 800229c:	200003d9 	.word	0x200003d9

080022a0 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN2 reception:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if(hcan->Instance == CAN2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d115      	bne.n	80022de <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
  {
    CAN_RxHeaderTypeDef RxHeader;    // Struct specified
    uint8_t             canFrame[5]; // Received 'hello' message

    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, canFrame) != HAL_OK)// gets the message
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	f107 0214 	add.w	r2, r7, #20
 80022ba:	2101      	movs	r1, #1
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f001 f909 	bl	80034d4 <HAL_CAN_GetRxMessage>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
    {
      Error_Handler();
 80022c8:	f7ff fb82 	bl	80019d0 <Error_Handler>
    }

    if(RxHeader.StdId > 0x000 && RxHeader.RTR == 0) // Check the message details
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
    {
      gCanReceivedMsg = canFrame[0];
 80022d8:	7b3a      	ldrb	r2, [r7, #12]
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80022dc:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80022de:	bf00      	nop
 80022e0:	3730      	adds	r7, #48	; 0x30
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40006800 	.word	0x40006800
 80022ec:	200003d9 	.word	0x200003d9

080022f0 <canTx_sendMsg>:
void canTx_sendMsg(uint32_t canId, uint32_t canMsg, CAN_HandleTypeDef *hCan);


//----------------
void canTx_sendMsg(uint32_t canId, uint32_t canMsg, CAN_HandleTypeDef *hCan)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint8_t             messageToSend[1];
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t            TxMailbox;

  TxHeader.DLC     = 1;                 // Length of the message in bytes - 'hello' is 5 bytes
 80022fc:	2301      	movs	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  TxHeader.StdId   = canId;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	617b      	str	r3, [r7, #20]
  TxHeader.IDE     = CAN_ID_STD;        // Standard or extended
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  TxHeader.RTR     = CAN_RTR_DATA;      // Data frame (request frame) or remote frame
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
  messageToSend[0] = canMsg;   // Message That I will Send
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

  // Tiny delay for making the transmission
  HAL_Delay(10);
 8002314:	200a      	movs	r0, #10
 8002316:	f000 fbaf 	bl	8002a78 <HAL_Delay>
  HAL_CAN_AddTxMessage(hCan, &TxHeader, messageToSend, &TxMailbox);
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002322:	f107 0114 	add.w	r1, r7, #20
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fffa 	bl	8003320 <HAL_CAN_AddTxMessage>
}
 800232c:	bf00      	nop
 800232e:	3730      	adds	r7, #48	; 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <C_Init>:
C_Connections_t C_Init(uint8_t *name, C_Connections_t C_Connection);
C1_Connections_t C1_Init(CAN_HandleTypeDef *pCan, uint8_t *name, C1_Connections_t C1_Connection);
test1 C_AdcInit(uint8_t pinNum, test1 C_Adc);

C_Connections_t C_Init(uint8_t *name, C_Connections_t C_Connection)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	4639      	mov	r1, r7
 8002340:	e881 000c 	stmia.w	r1, {r2, r3}
  // CAN1 data:
  if(strcmp((char*)name,CAN1_NAME) == 0)
 8002344:	4917      	ldr	r1, [pc, #92]	; (80023a4 <C_Init+0x70>)
 8002346:	68b8      	ldr	r0, [r7, #8]
 8002348:	f7fd ff6e 	bl	8000228 <strcmp>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <C_Init+0x28>
  {
    C_Connection.uartMsg      = UART_CAN1_MSG;
 8002352:	2301      	movs	r3, #1
 8002354:	713b      	strb	r3, [r7, #4]
    C_Connection.uartMsgError = UART_CAN1_MSG_ERROR;
 8002356:	2311      	movs	r3, #17
 8002358:	717b      	strb	r3, [r7, #5]
 800235a:	e016      	b.n	800238a <C_Init+0x56>
  }
  // CAN2 data:
  else if(strcmp((char*)name,CAN2_NAME) == 0)
 800235c:	4912      	ldr	r1, [pc, #72]	; (80023a8 <C_Init+0x74>)
 800235e:	68b8      	ldr	r0, [r7, #8]
 8002360:	f7fd ff62 	bl	8000228 <strcmp>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <C_Init+0x40>
  {
    C_Connection.uartMsg      = UART_CAN2_MSG;
 800236a:	2302      	movs	r3, #2
 800236c:	713b      	strb	r3, [r7, #4]
    C_Connection.uartMsgError = UART_CAN2_MSG_ERROR;
 800236e:	2322      	movs	r3, #34	; 0x22
 8002370:	717b      	strb	r3, [r7, #5]
 8002372:	e00a      	b.n	800238a <C_Init+0x56>
  }
  // LIN data:
  else if(strcmp((char*)name,LIN_NAME) == 0)
 8002374:	490d      	ldr	r1, [pc, #52]	; (80023ac <C_Init+0x78>)
 8002376:	68b8      	ldr	r0, [r7, #8]
 8002378:	f7fd ff56 	bl	8000228 <strcmp>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <C_Init+0x56>
  {
    C_Connection.uartMsg      = UART_LIN_MSG;
 8002382:	2303      	movs	r3, #3
 8002384:	713b      	strb	r3, [r7, #4]
    C_Connection.uartMsgError = UART_LIN_MSG_ERROR;
 8002386:	2333      	movs	r3, #51	; 0x33
 8002388:	717b      	strb	r3, [r7, #5]
  }
  C_Connection.name = name;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	603b      	str	r3, [r7, #0]
  return C_Connection;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	461a      	mov	r2, r3
 8002392:	463b      	mov	r3, r7
 8002394:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002398:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	0800b318 	.word	0x0800b318
 80023a8:	0800b324 	.word	0x0800b324
 80023ac:	0800b330 	.word	0x0800b330

080023b0 <C1_Init>:

C1_Connections_t C1_Init(CAN_HandleTypeDef *pCan, uint8_t *name, C1_Connections_t C1_Connection)
{
 80023b0:	b082      	sub	sp, #8
 80023b2:	b590      	push	{r4, r7, lr}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  // CAN 3 data:
  if(pCan -> Instance == CAN1)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a15      	ldr	r2, [pc, #84]	; (800241c <C1_Init+0x6c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d106      	bne.n	80023d8 <C1_Init+0x28>
  {
    C1_Connection.canId    = CAN3_ID;
 80023ca:	f240 1301 	movw	r3, #257	; 0x101
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
    C1_Connection.canMsg   = CAN3_MSG;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80023d6:	e00a      	b.n	80023ee <C1_Init+0x3e>
  }
  // CAN4 data:
  else if(pCan -> Instance == CAN2)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a10      	ldr	r2, [pc, #64]	; (8002420 <C1_Init+0x70>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d105      	bne.n	80023ee <C1_Init+0x3e>
  {
    C1_Connection.canId    = CAN4_ID;
 80023e2:	f240 1301 	movw	r3, #257	; 0x101
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
    C1_Connection.canMsg   = CAN4_MSG;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  }
  C1_Connection.name     = name;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  C1_Connection.pCan     = pCan;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
  canConfig_filterConfig(C1_Connection.pCan); // Filter Config for CAN3
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fea5 	bl	8002148 <canConfig_filterConfig>
  return C1_Connection;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	461c      	mov	r4, r3
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002416:	b002      	add	sp, #8
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40006400 	.word	0x40006400
 8002420:	40006800 	.word	0x40006800

08002424 <print_prData>:
void print_adcDataC(uint8_t adcReceivedData[TOTAL_ADC_CONN_C][ADC_DATA_LEN], test1 C_Adc[6], uint8_t connAmount);

// ----------------

void print_prData(char data[100])
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), strlen(data)*2);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fd ff05 	bl	800023c <strlen>
 8002432:	4603      	mov	r3, r0
 8002434:	b29c      	uxth	r4, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fd ff00 	bl	800023c <strlen>
 800243c:	4603      	mov	r3, r0
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4622      	mov	r2, r4
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <print_prData+0x30>)
 8002446:	f003 fc88 	bl	8005d5a <HAL_UART_Transmit>
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	20000350 	.word	0x20000350

08002458 <print_startMenu>:

void print_startMenu(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  print_prData("---------------------\r\n");
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <print_startMenu+0x1c>)
 800245e:	f7ff ffe1 	bl	8002424 <print_prData>
  print_prData("QUAD CAN FILTER TESTER  \r\n\n");
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <print_startMenu+0x20>)
 8002464:	f7ff ffde 	bl	8002424 <print_prData>
  print_prData("Testing... \r\n");
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <print_startMenu+0x24>)
 800246a:	f7ff ffdb 	bl	8002424 <print_prData>
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	0800b338 	.word	0x0800b338
 8002478:	0800b350 	.word	0x0800b350
 800247c:	0800b36c 	.word	0x0800b36c

08002480 <print_endNote>:

void print_endNote(bool bTestPass)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(10);
 800248a:	200a      	movs	r0, #10
 800248c:	f000 faf4 	bl	8002a78 <HAL_Delay>
  print_prData("\r\n\nTEST ");
 8002490:	481a      	ldr	r0, [pc, #104]	; (80024fc <print_endNote+0x7c>)
 8002492:	f7ff ffc7 	bl	8002424 <print_prData>
  if(bTestPass)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d012      	beq.n	80024c2 <print_endNote+0x42>
  {
    print_prData("SUCCESS!");
 800249c:	4818      	ldr	r0, [pc, #96]	; (8002500 <print_endNote+0x80>)
 800249e:	f7ff ffc1 	bl	8002424 <print_prData>
    HAL_GPIO_WritePin(GPIOA,PASS_C1_Pin, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	4817      	ldr	r0, [pc, #92]	; (8002504 <print_endNote+0x84>)
 80024a8:	f002 fa78 	bl	800499c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,FAIL_C1_Pin, 1);
 80024ac:	2201      	movs	r2, #1
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	4814      	ldr	r0, [pc, #80]	; (8002504 <print_endNote+0x84>)
 80024b2:	f002 fa73 	bl	800499c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, 1);
 80024b6:	2201      	movs	r2, #1
 80024b8:	2106      	movs	r1, #6
 80024ba:	4813      	ldr	r0, [pc, #76]	; (8002508 <print_endNote+0x88>)
 80024bc:	f002 fa6e 	bl	800499c <HAL_GPIO_WritePin>
 80024c0:	e011      	b.n	80024e6 <print_endNote+0x66>
  }
  else
  {
    print_prData("FAIL! (CONNECTIONS)");
 80024c2:	4812      	ldr	r0, [pc, #72]	; (800250c <print_endNote+0x8c>)
 80024c4:	f7ff ffae 	bl	8002424 <print_prData>
    HAL_GPIO_WritePin(GPIOA,PASS_C1_Pin, 1);
 80024c8:	2201      	movs	r2, #1
 80024ca:	2140      	movs	r1, #64	; 0x40
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <print_endNote+0x84>)
 80024ce:	f002 fa65 	bl	800499c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,FAIL_C1_Pin, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <print_endNote+0x84>)
 80024d8:	f002 fa60 	bl	800499c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LED1_Pin, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	2102      	movs	r1, #2
 80024e0:	4809      	ldr	r0, [pc, #36]	; (8002508 <print_endNote+0x88>)
 80024e2:	f002 fa5b 	bl	800499c <HAL_GPIO_WritePin>
  }
  HAL_Delay(5);
 80024e6:	2005      	movs	r0, #5
 80024e8:	f000 fac6 	bl	8002a78 <HAL_Delay>
  print_prData("\r\n---------------------\r\n\n");
 80024ec:	4808      	ldr	r0, [pc, #32]	; (8002510 <print_endNote+0x90>)
 80024ee:	f7ff ff99 	bl	8002424 <print_prData>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	0800b37c 	.word	0x0800b37c
 8002500:	0800b388 	.word	0x0800b388
 8002504:	40010800 	.word	0x40010800
 8002508:	40011000 	.word	0x40011000
 800250c:	0800b394 	.word	0x0800b394
 8002510:	0800b3a8 	.word	0x0800b3a8

08002514 <print_connectionStatus>:

void print_connectionStatus(uint8_t connectionNum, uint8_t *name, bool bIsConnectionOk, UART_HandleTypeDef *pUsbUart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	4613      	mov	r3, r2
 8002524:	73bb      	strb	r3, [r7, #14]
   if(connectionNum == 0)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <print_connectionStatus+0x20>
   {
     print_prData("\r\n-- C CONNECTIONS --\r\n");
 800252c:	4811      	ldr	r0, [pc, #68]	; (8002574 <print_connectionStatus+0x60>)
 800252e:	f7ff ff79 	bl	8002424 <print_prData>
 8002532:	e005      	b.n	8002540 <print_connectionStatus+0x2c>
   }
   else if(connectionNum == 3)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d102      	bne.n	8002540 <print_connectionStatus+0x2c>
   {
     print_prData("\n-- C1 CONNECTIONS --\r\n");
 800253a:	480f      	ldr	r0, [pc, #60]	; (8002578 <print_connectionStatus+0x64>)
 800253c:	f7ff ff72 	bl	8002424 <print_prData>
   }
   print_prData((char*)name);
 8002540:	68b8      	ldr	r0, [r7, #8]
 8002542:	f7ff ff6f 	bl	8002424 <print_prData>
   HAL_Delay(10);
 8002546:	200a      	movs	r0, #10
 8002548:	f000 fa96 	bl	8002a78 <HAL_Delay>
   print_prData(" Status: ");
 800254c:	480b      	ldr	r0, [pc, #44]	; (800257c <print_connectionStatus+0x68>)
 800254e:	f7ff ff69 	bl	8002424 <print_prData>
   // Depending of the status of connection assign a string, which tells if the connection is good:
   if(bIsConnectionOk)
 8002552:	7bbb      	ldrb	r3, [r7, #14]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <print_connectionStatus+0x4c>
   {
     print_prData("OK");
 8002558:	4809      	ldr	r0, [pc, #36]	; (8002580 <print_connectionStatus+0x6c>)
 800255a:	f7ff ff63 	bl	8002424 <print_prData>
 800255e:	e002      	b.n	8002566 <print_connectionStatus+0x52>
   }
   else
   {
     print_prData("ERROR");
 8002560:	4808      	ldr	r0, [pc, #32]	; (8002584 <print_connectionStatus+0x70>)
 8002562:	f7ff ff5f 	bl	8002424 <print_prData>
   }
   print_prData("\r\n");
 8002566:	4808      	ldr	r0, [pc, #32]	; (8002588 <print_connectionStatus+0x74>)
 8002568:	f7ff ff5c 	bl	8002424 <print_prData>
}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	0800b3c4 	.word	0x0800b3c4
 8002578:	0800b3dc 	.word	0x0800b3dc
 800257c:	0800b3f4 	.word	0x0800b3f4
 8002580:	0800b400 	.word	0x0800b400
 8002584:	0800b404 	.word	0x0800b404
 8002588:	0800b40c 	.word	0x0800b40c

0800258c <print_adcDataC>:

void print_adcDataC(uint8_t adcReceivedData[TOTAL_ADC_CONN_C][ADC_DATA_LEN], test1 C_Adc[6], uint8_t connAmount)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	71fb      	strb	r3, [r7, #7]
    bool    bConStatus = true;
 800259a:	2301      	movs	r3, #1
 800259c:	77fb      	strb	r3, [r7, #31]
    uint8_t lastTestedConn;

    if(connAmount == 3)
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d102      	bne.n	80025aa <print_adcDataC+0x1e>
    {
      lastTestedConn = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	77bb      	strb	r3, [r7, #30]
 80025a8:	e004      	b.n	80025b4 <print_adcDataC+0x28>
    }
    else if(connAmount == 2)
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d101      	bne.n	80025b4 <print_adcDataC+0x28>
    {
      lastTestedConn = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77bb      	strb	r3, [r7, #30]
    }

    for(int adcConnC = lastTestedConn; adcConnC<connAmount+lastTestedConn; adcConnC++) // Printing the adc currents:
 80025b4:	7fbb      	ldrb	r3, [r7, #30]
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e0fb      	b.n	80027b2 <print_adcDataC+0x226>
    {
      memset(C_Adc[adcConnC].valueStr, 0, sizeof(C_Adc[adcConnC].valueStr)); // Clear the array using memset
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	221a      	movs	r2, #26
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4413      	add	r3, r2
 80025c6:	330f      	adds	r3, #15
 80025c8:	220a      	movs	r2, #10
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f004 fa3d 	bl	8006a4c <memset>

      for(int charact=0; charact<ADC_DATA_LEN; charact++) // characters are listed using thois for loop
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e019      	b.n	800260c <print_adcDataC+0x80>
      {
        C_Adc[adcConnC].valueStr[charact] = (uint8_t)adcReceivedData[adcConnC-lastTestedConn][charact]; // Add new characters from an interrupt global variable
 80025d8:	7fbb      	ldrb	r3, [r7, #30]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	18d1      	adds	r1, r2, r3
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	221a      	movs	r2, #26
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	441a      	add	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	440b      	add	r3, r1
 80025fa:	7819      	ldrb	r1, [r3, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	330f      	adds	r3, #15
 8002602:	460a      	mov	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]
      for(int charact=0; charact<ADC_DATA_LEN; charact++) // characters are listed using thois for loop
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b06      	cmp	r3, #6
 8002610:	dde2      	ble.n	80025d8 <print_adcDataC+0x4c>
      }

      if(C_Adc[adcConnC].valueStr[0] == 'F')
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	221a      	movs	r2, #26
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4413      	add	r3, r2
 800261e:	7bdb      	ldrb	r3, [r3, #15]
 8002620:	2b46      	cmp	r3, #70	; 0x46
 8002622:	d101      	bne.n	8002628 <print_adcDataC+0x9c>
      {
        bConStatus = false;
 8002624:	2300      	movs	r3, #0
 8002626:	77fb      	strb	r3, [r7, #31]
      }

      for(int charact=1; charact<ADC_DATA_LEN; charact++) // characters are listed using thois for loop
 8002628:	2301      	movs	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e019      	b.n	8002662 <print_adcDataC+0xd6>
      {
        C_Adc[adcConnC].valueStr[charact-1] = (uint8_t)adcReceivedData[adcConnC-lastTestedConn][charact]; // Add new characters from an interrupt global variable
 800262e:	7fbb      	ldrb	r3, [r7, #30]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	18d0      	adds	r0, r2, r3
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	221a      	movs	r2, #26
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	441a      	add	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	3b01      	subs	r3, #1
 8002650:	6939      	ldr	r1, [r7, #16]
 8002652:	4401      	add	r1, r0
 8002654:	7809      	ldrb	r1, [r1, #0]
 8002656:	4413      	add	r3, r2
 8002658:	460a      	mov	r2, r1
 800265a:	73da      	strb	r2, [r3, #15]
      for(int charact=1; charact<ADC_DATA_LEN; charact++) // characters are listed using thois for loop
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	3301      	adds	r3, #1
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b06      	cmp	r3, #6
 8002666:	dde2      	ble.n	800262e <print_adcDataC+0xa2>
      }

      // Prints the explanation for each voltage data sent:
      switch(adcConnC)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d876      	bhi.n	800275c <print_adcDataC+0x1d0>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <print_adcDataC+0xe8>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002689 	.word	0x08002689
 8002678:	080026b7 	.word	0x080026b7
 800267c:	080026d9 	.word	0x080026d9
 8002680:	08002707 	.word	0x08002707
 8002684:	08002735 	.word	0x08002735
      {
         case 0:
           HAL_Delay(5);
 8002688:	2005      	movs	r0, #5
 800268a:	f000 f9f5 	bl	8002a78 <HAL_Delay>
           print_prData("\r\n-- CURRENTS --\r\n");
 800268e:	484f      	ldr	r0, [pc, #316]	; (80027cc <print_adcDataC+0x240>)
 8002690:	f7ff fec8 	bl	8002424 <print_prData>
           print_prData("1. Current Stand-by: ");
 8002694:	484e      	ldr	r0, [pc, #312]	; (80027d0 <print_adcDataC+0x244>)
 8002696:	f7ff fec5 	bl	8002424 <print_prData>
           print_prData((char*)C_Adc[adcConnC].valueStr);
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	221a      	movs	r2, #26
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4413      	add	r3, r2
 80026a6:	330f      	adds	r3, #15
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff febb 	bl	8002424 <print_prData>
           print_prData(" A");
 80026ae:	4849      	ldr	r0, [pc, #292]	; (80027d4 <print_adcDataC+0x248>)
 80026b0:	f7ff feb8 	bl	8002424 <print_prData>
           break;
 80026b4:	e052      	b.n	800275c <print_adcDataC+0x1d0>
         case 1:
           print_prData("2. Current Load:     ");
 80026b6:	4848      	ldr	r0, [pc, #288]	; (80027d8 <print_adcDataC+0x24c>)
 80026b8:	f7ff feb4 	bl	8002424 <print_prData>
           print_prData((char*)C_Adc[adcConnC].valueStr);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	221a      	movs	r2, #26
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	4413      	add	r3, r2
 80026c8:	330f      	adds	r3, #15
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff feaa 	bl	8002424 <print_prData>
           print_prData(" A");
 80026d0:	4840      	ldr	r0, [pc, #256]	; (80027d4 <print_adcDataC+0x248>)
 80026d2:	f7ff fea7 	bl	8002424 <print_prData>
           break;
 80026d6:	e041      	b.n	800275c <print_adcDataC+0x1d0>
         case 2:
           HAL_Delay(5);
 80026d8:	2005      	movs	r0, #5
 80026da:	f000 f9cd 	bl	8002a78 <HAL_Delay>
           print_prData("\r\n-- CURRENTS --\r\n");
 80026de:	483b      	ldr	r0, [pc, #236]	; (80027cc <print_adcDataC+0x240>)
 80026e0:	f7ff fea0 	bl	8002424 <print_prData>
           print_prData("1. Current Load:     ");
 80026e4:	483d      	ldr	r0, [pc, #244]	; (80027dc <print_adcDataC+0x250>)
 80026e6:	f7ff fe9d 	bl	8002424 <print_prData>
           print_prData((char*)C_Adc[adcConnC].valueStr);
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	221a      	movs	r2, #26
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	4413      	add	r3, r2
 80026f6:	330f      	adds	r3, #15
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fe93 	bl	8002424 <print_prData>
           print_prData(" A");
 80026fe:	4835      	ldr	r0, [pc, #212]	; (80027d4 <print_adcDataC+0x248>)
 8002700:	f7ff fe90 	bl	8002424 <print_prData>
           break;
 8002704:	e02a      	b.n	800275c <print_adcDataC+0x1d0>
         case 3:
           HAL_Delay(5);
 8002706:	2005      	movs	r0, #5
 8002708:	f000 f9b6 	bl	8002a78 <HAL_Delay>
           print_prData("\r\n-- VOLTAGES--\r\n");
 800270c:	4834      	ldr	r0, [pc, #208]	; (80027e0 <print_adcDataC+0x254>)
 800270e:	f7ff fe89 	bl	8002424 <print_prData>
           print_prData("2. Drivetrain 23:    ");
 8002712:	4834      	ldr	r0, [pc, #208]	; (80027e4 <print_adcDataC+0x258>)
 8002714:	f7ff fe86 	bl	8002424 <print_prData>
           print_prData((char*)C_Adc[adcConnC].valueStr);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	221a      	movs	r2, #26
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	4413      	add	r3, r2
 8002724:	330f      	adds	r3, #15
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fe7c 	bl	8002424 <print_prData>
           print_prData(" V");
 800272c:	482e      	ldr	r0, [pc, #184]	; (80027e8 <print_adcDataC+0x25c>)
 800272e:	f7ff fe79 	bl	8002424 <print_prData>
           break;
 8002732:	e013      	b.n	800275c <print_adcDataC+0x1d0>
         case 4:
           HAL_Delay(5);
 8002734:	2005      	movs	r0, #5
 8002736:	f000 f99f 	bl	8002a78 <HAL_Delay>
           print_prData("3. Drivetrain 14:    ");
 800273a:	482c      	ldr	r0, [pc, #176]	; (80027ec <print_adcDataC+0x260>)
 800273c:	f7ff fe72 	bl	8002424 <print_prData>
           print_prData((char*)C_Adc[adcConnC].valueStr);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	221a      	movs	r2, #26
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	4413      	add	r3, r2
 800274c:	330f      	adds	r3, #15
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe68 	bl	8002424 <print_prData>
           print_prData(" V");
 8002754:	4824      	ldr	r0, [pc, #144]	; (80027e8 <print_adcDataC+0x25c>)
 8002756:	f7ff fe65 	bl	8002424 <print_prData>
          break;
 800275a:	bf00      	nop
      }

      if(!bConStatus)
 800275c:	7ffb      	ldrb	r3, [r7, #31]
 800275e:	f083 0301 	eor.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01e      	beq.n	80027a6 <print_adcDataC+0x21a>
      {
        HAL_GPIO_WritePin(GPIOA,PASS_C1_Pin , 1);
 8002768:	2201      	movs	r2, #1
 800276a:	2140      	movs	r1, #64	; 0x40
 800276c:	4820      	ldr	r0, [pc, #128]	; (80027f0 <print_adcDataC+0x264>)
 800276e:	f002 f915 	bl	800499c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA,FAIL_C1_Pin , 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	481e      	ldr	r0, [pc, #120]	; (80027f0 <print_adcDataC+0x264>)
 8002778:	f002 f910 	bl	800499c <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800277c:	200a      	movs	r0, #10
 800277e:	f000 f97b 	bl	8002a78 <HAL_Delay>
        print_prData("  <- FAIL!");
 8002782:	481c      	ldr	r0, [pc, #112]	; (80027f4 <print_adcDataC+0x268>)
 8002784:	f7ff fe4e 	bl	8002424 <print_prData>
        HAL_Delay(20);
 8002788:	2014      	movs	r0, #20
 800278a:	f000 f975 	bl	8002a78 <HAL_Delay>
        print_prData("\r\n\nTEST ABORTED!");
 800278e:	481a      	ldr	r0, [pc, #104]	; (80027f8 <print_adcDataC+0x26c>)
 8002790:	f7ff fe48 	bl	8002424 <print_prData>
        print_prData("\r\n---------------------\r\n\n");
 8002794:	4819      	ldr	r0, [pc, #100]	; (80027fc <print_adcDataC+0x270>)
 8002796:	f7ff fe45 	bl	8002424 <print_prData>
        turnOn = 2;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <print_adcDataC+0x274>)
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]
        Error_Handler();
 80027a0:	f7ff f916 	bl	80019d0 <Error_Handler>
 80027a4:	e002      	b.n	80027ac <print_adcDataC+0x220>
      }
      else
      {
        print_prData("  OK!\r\n");
 80027a6:	4817      	ldr	r0, [pc, #92]	; (8002804 <print_adcDataC+0x278>)
 80027a8:	f7ff fe3c 	bl	8002424 <print_prData>
    for(int adcConnC = lastTestedConn; adcConnC<connAmount+lastTestedConn; adcConnC++) // Printing the adc currents:
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	3301      	adds	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	79fa      	ldrb	r2, [r7, #7]
 80027b4:	7fbb      	ldrb	r3, [r7, #30]
 80027b6:	4413      	add	r3, r2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	f6ff aefd 	blt.w	80025ba <print_adcDataC+0x2e>
      }
    }
  }
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	0800b410 	.word	0x0800b410
 80027d0:	0800b424 	.word	0x0800b424
 80027d4:	0800b43c 	.word	0x0800b43c
 80027d8:	0800b440 	.word	0x0800b440
 80027dc:	0800b458 	.word	0x0800b458
 80027e0:	0800b470 	.word	0x0800b470
 80027e4:	0800b484 	.word	0x0800b484
 80027e8:	0800b49c 	.word	0x0800b49c
 80027ec:	0800b4a0 	.word	0x0800b4a0
 80027f0:	40010800 	.word	0x40010800
 80027f4:	0800b4b8 	.word	0x0800b4b8
 80027f8:	0800b4c4 	.word	0x0800b4c4
 80027fc:	0800b3a8 	.word	0x0800b3a8
 8002800:	200003f3 	.word	0x200003f3
 8002804:	0800b4d8 	.word	0x0800b4d8

08002808 <HAL_UART_RxCpltCallback>:
  uint8_t digitCount = 0;
  uint8_t numberCount = 0;


  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <HAL_UART_RxCpltCallback+0xcc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d158      	bne.n	80028cc <HAL_UART_RxCpltCallback+0xc4>
    {
     if(!gStartDmaUart)
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_UART_RxCpltCallback+0xd0>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	f083 0301 	eor.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d051      	beq.n	80028cc <HAL_UART_RxCpltCallback+0xc4>
     {
       if(digitCount == ADC_DATA_LEN)
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_UART_RxCpltCallback+0xd4>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b07      	cmp	r3, #7
 800282e:	d132      	bne.n	8002896 <HAL_UART_RxCpltCallback+0x8e>
       {
         if(gAdcRxDataUart[numberCount][0] == 'F')
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	4a2b      	ldr	r2, [pc, #172]	; (80028e4 <HAL_UART_RxCpltCallback+0xdc>)
 8002838:	460b      	mov	r3, r1
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a5b      	subs	r3, r3, r1
 800283e:	4413      	add	r3, r2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b46      	cmp	r3, #70	; 0x46
 8002844:	d103      	bne.n	800284e <HAL_UART_RxCpltCallback+0x46>
         {
           gAllAdcReceived = true;
 8002846:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_UART_RxCpltCallback+0xe0>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e039      	b.n	80028c2 <HAL_UART_RxCpltCallback+0xba>
         }
         else if(gAdcRxDataUart[numberCount][0] == 'P')
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_UART_RxCpltCallback+0xdc>)
 8002856:	460b      	mov	r3, r1
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	1a5b      	subs	r3, r3, r1
 800285c:	4413      	add	r3, r2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b50      	cmp	r3, #80	; 0x50
 8002862:	d12e      	bne.n	80028c2 <HAL_UART_RxCpltCallback+0xba>
         {
           numberCount++;
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_UART_RxCpltCallback+0xd8>)
 800286e:	701a      	strb	r2, [r3, #0]
           digitCount = 0;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_UART_RxCpltCallback+0xd4>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
           if(numberCount == gChannelsTested)
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_UART_RxCpltCallback+0xe4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d11f      	bne.n	80028c2 <HAL_UART_RxCpltCallback+0xba>
           {
             gAllAdcReceived = true;
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_UART_RxCpltCallback+0xe0>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
             gUartByte = 0;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_UART_RxCpltCallback+0xe8>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
             numberCount = 0;
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e015      	b.n	80028c2 <HAL_UART_RxCpltCallback+0xba>
           }
         }
       }
       else
       {
         gAdcRxDataUart[numberCount][digitCount] = gUartByte;
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_UART_RxCpltCallback+0xd4>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461c      	mov	r4, r3
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_UART_RxCpltCallback+0xe8>)
 80028a4:	7818      	ldrb	r0, [r3, #0]
 80028a6:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <HAL_UART_RxCpltCallback+0xdc>)
 80028a8:	460b      	mov	r3, r1
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a5b      	subs	r3, r3, r1
 80028ae:	4413      	add	r3, r2
 80028b0:	4423      	add	r3, r4
 80028b2:	4602      	mov	r2, r0
 80028b4:	701a      	strb	r2, [r3, #0]
         digitCount++;
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_UART_RxCpltCallback+0xd4>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_UART_RxCpltCallback+0xd4>)
 80028c0:	701a      	strb	r2, [r3, #0]
       }
       HAL_UART_Receive_IT(huart,&gUartByte, 1);
 80028c2:	2201      	movs	r2, #1
 80028c4:	490a      	ldr	r1, [pc, #40]	; (80028f0 <HAL_UART_RxCpltCallback+0xe8>)
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f003 fad9 	bl	8005e7e <HAL_UART_Receive_IT>
     }
   }
  }
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}
 80028d4:	40013800 	.word	0x40013800
 80028d8:	200003f1 	.word	0x200003f1
 80028dc:	200003fc 	.word	0x200003fc
 80028e0:	200003fd 	.word	0x200003fd
 80028e4:	200003dc 	.word	0x200003dc
 80028e8:	200003f2 	.word	0x200003f2
 80028ec:	200003da 	.word	0x200003da
 80028f0:	200003d8 	.word	0x200003d8

080028f4 <uartRx_receiveAdcDataC>:

  void uartRx_receiveAdcDataC(UART_HandleTypeDef *hUart1)
  {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, 1);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2106      	movs	r1, #6
 8002900:	480b      	ldr	r0, [pc, #44]	; (8002930 <uartRx_receiveAdcDataC+0x3c>)
 8002902:	f002 f84b 	bl	800499c <HAL_GPIO_WritePin>
    while(!gAllAdcReceived)
 8002906:	e004      	b.n	8002912 <uartRx_receiveAdcDataC+0x1e>
    {
      HAL_UART_Receive_IT(hUart1,&gUartByte, 1);
 8002908:	2201      	movs	r2, #1
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <uartRx_receiveAdcDataC+0x40>)
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f003 fab6 	bl	8005e7e <HAL_UART_Receive_IT>
    while(!gAllAdcReceived)
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <uartRx_receiveAdcDataC+0x44>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f083 0301 	eor.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f3      	bne.n	8002908 <uartRx_receiveAdcDataC+0x14>
    }
    gAllAdcReceived = false;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <uartRx_receiveAdcDataC+0x44>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
  }
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40011000 	.word	0x40011000
 8002934:	200003d8 	.word	0x200003d8
 8002938:	200003f2 	.word	0x200003f2

0800293c <uartRx_isConnectionOk>:
  }
}

// Receives the status of a requested message:
bool uartRx_isConnectionOk(uint8_t msgUart, uint8_t msgErrorUart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	460a      	mov	r2, r1
 8002946:	71fb      	strb	r3, [r7, #7]
 8002948:	4613      	mov	r3, r2
 800294a:	71bb      	strb	r3, [r7, #6]
  bool bWorking;
  while(1)
  {
    HAL_UART_Receive_DMA(&huart1,&gUartByte, 1);
 800294c:	2201      	movs	r2, #1
 800294e:	490c      	ldr	r1, [pc, #48]	; (8002980 <uartRx_isConnectionOk+0x44>)
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <uartRx_isConnectionOk+0x48>)
 8002952:	f003 fac4 	bl	8005ede <HAL_UART_Receive_DMA>
    if(gUartByte == msgUart)
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <uartRx_isConnectionOk+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	79fa      	ldrb	r2, [r7, #7]
 800295c:	429a      	cmp	r2, r3
 800295e:	d102      	bne.n	8002966 <uartRx_isConnectionOk+0x2a>
    {
      bWorking = true;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e006      	b.n	8002974 <uartRx_isConnectionOk+0x38>
    }
    else if(gUartByte == msgErrorUart)
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <uartRx_isConnectionOk+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	79ba      	ldrb	r2, [r7, #6]
 800296c:	429a      	cmp	r2, r3
 800296e:	d1ed      	bne.n	800294c <uartRx_isConnectionOk+0x10>
    {
      bWorking = false;
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]
      break;
    }
  }
  return bWorking;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200003d8 	.word	0x200003d8
 8002984:	2000030c 	.word	0x2000030c

08002988 <Reset_Handler>:
  adds r4, r0, r3
  cmp r4, r1
  bcc CopyDataInit
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <LoopFillZerobss+0x14>)
  ldr r4, =_ebss
 800298a:	4c08      	ldr	r4, [pc, #32]	; (80029ac <LoopFillZerobss+0x18>)
  movs r3, #0
 800298c:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298e:	e001      	b.n	8002994 <LoopFillZerobss>

08002990 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002990:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002992:	3204      	adds	r2, #4

08002994 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002994:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002996:	d3fb      	bcc.n	8002990 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002998:	f7ff fbd0 	bl	800213c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800299c:	f004 f832 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029a0:	f7fe fb68 	bl	8001074 <main>
  bx lr
 80029a4:	4770      	bx	lr
 80029a6:	0000      	.short	0x0000
  ldr r2, =_sbss
 80029a8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80029ac:	20000414 	.word	0x20000414

080029b0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b0:	e7fe      	b.n	80029b0 <ADC1_2_IRQHandler>
	...

080029b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_Init+0x28>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a07      	ldr	r2, [pc, #28]	; (80029dc <HAL_Init+0x28>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c4:	2003      	movs	r0, #3
 80029c6:	f001 f9a1 	bl	8003d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ca:	200f      	movs	r0, #15
 80029cc:	f000 f808 	bl	80029e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d0:	f7ff f80e 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000

080029e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_InitTick+0x54>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_InitTick+0x58>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4619      	mov	r1, r3
 80029f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f9b9 	bl	8003d76 <HAL_SYSTICK_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00e      	b.n	8002a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	d80a      	bhi.n	8002a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a14:	2200      	movs	r2, #0
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f001 f981 	bl	8003d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a20:	4a06      	ldr	r2, [pc, #24]	; (8002a3c <HAL_InitTick+0x5c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_IncTick+0x1c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_IncTick+0x20>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a03      	ldr	r2, [pc, #12]	; (8002a60 <HAL_IncTick+0x20>)
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	20000400 	.word	0x20000400

08002a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <HAL_GetTick+0x10>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000400 	.word	0x20000400

08002a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a80:	f7ff fff0 	bl	8002a64 <HAL_GetTick>
 8002a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d005      	beq.n	8002a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_Delay+0x44>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9e:	bf00      	nop
 8002aa0:	f7ff ffe0 	bl	8002a64 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d8f7      	bhi.n	8002aa0 <HAL_Delay+0x28>
  {
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000008 	.word	0x20000008

08002ac0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0be      	b.n	8002c60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe ff98 	bl	8001a34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f9ab 	bl	8002e60 <ADC_ConversionStop_Disable>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 8099 	bne.w	8002c4e <HAL_ADC_Init+0x18e>
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 8095 	bne.w	8002c4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b2c:	f023 0302 	bic.w	r3, r3, #2
 8002b30:	f043 0202 	orr.w	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7b1b      	ldrb	r3, [r3, #12]
 8002b46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	d003      	beq.n	8002b62 <HAL_ADC_Init+0xa2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_ADC_Init+0xa8>
 8002b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b66:	e000      	b.n	8002b6a <HAL_ADC_Init+0xaa>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7d1b      	ldrb	r3, [r3, #20]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d119      	bne.n	8002bac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7b1b      	ldrb	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	035a      	lsls	r2, r3, #13
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	e00b      	b.n	8002bac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_ADC_Init+0x1a8>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bdc:	d003      	beq.n	8002be6 <HAL_ADC_Init+0x126>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d104      	bne.n	8002bf0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	051b      	lsls	r3, r3, #20
 8002bee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_ADC_Init+0x1ac>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c2a:	e018      	b.n	8002c5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f023 0312 	bic.w	r3, r3, #18
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c4c:	e007      	b.n	8002c5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	f043 0210 	orr.w	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	ffe1f7fd 	.word	0xffe1f7fd
 8002c6c:	ff1f0efe 	.word	0xff1f0efe

08002c70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x20>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e0dc      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x1da>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d81c      	bhi.n	8002cda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3b05      	subs	r3, #5
 8002cb2:	221f      	movs	r2, #31
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4019      	ands	r1, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b05      	subs	r3, #5
 8002ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd8:	e03c      	b.n	8002d54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d81c      	bhi.n	8002d1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3b23      	subs	r3, #35	; 0x23
 8002cf4:	221f      	movs	r2, #31
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	4019      	ands	r1, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b23      	subs	r3, #35	; 0x23
 8002d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1a:	e01b      	b.n	8002d54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b41      	subs	r3, #65	; 0x41
 8002d2e:	221f      	movs	r2, #31
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4019      	ands	r1, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	3b41      	subs	r3, #65	; 0x41
 8002d48:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	d91c      	bls.n	8002d96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b1e      	subs	r3, #30
 8002d6e:	2207      	movs	r2, #7
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4019      	ands	r1, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6898      	ldr	r0, [r3, #8]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	3b1e      	subs	r3, #30
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	e019      	b.n	8002dca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6919      	ldr	r1, [r3, #16]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	2207      	movs	r2, #7
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	4019      	ands	r1, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6898      	ldr	r0, [r3, #8]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d003      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dd6:	2b11      	cmp	r3, #17
 8002dd8:	d132      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <HAL_ADC_ConfigChannel+0x1e4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d125      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d126      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d11a      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <HAL_ADC_ConfigChannel+0x1ec>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	0c9a      	lsrs	r2, r3, #18
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e20:	e002      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f9      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x1b2>
 8002e2e:	e007      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	40012400 	.word	0x40012400
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	431bde83 	.word	0x431bde83

08002e60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d12e      	bne.n	8002ed8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e8a:	f7ff fdeb 	bl	8002a64 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e90:	e01b      	b.n	8002eca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e92:	f7ff fde7 	bl	8002a64 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d914      	bls.n	8002eca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10d      	bne.n	8002eca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f043 0210 	orr.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e007      	b.n	8002eda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d0dc      	beq.n	8002e92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0ed      	b.n	80030d0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe fdd3 	bl	8001aac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f16:	f7ff fda5 	bl	8002a64 <HAL_GetTick>
 8002f1a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f1c:	e012      	b.n	8002f44 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f1e:	f7ff fda1 	bl	8002a64 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	d90b      	bls.n	8002f44 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0c5      	b.n	80030d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0e5      	beq.n	8002f1e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0202 	bic.w	r2, r2, #2
 8002f60:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f62:	f7ff fd7f 	bl	8002a64 <HAL_GetTick>
 8002f66:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f68:	e012      	b.n	8002f90 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f6a:	f7ff fd7b 	bl	8002a64 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b0a      	cmp	r3, #10
 8002f76:	d90b      	bls.n	8002f90 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2205      	movs	r2, #5
 8002f88:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e09f      	b.n	80030d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e5      	bne.n	8002f6a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7e1b      	ldrb	r3, [r3, #24]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d108      	bne.n	8002fb8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e007      	b.n	8002fc8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7e5b      	ldrb	r3, [r3, #25]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d108      	bne.n	8002fe2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e007      	b.n	8002ff2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7e9b      	ldrb	r3, [r3, #26]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d108      	bne.n	800300c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e007      	b.n	800301c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0220 	bic.w	r2, r2, #32
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7edb      	ldrb	r3, [r3, #27]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d108      	bne.n	8003036 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0210 	bic.w	r2, r2, #16
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e007      	b.n	8003046 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0210 	orr.w	r2, r2, #16
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7f1b      	ldrb	r3, [r3, #28]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d108      	bne.n	8003060 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0208 	orr.w	r2, r2, #8
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e007      	b.n	8003070 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0208 	bic.w	r2, r2, #8
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7f5b      	ldrb	r3, [r3, #29]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0204 	orr.w	r2, r2, #4
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e007      	b.n	800309a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0204 	bic.w	r2, r2, #4
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	ea42 0103 	orr.w	r1, r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	1e5a      	subs	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d003      	beq.n	80030fe <HAL_CAN_ConfigFilter+0x26>
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	f040 80be 	bne.w	800327a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_CAN_ConfigFilter+0x1bc>)
 8003100:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003118:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	431a      	orrs	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2201      	movs	r2, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	401a      	ands	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d123      	bne.n	80031a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003182:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3248      	adds	r2, #72	; 0x48
 8003188:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800319c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	3348      	adds	r3, #72	; 0x48
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d122      	bne.n	80031f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3248      	adds	r2, #72	; 0x48
 80031d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ec:	6979      	ldr	r1, [r7, #20]
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	401a      	ands	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003210:	e007      	b.n	8003222 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	431a      	orrs	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800323c:	e007      	b.n	800324e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	431a      	orrs	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	431a      	orrs	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800326c:	f023 0201 	bic.w	r2, r3, #1
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e006      	b.n	8003288 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
  }
}
 8003288:	4618      	mov	r0, r3
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40006400 	.word	0x40006400

08003298 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d12e      	bne.n	800330a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032c4:	f7ff fbce 	bl	8002a64 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032ca:	e012      	b.n	80032f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032cc:	f7ff fbca 	bl	8002a64 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b0a      	cmp	r3, #10
 80032d8:	d90b      	bls.n	80032f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2205      	movs	r2, #5
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e012      	b.n	8003318 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e5      	bne.n	80032cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	e006      	b.n	8003318 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	; 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003334:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d003      	beq.n	800334c <HAL_CAN_AddTxMessage+0x2c>
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	2b02      	cmp	r3, #2
 8003348:	f040 80b8 	bne.w	80034bc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a0 	beq.w	80034ac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	0e1b      	lsrs	r3, r3, #24
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d907      	bls.n	800338c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e09e      	b.n	80034ca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800338c:	2201      	movs	r2, #1
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	409a      	lsls	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	6809      	ldr	r1, [r1, #0]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3318      	adds	r3, #24
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	440b      	add	r3, r1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e00f      	b.n	80033da <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033c4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ca:	68f9      	ldr	r1, [r7, #12]
 80033cc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033ce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	3318      	adds	r3, #24
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	440b      	add	r3, r1
 80033d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3318      	adds	r3, #24
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	440b      	add	r3, r1
 80033ea:	3304      	adds	r3, #4
 80033ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	7d1b      	ldrb	r3, [r3, #20]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d111      	bne.n	800341a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3318      	adds	r3, #24
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	6811      	ldr	r1, [r2, #0]
 800340a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3318      	adds	r3, #24
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	440b      	add	r3, r1
 8003416:	3304      	adds	r3, #4
 8003418:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3307      	adds	r3, #7
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	061a      	lsls	r2, r3, #24
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3306      	adds	r3, #6
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3305      	adds	r3, #5
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	4313      	orrs	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	3204      	adds	r2, #4
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	4610      	mov	r0, r2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	6811      	ldr	r1, [r2, #0]
 8003442:	ea43 0200 	orr.w	r2, r3, r0
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	440b      	add	r3, r1
 800344c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003450:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3303      	adds	r3, #3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	061a      	lsls	r2, r3, #24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3302      	adds	r3, #2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3301      	adds	r3, #1
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	4313      	orrs	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	7812      	ldrb	r2, [r2, #0]
 8003472:	4610      	mov	r0, r2
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	6811      	ldr	r1, [r2, #0]
 8003478:	ea43 0200 	orr.w	r2, r3, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	440b      	add	r3, r1
 8003482:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003486:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3318      	adds	r3, #24
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	4413      	add	r3, r2
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	6811      	ldr	r1, [r2, #0]
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3318      	adds	r3, #24
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	440b      	add	r3, r1
 80034a6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e00e      	b.n	80034ca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e006      	b.n	80034ca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3724      	adds	r7, #36	; 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d003      	beq.n	80034f8 <HAL_CAN_GetRxMessage+0x24>
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	f040 80f3 	bne.w	80036de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10e      	bne.n	800351c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d116      	bne.n	800353a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0e7      	b.n	80036ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0d8      	b.n	80036ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	331b      	adds	r3, #27
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4413      	add	r3, r2
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0204 	and.w	r2, r3, #4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10c      	bne.n	8003572 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	331b      	adds	r3, #27
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0d5b      	lsrs	r3, r3, #21
 8003568:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e00b      	b.n	800358a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	331b      	adds	r3, #27
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	08db      	lsrs	r3, r3, #3
 8003582:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	331b      	adds	r3, #27
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	4413      	add	r3, r2
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0202 	and.w	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	331b      	adds	r3, #27
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	331b      	adds	r3, #27
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	331b      	adds	r3, #27
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4413      	add	r3, r2
 8003608:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0a1a      	lsrs	r2, r3, #8
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4413      	add	r3, r2
 8003622:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0c1a      	lsrs	r2, r3, #16
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	3302      	adds	r3, #2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	0e1a      	lsrs	r2, r3, #24
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	3303      	adds	r3, #3
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	4413      	add	r3, r2
 8003656:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	3304      	adds	r3, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	4413      	add	r3, r2
 800366e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0a1a      	lsrs	r2, r3, #8
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	3305      	adds	r3, #5
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4413      	add	r3, r2
 8003688:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0c1a      	lsrs	r2, r3, #16
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	3306      	adds	r3, #6
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e1a      	lsrs	r2, r3, #24
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	3307      	adds	r3, #7
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0220 	orr.w	r2, r2, #32
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e007      	b.n	80036da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0220 	orr.w	r2, r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e006      	b.n	80036ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003706:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d002      	beq.n	8003714 <HAL_CAN_ActivateNotification+0x1e>
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d109      	bne.n	8003728 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6959      	ldr	r1, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e006      	b.n	8003736 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d07c      	beq.n	8003880 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2201      	movs	r2, #1
 8003796:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f983 	bl	8003aae <HAL_CAN_TxMailbox0CompleteCallback>
 80037a8:	e016      	b.n	80037d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e00c      	b.n	80037d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	e002      	b.n	80037d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f986 	bl	8003ae4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d024      	beq.n	800382c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f962 	bl	8003ac0 <HAL_CAN_TxMailbox1CompleteCallback>
 80037fc:	e016      	b.n	800382c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	e00c      	b.n	800382c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	e002      	b.n	800382c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f965 	bl	8003af6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d024      	beq.n	8003880 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800383e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f941 	bl	8003ad2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003850:	e016      	b.n	8003880 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e00c      	b.n	8003880 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e002      	b.n	8003880 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f944 	bl	8003b08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2210      	movs	r2, #16
 80038a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2208      	movs	r2, #8
 80038be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f92a 	bl	8003b1a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fcb6 	bl	8002250 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2210      	movs	r2, #16
 8003906:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2208      	movs	r2, #8
 8003922:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f901 	bl	8003b2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe fcac 	bl	80022a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2210      	movs	r2, #16
 8003962:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8ea 	bl	8003b3e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2208      	movs	r2, #8
 8003984:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8e2 	bl	8003b50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d07b      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d072      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d043      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d03e      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a0e:	2b60      	cmp	r3, #96	; 0x60
 8003a10:	d02b      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x32a>
 8003a12:	2b60      	cmp	r3, #96	; 0x60
 8003a14:	d82e      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a16:	2b50      	cmp	r3, #80	; 0x50
 8003a18:	d022      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x320>
 8003a1a:	2b50      	cmp	r3, #80	; 0x50
 8003a1c:	d82a      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d019      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x316>
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d826      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a26:	2b30      	cmp	r3, #48	; 0x30
 8003a28:	d010      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x30c>
 8003a2a:	2b30      	cmp	r3, #48	; 0x30
 8003a2c:	d822      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d002      	beq.n	8003a38 <HAL_CAN_IRQHandler+0x2f8>
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d005      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a36:	e01d      	b.n	8003a74 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f043 0308 	orr.w	r3, r3, #8
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a40:	e019      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	f043 0310 	orr.w	r3, r3, #16
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a4a:	e014      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a54:	e00f      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5e:	e00a      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a68:	e005      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a72:	e000      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a74:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f85e 	bl	8003b62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3728      	adds	r7, #40	; 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <__NVIC_SetPriorityGrouping>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba6:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60d3      	str	r3, [r2, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_GetPriorityGrouping>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4906      	ldr	r1, [pc, #24]	; (8003c0c <__NVIC_EnableIRQ+0x34>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100

08003c10 <__NVIC_SetPriority>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db0a      	blt.n	8003c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	490c      	ldr	r1, [pc, #48]	; (8003c5c <__NVIC_SetPriority+0x4c>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	440b      	add	r3, r1
 8003c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c38:	e00a      	b.n	8003c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <__NVIC_SetPriority+0x50>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3b04      	subs	r3, #4
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	761a      	strb	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <NVIC_EncodePriority>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f1c3 0307 	rsb	r3, r3, #7
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf28      	it	cs
 8003c82:	2304      	movcs	r3, #4
 8003c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d902      	bls.n	8003c94 <NVIC_EncodePriority+0x30>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3b03      	subs	r3, #3
 8003c92:	e000      	b.n	8003c96 <NVIC_EncodePriority+0x32>
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	43d9      	mvns	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	4313      	orrs	r3, r2
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd8:	d301      	bcc.n	8003cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00f      	b.n	8003cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <SysTick_Config+0x40>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	f7ff ff90 	bl	8003c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <SysTick_Config+0x40>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <SysTick_Config+0x40>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	e000e010 	.word	0xe000e010

08003d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff2d 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d34:	f7ff ff42 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f7ff ff90 	bl	8003c64 <NVIC_EncodePriority>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff5f 	bl	8003c10 <__NVIC_SetPriority>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff35 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffa2 	bl	8003cc8 <SysTick_Config>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e059      	b.n	8003e5a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_DMA_Init+0xd4>)
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d80f      	bhi.n	8003dd2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <HAL_DMA_Init+0xd8>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <HAL_DMA_Init+0xdc>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	009a      	lsls	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <HAL_DMA_Init+0xe0>)
 8003dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dd0:	e00e      	b.n	8003df0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <HAL_DMA_Init+0xe4>)
 8003dda:	4413      	add	r3, r2
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_DMA_Init+0xdc>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <HAL_DMA_Init+0xe8>)
 8003dee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40020407 	.word	0x40020407
 8003e68:	bffdfff8 	.word	0xbffdfff8
 8003e6c:	cccccccd 	.word	0xcccccccd
 8003e70:	40020000 	.word	0x40020000
 8003e74:	bffdfbf8 	.word	0xbffdfbf8
 8003e78:	40020400 	.word	0x40020400

08003e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_DMA_Start_IT+0x20>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e04a      	b.n	8003f32 <HAL_DMA_Start_IT+0xb6>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d13a      	bne.n	8003f24 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fbb0 	bl	8004638 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 020e 	orr.w	r2, r2, #14
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e00f      	b.n	8003f12 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0204 	bic.w	r2, r2, #4
 8003f00:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 020a 	orr.w	r2, r2, #10
 8003f10:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e005      	b.n	8003f30 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d008      	beq.n	8003f62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2204      	movs	r2, #4
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e020      	b.n	8003fa4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 020e 	bic.w	r2, r2, #14
 8003f70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d005      	beq.n	8003fd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e0d6      	b.n	8004180 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 020e 	bic.w	r2, r2, #14
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b64      	ldr	r3, [pc, #400]	; (800418c <HAL_DMA_Abort_IT+0x1dc>)
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d958      	bls.n	80040b0 <HAL_DMA_Abort_IT+0x100>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a63      	ldr	r2, [pc, #396]	; (8004190 <HAL_DMA_Abort_IT+0x1e0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04f      	beq.n	80040a8 <HAL_DMA_Abort_IT+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a61      	ldr	r2, [pc, #388]	; (8004194 <HAL_DMA_Abort_IT+0x1e4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d048      	beq.n	80040a4 <HAL_DMA_Abort_IT+0xf4>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_DMA_Abort_IT+0x1e8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <HAL_DMA_Abort_IT+0xee>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5e      	ldr	r2, [pc, #376]	; (800419c <HAL_DMA_Abort_IT+0x1ec>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d038      	beq.n	8004098 <HAL_DMA_Abort_IT+0xe8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <HAL_DMA_Abort_IT+0x1f0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d030      	beq.n	8004092 <HAL_DMA_Abort_IT+0xe2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a5b      	ldr	r2, [pc, #364]	; (80041a4 <HAL_DMA_Abort_IT+0x1f4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d028      	beq.n	800408c <HAL_DMA_Abort_IT+0xdc>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a53      	ldr	r2, [pc, #332]	; (800418c <HAL_DMA_Abort_IT+0x1dc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d020      	beq.n	8004086 <HAL_DMA_Abort_IT+0xd6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_DMA_Abort_IT+0x1f8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d019      	beq.n	8004082 <HAL_DMA_Abort_IT+0xd2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a56      	ldr	r2, [pc, #344]	; (80041ac <HAL_DMA_Abort_IT+0x1fc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d012      	beq.n	800407e <HAL_DMA_Abort_IT+0xce>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a54      	ldr	r2, [pc, #336]	; (80041b0 <HAL_DMA_Abort_IT+0x200>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00a      	beq.n	8004078 <HAL_DMA_Abort_IT+0xc8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a53      	ldr	r2, [pc, #332]	; (80041b4 <HAL_DMA_Abort_IT+0x204>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d102      	bne.n	8004072 <HAL_DMA_Abort_IT+0xc2>
 800406c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004070:	e01b      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 8004072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004076:	e018      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 8004078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800407c:	e015      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 800407e:	2310      	movs	r3, #16
 8004080:	e013      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 8004082:	2301      	movs	r3, #1
 8004084:	e011      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 8004086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800408a:	e00e      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 800408c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004090:	e00b      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 8004092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004096:	e008      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 8004098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800409c:	e005      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 800409e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040a2:	e002      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 80040a4:	2310      	movs	r3, #16
 80040a6:	e000      	b.n	80040aa <HAL_DMA_Abort_IT+0xfa>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4a43      	ldr	r2, [pc, #268]	; (80041b8 <HAL_DMA_Abort_IT+0x208>)
 80040ac:	6053      	str	r3, [r2, #4]
 80040ae:	e057      	b.n	8004160 <HAL_DMA_Abort_IT+0x1b0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a36      	ldr	r2, [pc, #216]	; (8004190 <HAL_DMA_Abort_IT+0x1e0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04f      	beq.n	800415a <HAL_DMA_Abort_IT+0x1aa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a35      	ldr	r2, [pc, #212]	; (8004194 <HAL_DMA_Abort_IT+0x1e4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d048      	beq.n	8004156 <HAL_DMA_Abort_IT+0x1a6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a33      	ldr	r2, [pc, #204]	; (8004198 <HAL_DMA_Abort_IT+0x1e8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <HAL_DMA_Abort_IT+0x1a0>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a32      	ldr	r2, [pc, #200]	; (800419c <HAL_DMA_Abort_IT+0x1ec>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d038      	beq.n	800414a <HAL_DMA_Abort_IT+0x19a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <HAL_DMA_Abort_IT+0x1f0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d030      	beq.n	8004144 <HAL_DMA_Abort_IT+0x194>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <HAL_DMA_Abort_IT+0x1f4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d028      	beq.n	800413e <HAL_DMA_Abort_IT+0x18e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a26      	ldr	r2, [pc, #152]	; (800418c <HAL_DMA_Abort_IT+0x1dc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d020      	beq.n	8004138 <HAL_DMA_Abort_IT+0x188>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2b      	ldr	r2, [pc, #172]	; (80041a8 <HAL_DMA_Abort_IT+0x1f8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d019      	beq.n	8004134 <HAL_DMA_Abort_IT+0x184>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a29      	ldr	r2, [pc, #164]	; (80041ac <HAL_DMA_Abort_IT+0x1fc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d012      	beq.n	8004130 <HAL_DMA_Abort_IT+0x180>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <HAL_DMA_Abort_IT+0x200>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00a      	beq.n	800412a <HAL_DMA_Abort_IT+0x17a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <HAL_DMA_Abort_IT+0x204>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d102      	bne.n	8004124 <HAL_DMA_Abort_IT+0x174>
 800411e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004122:	e01b      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 8004124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004128:	e018      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 800412a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412e:	e015      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 8004130:	2310      	movs	r3, #16
 8004132:	e013      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 8004134:	2301      	movs	r3, #1
 8004136:	e011      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 8004138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800413c:	e00e      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 800413e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004142:	e00b      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 8004144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004148:	e008      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 800414a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414e:	e005      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 8004150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004154:	e002      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 8004156:	2310      	movs	r3, #16
 8004158:	e000      	b.n	800415c <HAL_DMA_Abort_IT+0x1ac>
 800415a:	2301      	movs	r3, #1
 800415c:	4a17      	ldr	r2, [pc, #92]	; (80041bc <HAL_DMA_Abort_IT+0x20c>)
 800415e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
    } 
  }
  return status;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40020080 	.word	0x40020080
 8004190:	40020008 	.word	0x40020008
 8004194:	4002001c 	.word	0x4002001c
 8004198:	40020030 	.word	0x40020030
 800419c:	40020044 	.word	0x40020044
 80041a0:	40020058 	.word	0x40020058
 80041a4:	4002006c 	.word	0x4002006c
 80041a8:	40020408 	.word	0x40020408
 80041ac:	4002041c 	.word	0x4002041c
 80041b0:	40020430 	.word	0x40020430
 80041b4:	40020444 	.word	0x40020444
 80041b8:	40020400 	.word	0x40020400
 80041bc:	40020000 	.word	0x40020000

080041c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	2204      	movs	r2, #4
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80f1 	beq.w	80043cc <HAL_DMA_IRQHandler+0x20c>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80eb 	beq.w	80043cc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d107      	bne.n	8004214 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0204 	bic.w	r2, r2, #4
 8004212:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <HAL_DMA_IRQHandler+0x1d8>)
 800421c:	429a      	cmp	r2, r3
 800421e:	d958      	bls.n	80042d2 <HAL_DMA_IRQHandler+0x112>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a5d      	ldr	r2, [pc, #372]	; (800439c <HAL_DMA_IRQHandler+0x1dc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d04f      	beq.n	80042ca <HAL_DMA_IRQHandler+0x10a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a5c      	ldr	r2, [pc, #368]	; (80043a0 <HAL_DMA_IRQHandler+0x1e0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d048      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x106>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5a      	ldr	r2, [pc, #360]	; (80043a4 <HAL_DMA_IRQHandler+0x1e4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d040      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x100>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a59      	ldr	r2, [pc, #356]	; (80043a8 <HAL_DMA_IRQHandler+0x1e8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d038      	beq.n	80042ba <HAL_DMA_IRQHandler+0xfa>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a57      	ldr	r2, [pc, #348]	; (80043ac <HAL_DMA_IRQHandler+0x1ec>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d030      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xf4>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a56      	ldr	r2, [pc, #344]	; (80043b0 <HAL_DMA_IRQHandler+0x1f0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d028      	beq.n	80042ae <HAL_DMA_IRQHandler+0xee>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a4d      	ldr	r2, [pc, #308]	; (8004398 <HAL_DMA_IRQHandler+0x1d8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d020      	beq.n	80042a8 <HAL_DMA_IRQHandler+0xe8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_DMA_IRQHandler+0x1f4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d019      	beq.n	80042a4 <HAL_DMA_IRQHandler+0xe4>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a50      	ldr	r2, [pc, #320]	; (80043b8 <HAL_DMA_IRQHandler+0x1f8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d012      	beq.n	80042a0 <HAL_DMA_IRQHandler+0xe0>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4f      	ldr	r2, [pc, #316]	; (80043bc <HAL_DMA_IRQHandler+0x1fc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00a      	beq.n	800429a <HAL_DMA_IRQHandler+0xda>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a4d      	ldr	r2, [pc, #308]	; (80043c0 <HAL_DMA_IRQHandler+0x200>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d102      	bne.n	8004294 <HAL_DMA_IRQHandler+0xd4>
 800428e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004292:	e01b      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 8004294:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004298:	e018      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 800429a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429e:	e015      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042a0:	2340      	movs	r3, #64	; 0x40
 80042a2:	e013      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042a4:	2304      	movs	r3, #4
 80042a6:	e011      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042ac:	e00e      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042b2:	e00b      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042b8:	e008      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042be:	e005      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c4:	e002      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042c6:	2340      	movs	r3, #64	; 0x40
 80042c8:	e000      	b.n	80042cc <HAL_DMA_IRQHandler+0x10c>
 80042ca:	2304      	movs	r3, #4
 80042cc:	4a3d      	ldr	r2, [pc, #244]	; (80043c4 <HAL_DMA_IRQHandler+0x204>)
 80042ce:	6053      	str	r3, [r2, #4]
 80042d0:	e057      	b.n	8004382 <HAL_DMA_IRQHandler+0x1c2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a31      	ldr	r2, [pc, #196]	; (800439c <HAL_DMA_IRQHandler+0x1dc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d04f      	beq.n	800437c <HAL_DMA_IRQHandler+0x1bc>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <HAL_DMA_IRQHandler+0x1e0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d048      	beq.n	8004378 <HAL_DMA_IRQHandler+0x1b8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <HAL_DMA_IRQHandler+0x1e4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d040      	beq.n	8004372 <HAL_DMA_IRQHandler+0x1b2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <HAL_DMA_IRQHandler+0x1e8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d038      	beq.n	800436c <HAL_DMA_IRQHandler+0x1ac>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <HAL_DMA_IRQHandler+0x1ec>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d030      	beq.n	8004366 <HAL_DMA_IRQHandler+0x1a6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <HAL_DMA_IRQHandler+0x1f0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d028      	beq.n	8004360 <HAL_DMA_IRQHandler+0x1a0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a21      	ldr	r2, [pc, #132]	; (8004398 <HAL_DMA_IRQHandler+0x1d8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d020      	beq.n	800435a <HAL_DMA_IRQHandler+0x19a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a25      	ldr	r2, [pc, #148]	; (80043b4 <HAL_DMA_IRQHandler+0x1f4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d019      	beq.n	8004356 <HAL_DMA_IRQHandler+0x196>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a24      	ldr	r2, [pc, #144]	; (80043b8 <HAL_DMA_IRQHandler+0x1f8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d012      	beq.n	8004352 <HAL_DMA_IRQHandler+0x192>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a22      	ldr	r2, [pc, #136]	; (80043bc <HAL_DMA_IRQHandler+0x1fc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00a      	beq.n	800434c <HAL_DMA_IRQHandler+0x18c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <HAL_DMA_IRQHandler+0x200>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d102      	bne.n	8004346 <HAL_DMA_IRQHandler+0x186>
 8004340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004344:	e01b      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 8004346:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800434a:	e018      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 800434c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004350:	e015      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 8004352:	2340      	movs	r3, #64	; 0x40
 8004354:	e013      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 8004356:	2304      	movs	r3, #4
 8004358:	e011      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 800435a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800435e:	e00e      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 8004360:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004364:	e00b      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 8004366:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800436a:	e008      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 800436c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004370:	e005      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 8004372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004376:	e002      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	e000      	b.n	800437e <HAL_DMA_IRQHandler+0x1be>
 800437c:	2304      	movs	r3, #4
 800437e:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <HAL_DMA_IRQHandler+0x208>)
 8004380:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8136 	beq.w	80045f8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004394:	e130      	b.n	80045f8 <HAL_DMA_IRQHandler+0x438>
 8004396:	bf00      	nop
 8004398:	40020080 	.word	0x40020080
 800439c:	40020008 	.word	0x40020008
 80043a0:	4002001c 	.word	0x4002001c
 80043a4:	40020030 	.word	0x40020030
 80043a8:	40020044 	.word	0x40020044
 80043ac:	40020058 	.word	0x40020058
 80043b0:	4002006c 	.word	0x4002006c
 80043b4:	40020408 	.word	0x40020408
 80043b8:	4002041c 	.word	0x4002041c
 80043bc:	40020430 	.word	0x40020430
 80043c0:	40020444 	.word	0x40020444
 80043c4:	40020400 	.word	0x40020400
 80043c8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2202      	movs	r2, #2
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80dd 	beq.w	8004598 <HAL_DMA_IRQHandler+0x3d8>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80d7 	beq.w	8004598 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 020a 	bic.w	r2, r2, #10
 8004406:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <HAL_DMA_IRQHandler+0x444>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d958      	bls.n	80044ce <HAL_DMA_IRQHandler+0x30e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a79      	ldr	r2, [pc, #484]	; (8004608 <HAL_DMA_IRQHandler+0x448>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04f      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x306>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a78      	ldr	r2, [pc, #480]	; (800460c <HAL_DMA_IRQHandler+0x44c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d048      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x302>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a76      	ldr	r2, [pc, #472]	; (8004610 <HAL_DMA_IRQHandler+0x450>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d040      	beq.n	80044bc <HAL_DMA_IRQHandler+0x2fc>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a75      	ldr	r2, [pc, #468]	; (8004614 <HAL_DMA_IRQHandler+0x454>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d038      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2f6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a73      	ldr	r2, [pc, #460]	; (8004618 <HAL_DMA_IRQHandler+0x458>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d030      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x2f0>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a72      	ldr	r2, [pc, #456]	; (800461c <HAL_DMA_IRQHandler+0x45c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d028      	beq.n	80044aa <HAL_DMA_IRQHandler+0x2ea>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a69      	ldr	r2, [pc, #420]	; (8004604 <HAL_DMA_IRQHandler+0x444>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d020      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x2e4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6e      	ldr	r2, [pc, #440]	; (8004620 <HAL_DMA_IRQHandler+0x460>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d019      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x2e0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6c      	ldr	r2, [pc, #432]	; (8004624 <HAL_DMA_IRQHandler+0x464>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d012      	beq.n	800449c <HAL_DMA_IRQHandler+0x2dc>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6b      	ldr	r2, [pc, #428]	; (8004628 <HAL_DMA_IRQHandler+0x468>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00a      	beq.n	8004496 <HAL_DMA_IRQHandler+0x2d6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a69      	ldr	r2, [pc, #420]	; (800462c <HAL_DMA_IRQHandler+0x46c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d102      	bne.n	8004490 <HAL_DMA_IRQHandler+0x2d0>
 800448a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800448e:	e01b      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 8004490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004494:	e018      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 8004496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800449a:	e015      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 800449c:	2320      	movs	r3, #32
 800449e:	e013      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e011      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a8:	e00e      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044ae:	e00b      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b4:	e008      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ba:	e005      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c0:	e002      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044c2:	2320      	movs	r3, #32
 80044c4:	e000      	b.n	80044c8 <HAL_DMA_IRQHandler+0x308>
 80044c6:	2302      	movs	r3, #2
 80044c8:	4a59      	ldr	r2, [pc, #356]	; (8004630 <HAL_DMA_IRQHandler+0x470>)
 80044ca:	6053      	str	r3, [r2, #4]
 80044cc:	e057      	b.n	800457e <HAL_DMA_IRQHandler+0x3be>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_DMA_IRQHandler+0x448>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d04f      	beq.n	8004578 <HAL_DMA_IRQHandler+0x3b8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a4b      	ldr	r2, [pc, #300]	; (800460c <HAL_DMA_IRQHandler+0x44c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d048      	beq.n	8004574 <HAL_DMA_IRQHandler+0x3b4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4a      	ldr	r2, [pc, #296]	; (8004610 <HAL_DMA_IRQHandler+0x450>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d040      	beq.n	800456e <HAL_DMA_IRQHandler+0x3ae>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a48      	ldr	r2, [pc, #288]	; (8004614 <HAL_DMA_IRQHandler+0x454>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d038      	beq.n	8004568 <HAL_DMA_IRQHandler+0x3a8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a47      	ldr	r2, [pc, #284]	; (8004618 <HAL_DMA_IRQHandler+0x458>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d030      	beq.n	8004562 <HAL_DMA_IRQHandler+0x3a2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a45      	ldr	r2, [pc, #276]	; (800461c <HAL_DMA_IRQHandler+0x45c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d028      	beq.n	800455c <HAL_DMA_IRQHandler+0x39c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <HAL_DMA_IRQHandler+0x444>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d020      	beq.n	8004556 <HAL_DMA_IRQHandler+0x396>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a41      	ldr	r2, [pc, #260]	; (8004620 <HAL_DMA_IRQHandler+0x460>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d019      	beq.n	8004552 <HAL_DMA_IRQHandler+0x392>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a40      	ldr	r2, [pc, #256]	; (8004624 <HAL_DMA_IRQHandler+0x464>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d012      	beq.n	800454e <HAL_DMA_IRQHandler+0x38e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3e      	ldr	r2, [pc, #248]	; (8004628 <HAL_DMA_IRQHandler+0x468>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00a      	beq.n	8004548 <HAL_DMA_IRQHandler+0x388>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a3d      	ldr	r2, [pc, #244]	; (800462c <HAL_DMA_IRQHandler+0x46c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d102      	bne.n	8004542 <HAL_DMA_IRQHandler+0x382>
 800453c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004540:	e01b      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004546:	e018      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800454c:	e015      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 800454e:	2320      	movs	r3, #32
 8004550:	e013      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004552:	2302      	movs	r3, #2
 8004554:	e011      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455a:	e00e      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 800455c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004560:	e00b      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004566:	e008      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800456c:	e005      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 800456e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004572:	e002      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004574:	2320      	movs	r3, #32
 8004576:	e000      	b.n	800457a <HAL_DMA_IRQHandler+0x3ba>
 8004578:	2302      	movs	r3, #2
 800457a:	4a2e      	ldr	r2, [pc, #184]	; (8004634 <HAL_DMA_IRQHandler+0x474>)
 800457c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d034      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004596:	e02f      	b.n	80045f8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2208      	movs	r2, #8
 800459e:	409a      	lsls	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d028      	beq.n	80045fa <HAL_DMA_IRQHandler+0x43a>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d023      	beq.n	80045fa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 020e 	bic.w	r2, r2, #14
 80045c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2101      	movs	r1, #1
 80045cc:	fa01 f202 	lsl.w	r2, r1, r2
 80045d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
    }
  }
  return;
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
}
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40020080 	.word	0x40020080
 8004608:	40020008 	.word	0x40020008
 800460c:	4002001c 	.word	0x4002001c
 8004610:	40020030 	.word	0x40020030
 8004614:	40020044 	.word	0x40020044
 8004618:	40020058 	.word	0x40020058
 800461c:	4002006c 	.word	0x4002006c
 8004620:	40020408 	.word	0x40020408
 8004624:	4002041c 	.word	0x4002041c
 8004628:	40020430 	.word	0x40020430
 800462c:	40020444 	.word	0x40020444
 8004630:	40020400 	.word	0x40020400
 8004634:	40020000 	.word	0x40020000

08004638 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b10      	cmp	r3, #16
 8004664:	d108      	bne.n	8004678 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004676:	e007      	b.n	8004688 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
	...

08004694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b08b      	sub	sp, #44	; 0x2c
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046a2:	2300      	movs	r3, #0
 80046a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a6:	e169      	b.n	800497c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046a8:	2201      	movs	r2, #1
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	f040 8158 	bne.w	8004976 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4a9a      	ldr	r2, [pc, #616]	; (8004934 <HAL_GPIO_Init+0x2a0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d05e      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046d0:	4a98      	ldr	r2, [pc, #608]	; (8004934 <HAL_GPIO_Init+0x2a0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d875      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046d6:	4a98      	ldr	r2, [pc, #608]	; (8004938 <HAL_GPIO_Init+0x2a4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d058      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046dc:	4a96      	ldr	r2, [pc, #600]	; (8004938 <HAL_GPIO_Init+0x2a4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d86f      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046e2:	4a96      	ldr	r2, [pc, #600]	; (800493c <HAL_GPIO_Init+0x2a8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d052      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046e8:	4a94      	ldr	r2, [pc, #592]	; (800493c <HAL_GPIO_Init+0x2a8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d869      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046ee:	4a94      	ldr	r2, [pc, #592]	; (8004940 <HAL_GPIO_Init+0x2ac>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d04c      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046f4:	4a92      	ldr	r2, [pc, #584]	; (8004940 <HAL_GPIO_Init+0x2ac>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d863      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046fa:	4a92      	ldr	r2, [pc, #584]	; (8004944 <HAL_GPIO_Init+0x2b0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d046      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 8004700:	4a90      	ldr	r2, [pc, #576]	; (8004944 <HAL_GPIO_Init+0x2b0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d85d      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 8004706:	2b12      	cmp	r3, #18
 8004708:	d82a      	bhi.n	8004760 <HAL_GPIO_Init+0xcc>
 800470a:	2b12      	cmp	r3, #18
 800470c:	d859      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <HAL_GPIO_Init+0x80>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	0800478f 	.word	0x0800478f
 8004718:	08004769 	.word	0x08004769
 800471c:	0800477b 	.word	0x0800477b
 8004720:	080047bd 	.word	0x080047bd
 8004724:	080047c3 	.word	0x080047c3
 8004728:	080047c3 	.word	0x080047c3
 800472c:	080047c3 	.word	0x080047c3
 8004730:	080047c3 	.word	0x080047c3
 8004734:	080047c3 	.word	0x080047c3
 8004738:	080047c3 	.word	0x080047c3
 800473c:	080047c3 	.word	0x080047c3
 8004740:	080047c3 	.word	0x080047c3
 8004744:	080047c3 	.word	0x080047c3
 8004748:	080047c3 	.word	0x080047c3
 800474c:	080047c3 	.word	0x080047c3
 8004750:	080047c3 	.word	0x080047c3
 8004754:	080047c3 	.word	0x080047c3
 8004758:	08004771 	.word	0x08004771
 800475c:	08004785 	.word	0x08004785
 8004760:	4a79      	ldr	r2, [pc, #484]	; (8004948 <HAL_GPIO_Init+0x2b4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004766:	e02c      	b.n	80047c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	623b      	str	r3, [r7, #32]
          break;
 800476e:	e029      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	3304      	adds	r3, #4
 8004776:	623b      	str	r3, [r7, #32]
          break;
 8004778:	e024      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	3308      	adds	r3, #8
 8004780:	623b      	str	r3, [r7, #32]
          break;
 8004782:	e01f      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	330c      	adds	r3, #12
 800478a:	623b      	str	r3, [r7, #32]
          break;
 800478c:	e01a      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004796:	2304      	movs	r3, #4
 8004798:	623b      	str	r3, [r7, #32]
          break;
 800479a:	e013      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047a4:	2308      	movs	r3, #8
 80047a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	611a      	str	r2, [r3, #16]
          break;
 80047ae:	e009      	b.n	80047c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047b0:	2308      	movs	r3, #8
 80047b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	615a      	str	r2, [r3, #20]
          break;
 80047ba:	e003      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047bc:	2300      	movs	r3, #0
 80047be:	623b      	str	r3, [r7, #32]
          break;
 80047c0:	e000      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          break;
 80047c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2bff      	cmp	r3, #255	; 0xff
 80047c8:	d801      	bhi.n	80047ce <HAL_GPIO_Init+0x13a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	e001      	b.n	80047d2 <HAL_GPIO_Init+0x13e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2bff      	cmp	r3, #255	; 0xff
 80047d8:	d802      	bhi.n	80047e0 <HAL_GPIO_Init+0x14c>
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	e002      	b.n	80047e6 <HAL_GPIO_Init+0x152>
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	3b08      	subs	r3, #8
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	210f      	movs	r1, #15
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	401a      	ands	r2, r3
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	431a      	orrs	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80b1 	beq.w	8004976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004814:	4b4d      	ldr	r3, [pc, #308]	; (800494c <HAL_GPIO_Init+0x2b8>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4a4c      	ldr	r2, [pc, #304]	; (800494c <HAL_GPIO_Init+0x2b8>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6193      	str	r3, [r2, #24]
 8004820:	4b4a      	ldr	r3, [pc, #296]	; (800494c <HAL_GPIO_Init+0x2b8>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800482c:	4a48      	ldr	r2, [pc, #288]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	220f      	movs	r2, #15
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4013      	ands	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a40      	ldr	r2, [pc, #256]	; (8004954 <HAL_GPIO_Init+0x2c0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_GPIO_Init+0x1ec>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <HAL_GPIO_Init+0x2c4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00d      	beq.n	800487c <HAL_GPIO_Init+0x1e8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3e      	ldr	r2, [pc, #248]	; (800495c <HAL_GPIO_Init+0x2c8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <HAL_GPIO_Init+0x1e4>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3d      	ldr	r2, [pc, #244]	; (8004960 <HAL_GPIO_Init+0x2cc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_GPIO_Init+0x1e0>
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 8004874:	2304      	movs	r3, #4
 8004876:	e004      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 8004878:	2302      	movs	r3, #2
 800487a:	e002      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 8004880:	2300      	movs	r3, #0
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	f002 0203 	and.w	r2, r2, #3
 8004888:	0092      	lsls	r2, r2, #2
 800488a:	4093      	lsls	r3, r2
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004892:	492f      	ldr	r1, [pc, #188]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	3302      	adds	r3, #2
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048ac:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	492c      	ldr	r1, [pc, #176]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	4928      	ldr	r1, [pc, #160]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	4922      	ldr	r1, [pc, #136]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	604b      	str	r3, [r1, #4]
 80048e0:	e006      	b.n	80048f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	491e      	ldr	r1, [pc, #120]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d006      	beq.n	800490a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4918      	ldr	r1, [pc, #96]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
 8004908:	e006      	b.n	8004918 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	43db      	mvns	r3, r3
 8004912:	4914      	ldr	r1, [pc, #80]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 8004914:	4013      	ands	r3, r2
 8004916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d021      	beq.n	8004968 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	60cb      	str	r3, [r1, #12]
 8004930:	e021      	b.n	8004976 <HAL_GPIO_Init+0x2e2>
 8004932:	bf00      	nop
 8004934:	10320000 	.word	0x10320000
 8004938:	10310000 	.word	0x10310000
 800493c:	10220000 	.word	0x10220000
 8004940:	10210000 	.word	0x10210000
 8004944:	10120000 	.word	0x10120000
 8004948:	10110000 	.word	0x10110000
 800494c:	40021000 	.word	0x40021000
 8004950:	40010000 	.word	0x40010000
 8004954:	40010800 	.word	0x40010800
 8004958:	40010c00 	.word	0x40010c00
 800495c:	40011000 	.word	0x40011000
 8004960:	40011400 	.word	0x40011400
 8004964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_GPIO_Init+0x304>)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	43db      	mvns	r3, r3
 8004970:	4909      	ldr	r1, [pc, #36]	; (8004998 <HAL_GPIO_Init+0x304>)
 8004972:	4013      	ands	r3, r2
 8004974:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	3301      	adds	r3, #1
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f47f ae8e 	bne.w	80046a8 <HAL_GPIO_Init+0x14>
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	372c      	adds	r7, #44	; 0x2c
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40010400 	.word	0x40010400

0800499c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049ac:	787b      	ldrb	r3, [r7, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049b8:	e003      	b.n	80049c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	611a      	str	r2, [r3, #16]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4013      	ands	r3, r2
 80049e4:	041a      	lsls	r2, r3, #16
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	43d9      	mvns	r1, r3
 80049ea:	887b      	ldrh	r3, [r7, #2]
 80049ec:	400b      	ands	r3, r1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	611a      	str	r2, [r3, #16]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a16:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc faea 	bl	8000ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40010400 	.word	0x40010400

08004a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e304      	b.n	800504c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8087 	beq.w	8004b5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a50:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d00c      	beq.n	8004a76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a5c:	4b8f      	ldr	r3, [pc, #572]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d112      	bne.n	8004a8e <HAL_RCC_OscConfig+0x5e>
 8004a68:	4b8c      	ldr	r3, [pc, #560]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a74:	d10b      	bne.n	8004a8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a76:	4b89      	ldr	r3, [pc, #548]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d06c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x12c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d168      	bne.n	8004b5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e2de      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x76>
 8004a98:	4b80      	ldr	r3, [pc, #512]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7f      	ldr	r2, [pc, #508]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e02e      	b.n	8004b04 <HAL_RCC_OscConfig+0xd4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x98>
 8004aae:	4b7b      	ldr	r3, [pc, #492]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7a      	ldr	r2, [pc, #488]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b78      	ldr	r3, [pc, #480]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a77      	ldr	r2, [pc, #476]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e01d      	b.n	8004b04 <HAL_RCC_OscConfig+0xd4>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0xbc>
 8004ad2:	4b72      	ldr	r3, [pc, #456]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a71      	ldr	r2, [pc, #452]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b6f      	ldr	r3, [pc, #444]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a6e      	ldr	r2, [pc, #440]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e00b      	b.n	8004b04 <HAL_RCC_OscConfig+0xd4>
 8004aec:	4b6b      	ldr	r3, [pc, #428]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6a      	ldr	r2, [pc, #424]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b68      	ldr	r3, [pc, #416]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a67      	ldr	r2, [pc, #412]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fd ffaa 	bl	8002a64 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b14:	f7fd ffa6 	bl	8002a64 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e292      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0xe4>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fd ff96 	bl	8002a64 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fd ff92 	bl	8002a64 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e27e      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x10c>
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d063      	beq.n	8004c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b76:	4b49      	ldr	r3, [pc, #292]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x18c>
 8004b82:	4b46      	ldr	r3, [pc, #280]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x176>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e252      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b3d      	ldr	r3, [pc, #244]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4939      	ldr	r1, [pc, #228]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	e03a      	b.n	8004c32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7fd ff4b 	bl	8002a64 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fd ff47 	bl	8002a64 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e233      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4927      	ldr	r1, [pc, #156]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c06:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fd ff2a 	bl	8002a64 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd ff26 	bl	8002a64 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e212      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d03a      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d019      	beq.n	8004c7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4c:	f7fd ff0a 	bl	8002a64 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fd ff06 	bl	8002a64 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1f2      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_RCC_OscConfig+0x26c>)
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c72:	2001      	movs	r0, #1
 8004c74:	f000 fbec 	bl	8005450 <RCC_Delay>
 8004c78:	e01c      	b.n	8004cb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c80:	f7fd fef0 	bl	8002a64 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c86:	e00f      	b.n	8004ca8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c88:	f7fd feec 	bl	8002a64 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d908      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1d8      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	42420000 	.word	0x42420000
 8004ca4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca8:	4b9b      	ldr	r3, [pc, #620]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e9      	bne.n	8004c88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a6 	beq.w	8004e0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc6:	4b94      	ldr	r3, [pc, #592]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10d      	bne.n	8004cee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd2:	4b91      	ldr	r3, [pc, #580]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	4a90      	ldr	r2, [pc, #576]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	61d3      	str	r3, [r2, #28]
 8004cde:	4b8e      	ldr	r3, [pc, #568]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cee:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <HAL_RCC_OscConfig+0x4ec>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d118      	bne.n	8004d2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cfa:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCC_OscConfig+0x4ec>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <HAL_RCC_OscConfig+0x4ec>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d06:	f7fd fead 	bl	8002a64 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fd fea9 	bl	8002a64 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b64      	cmp	r3, #100	; 0x64
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e195      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	4b7e      	ldr	r3, [pc, #504]	; (8004f1c <HAL_RCC_OscConfig+0x4ec>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <HAL_RCC_OscConfig+0x312>
 8004d34:	4b78      	ldr	r3, [pc, #480]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4a77      	ldr	r2, [pc, #476]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6213      	str	r3, [r2, #32]
 8004d40:	e02d      	b.n	8004d9e <HAL_RCC_OscConfig+0x36e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x334>
 8004d4a:	4b73      	ldr	r3, [pc, #460]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4a72      	ldr	r2, [pc, #456]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	6213      	str	r3, [r2, #32]
 8004d56:	4b70      	ldr	r3, [pc, #448]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	4a6f      	ldr	r2, [pc, #444]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	6213      	str	r3, [r2, #32]
 8004d62:	e01c      	b.n	8004d9e <HAL_RCC_OscConfig+0x36e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b05      	cmp	r3, #5
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x356>
 8004d6c:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	4a69      	ldr	r2, [pc, #420]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d72:	f043 0304 	orr.w	r3, r3, #4
 8004d76:	6213      	str	r3, [r2, #32]
 8004d78:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4a66      	ldr	r2, [pc, #408]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6213      	str	r3, [r2, #32]
 8004d84:	e00b      	b.n	8004d9e <HAL_RCC_OscConfig+0x36e>
 8004d86:	4b64      	ldr	r3, [pc, #400]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4a63      	ldr	r2, [pc, #396]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6213      	str	r3, [r2, #32]
 8004d92:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004d98:	f023 0304 	bic.w	r3, r3, #4
 8004d9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d015      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da6:	f7fd fe5d 	bl	8002a64 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fd fe59 	bl	8002a64 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e143      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	4b54      	ldr	r3, [pc, #336]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ee      	beq.n	8004dae <HAL_RCC_OscConfig+0x37e>
 8004dd0:	e014      	b.n	8004dfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fe47 	bl	8002a64 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fd fe43 	bl	8002a64 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e12d      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df0:	4b49      	ldr	r3, [pc, #292]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ee      	bne.n	8004dda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d105      	bne.n	8004e0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e02:	4b45      	ldr	r3, [pc, #276]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4a44      	ldr	r2, [pc, #272]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 808c 	beq.w	8004f30 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004e18:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e24:	d10e      	bne.n	8004e44 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004e26:	4b3c      	ldr	r3, [pc, #240]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d108      	bne.n	8004e44 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004e32:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e103      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d14e      	bne.n	8004eea <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004e4c:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d009      	beq.n	8004e6c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004e58:	4b2f      	ldr	r3, [pc, #188]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0ef      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004e6c:	4b2c      	ldr	r3, [pc, #176]	; (8004f20 <HAL_RCC_OscConfig+0x4f0>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fd fdf7 	bl	8002a64 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e7a:	f7fd fdf3 	bl	8002a64 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b64      	cmp	r3, #100	; 0x64
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0df      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004e8c:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004e98:	4b1f      	ldr	r3, [pc, #124]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	491c      	ldr	r1, [pc, #112]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004eaa:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4918      	ldr	r1, [pc, #96]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004ebc:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <HAL_RCC_OscConfig+0x4f0>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fd fdcf 	bl	8002a64 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eca:	f7fd fdcb 	bl	8002a64 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b64      	cmp	r3, #100	; 0x64
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e0b7      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004edc:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x49a>
 8004ee8:	e022      	b.n	8004f30 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <HAL_RCC_OscConfig+0x4e8>)
 8004ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_RCC_OscConfig+0x4f0>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fd fdb2 	bl	8002a64 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004f02:	e00f      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f04:	f7fd fdae 	bl	8002a64 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d908      	bls.n	8004f24 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e09a      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40007000 	.word	0x40007000
 8004f20:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004f24:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e9      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8088 	beq.w	800504a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3a:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d068      	beq.n	8005018 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d14d      	bne.n	8004fea <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b42      	ldr	r3, [pc, #264]	; (8005058 <HAL_RCC_OscConfig+0x628>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fd fd86 	bl	8002a64 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fd fd82 	bl	8002a64 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e06e      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f6e:	4b39      	ldr	r3, [pc, #228]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f82:	d10f      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004f84:	4b33      	ldr	r3, [pc, #204]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4931      	ldr	r1, [pc, #196]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	f023 020f 	bic.w	r2, r3, #15
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	492d      	ldr	r1, [pc, #180]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	4927      	ldr	r1, [pc, #156]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b26      	ldr	r3, [pc, #152]	; (8005058 <HAL_RCC_OscConfig+0x628>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fd fd4f 	bl	8002a64 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fca:	f7fd fd4b 	bl	8002a64 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e037      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x59a>
 8004fe8:	e02f      	b.n	800504a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x628>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fd fd38 	bl	8002a64 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff8:	f7fd fd34 	bl	8002a64 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e020      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x5c8>
 8005016:	e018      	b.n	800504a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e013      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x624>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	429a      	cmp	r2, r3
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	42420060 	.word	0x42420060

0800505c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0d0      	b.n	8005212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005070:	4b6a      	ldr	r3, [pc, #424]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d910      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b67      	ldr	r3, [pc, #412]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 0207 	bic.w	r2, r3, #7
 8005086:	4965      	ldr	r1, [pc, #404]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	4313      	orrs	r3, r2
 800508c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b63      	ldr	r3, [pc, #396]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0b8      	b.n	8005212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b59      	ldr	r3, [pc, #356]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a58      	ldr	r2, [pc, #352]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d0:	4b53      	ldr	r3, [pc, #332]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	4a52      	ldr	r2, [pc, #328]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050dc:	4b50      	ldr	r3, [pc, #320]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	494d      	ldr	r1, [pc, #308]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d040      	beq.n	800517c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d115      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e07f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511a:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e073      	b.n	8005212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512a:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e06b      	b.n	8005212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513a:	4b39      	ldr	r3, [pc, #228]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f023 0203 	bic.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4936      	ldr	r1, [pc, #216]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800514c:	f7fd fc8a 	bl	8002a64 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	e00a      	b.n	800516a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005154:	f7fd fc86 	bl	8002a64 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e053      	b.n	8005212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 020c 	and.w	r2, r3, #12
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	429a      	cmp	r2, r3
 800517a:	d1eb      	bne.n	8005154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800517c:	4b27      	ldr	r3, [pc, #156]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d210      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 0207 	bic.w	r2, r3, #7
 8005192:	4922      	ldr	r1, [pc, #136]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_RCC_ClockConfig+0x1c0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e032      	b.n	8005212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4916      	ldr	r1, [pc, #88]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	490e      	ldr	r1, [pc, #56]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ea:	f000 f821 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	490a      	ldr	r1, [pc, #40]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80051fc:	5ccb      	ldrb	r3, [r1, r3]
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <HAL_RCC_ClockConfig+0x1cc>)
 8005204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_ClockConfig+0x1d0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd fbe8 	bl	80029e0 <HAL_InitTick>

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40022000 	.word	0x40022000
 8005220:	40021000 	.word	0x40021000
 8005224:	0800b500 	.word	0x0800b500
 8005228:	20000000 	.word	0x20000000
 800522c:	20000004 	.word	0x20000004

08005230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	b099      	sub	sp, #100	; 0x64
 8005236:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8005238:	4b66      	ldr	r3, [pc, #408]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800523a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800523e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005240:	c407      	stmia	r4!, {r0, r1, r2}
 8005242:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005244:	4b64      	ldr	r3, [pc, #400]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005246:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800524a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800524c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	657b      	str	r3, [r7, #84]	; 0x54
 8005254:	2300      	movs	r3, #0
 8005256:	653b      	str	r3, [r7, #80]	; 0x50
 8005258:	2300      	movs	r3, #0
 800525a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800525c:	2300      	movs	r3, #0
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
 8005268:	2300      	movs	r3, #0
 800526a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800526c:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b04      	cmp	r3, #4
 800527a:	d002      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x52>
 800527c:	2b08      	cmp	r3, #8
 800527e:	d003      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x58>
 8005280:	e09f      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005282:	4b57      	ldr	r3, [pc, #348]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005284:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005286:	e09f      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528a:	0c9b      	lsrs	r3, r3, #18
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	3340      	adds	r3, #64	; 0x40
 8005292:	f107 0220 	add.w	r2, r7, #32
 8005296:	4413      	add	r3, r2
 8005298:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800529c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800529e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8084 	beq.w	80053b2 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80052aa:	4b4c      	ldr	r3, [pc, #304]	; (80053dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	3340      	adds	r3, #64	; 0x40
 80052b4:	f107 0220 	add.w	r2, r7, #32
 80052b8:	4413      	add	r3, r2
 80052ba:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80052be:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80052c0:	4b46      	ldr	r3, [pc, #280]	; (80053dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d060      	beq.n	800538e <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80052cc:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	3301      	adds	r3, #1
 80052d8:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80052da:	4b40      	ldr	r3, [pc, #256]	; (80053dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	3302      	adds	r3, #2
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80052e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ea:	2200      	movs	r2, #0
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	617a      	str	r2, [r7, #20]
 80052f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f2:	2200      	movs	r2, #0
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	61fa      	str	r2, [r7, #28]
 80052f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052fc:	4622      	mov	r2, r4
 80052fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005302:	4684      	mov	ip, r0
 8005304:	fb0c f202 	mul.w	r2, ip, r2
 8005308:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800530c:	468c      	mov	ip, r1
 800530e:	4618      	mov	r0, r3
 8005310:	4621      	mov	r1, r4
 8005312:	4603      	mov	r3, r0
 8005314:	fb03 f30c 	mul.w	r3, r3, ip
 8005318:	4413      	add	r3, r2
 800531a:	4602      	mov	r2, r0
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	fba2 8901 	umull	r8, r9, r2, r1
 8005322:	444b      	add	r3, r9
 8005324:	4699      	mov	r9, r3
 8005326:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005328:	fb03 f209 	mul.w	r2, r3, r9
 800532c:	2300      	movs	r3, #0
 800532e:	fb03 f308 	mul.w	r3, r3, r8
 8005332:	4413      	add	r3, r2
 8005334:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005336:	fba8 ab02 	umull	sl, fp, r8, r2
 800533a:	445b      	add	r3, fp
 800533c:	469b      	mov	fp, r3
 800533e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005340:	2200      	movs	r2, #0
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	60fa      	str	r2, [r7, #12]
 8005346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005348:	2200      	movs	r2, #0
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005352:	4622      	mov	r2, r4
 8005354:	e9d7 8900 	ldrd	r8, r9, [r7]
 8005358:	4641      	mov	r1, r8
 800535a:	fb01 f202 	mul.w	r2, r1, r2
 800535e:	46cc      	mov	ip, r9
 8005360:	4618      	mov	r0, r3
 8005362:	4621      	mov	r1, r4
 8005364:	4603      	mov	r3, r0
 8005366:	fb03 f30c 	mul.w	r3, r3, ip
 800536a:	4413      	add	r3, r2
 800536c:	4602      	mov	r2, r0
 800536e:	4641      	mov	r1, r8
 8005370:	fba2 5601 	umull	r5, r6, r2, r1
 8005374:	4433      	add	r3, r6
 8005376:	461e      	mov	r6, r3
 8005378:	462a      	mov	r2, r5
 800537a:	4633      	mov	r3, r6
 800537c:	4650      	mov	r0, sl
 800537e:	4659      	mov	r1, fp
 8005380:	f7fb fc68 	bl	8000c54 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4613      	mov	r3, r2
 800538a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800538c:	e007      	b.n	800539e <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005392:	fb03 f202 	mul.w	r2, r3, r2
 8005396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800539e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80053a2:	461a      	mov	r2, r3
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 80053aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b0:	e004      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	4a0b      	ldr	r2, [pc, #44]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 80053bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053be:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80053c0:	e002      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053c4:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80053c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3764      	adds	r7, #100	; 0x64
 80053ce:	46bd      	mov	sp, r7
 80053d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d4:	0800b4e0 	.word	0x0800b4e0
 80053d8:	0800b4f0 	.word	0x0800b4f0
 80053dc:	40021000 	.word	0x40021000
 80053e0:	00b71b00 	.word	0x00b71b00
 80053e4:	003d0900 	.word	0x003d0900
 80053e8:	007a1200 	.word	0x007a1200

080053ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f0:	4b02      	ldr	r3, [pc, #8]	; (80053fc <HAL_RCC_GetHCLKFreq+0x10>)
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr
 80053fc:	20000000 	.word	0x20000000

08005400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005404:	f7ff fff2 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000
 8005424:	0800b510 	.word	0x0800b510

08005428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800542c:	f7ff ffde 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0adb      	lsrs	r3, r3, #11
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <HAL_RCC_GetPCLK2Freq+0x24>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	0800b510 	.word	0x0800b510

08005450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <RCC_Delay+0x34>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <RCC_Delay+0x38>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	0a5b      	lsrs	r3, r3, #9
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800546c:	bf00      	nop
  }
  while (Delay --);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f9      	bne.n	800546c <RCC_Delay+0x1c>
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	20000000 	.word	0x20000000
 8005488:	10624dd3 	.word	0x10624dd3

0800548c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d07d      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80054ac:	2300      	movs	r3, #0
 80054ae:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b0:	4b8b      	ldr	r3, [pc, #556]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10d      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054bc:	4b88      	ldr	r3, [pc, #544]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	4a87      	ldr	r2, [pc, #540]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c6:	61d3      	str	r3, [r2, #28]
 80054c8:	4b85      	ldr	r3, [pc, #532]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054d4:	2301      	movs	r3, #1
 80054d6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b82      	ldr	r3, [pc, #520]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d118      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e4:	4b7f      	ldr	r3, [pc, #508]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a7e      	ldr	r2, [pc, #504]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f0:	f7fd fab8 	bl	8002a64 <HAL_GetTick>
 80054f4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	e008      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f8:	f7fd fab4 	bl	8002a64 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	; 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0e5      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	4b76      	ldr	r3, [pc, #472]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005516:	4b72      	ldr	r3, [pc, #456]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d02e      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	429a      	cmp	r2, r3
 8005532:	d027      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005534:	4b6a      	ldr	r3, [pc, #424]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800553e:	4b6a      	ldr	r3, [pc, #424]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005544:	4b68      	ldr	r3, [pc, #416]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800554a:	4a65      	ldr	r2, [pc, #404]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d014      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fd fa83 	bl	8002a64 <HAL_GetTick>
 800555e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fd fa7f 	bl	8002a64 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0ae      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005578:	4b59      	ldr	r3, [pc, #356]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ee      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005584:	4b56      	ldr	r3, [pc, #344]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4953      	ldr	r1, [pc, #332]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005592:	4313      	orrs	r3, r2
 8005594:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005596:	7efb      	ldrb	r3, [r7, #27]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d105      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800559c:	4b50      	ldr	r3, [pc, #320]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	4a4f      	ldr	r2, [pc, #316]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b4:	4b4a      	ldr	r3, [pc, #296]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4947      	ldr	r1, [pc, #284]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80055d2:	4b43      	ldr	r3, [pc, #268]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	4940      	ldr	r1, [pc, #256]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80055f0:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	4938      	ldr	r1, [pc, #224]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005602:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d105      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800560e:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d148      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005624:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d138      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800563c:	4b28      	ldr	r3, [pc, #160]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e042      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005650:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	4920      	ldr	r1, [pc, #128]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800565e:	4313      	orrs	r3, r2
 8005660:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005662:	4b1f      	ldr	r3, [pc, #124]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	491c      	ldr	r1, [pc, #112]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005670:	4313      	orrs	r3, r2
 8005672:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005674:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567a:	f7fd f9f3 	bl	8002a64 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005682:	f7fd f9ef 	bl	8002a64 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b64      	cmp	r3, #100	; 0x64
 800568e:	d901      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e020      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005694:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80056a0:	e009      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80056a2:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d001      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e00f      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	4904      	ldr	r1, [pc, #16]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42420440 	.word	0x42420440
 80056ec:	42420070 	.word	0x42420070

080056f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e041      	b.n	8005786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc fab2 	bl	8001c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f000 f9e2 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d001      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e03f      	b.n	8005828 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1b      	ldr	r2, [pc, #108]	; (8005834 <HAL_TIM_Base_Start_IT+0xa4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a17      	ldr	r2, [pc, #92]	; (8005838 <HAL_TIM_Base_Start_IT+0xa8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a16      	ldr	r2, [pc, #88]	; (800583c <HAL_TIM_Base_Start_IT+0xac>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <HAL_TIM_Base_Start_IT+0xb0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d111      	bne.n	8005816 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b06      	cmp	r3, #6
 8005802:	d010      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	e007      	b.n	8005826 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40000c00 	.word	0x40000c00

08005844 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	f241 1311 	movw	r3, #4369	; 0x1111
 8005866:	4013      	ands	r3, r2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10f      	bne.n	800588c <HAL_TIM_Base_Stop_IT+0x48>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a1a      	ldr	r2, [r3, #32]
 8005872:	f240 4344 	movw	r3, #1092	; 0x444
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d107      	bne.n	800588c <HAL_TIM_Base_Stop_IT+0x48>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d122      	bne.n	80058fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d11b      	bne.n	80058fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0202 	mvn.w	r2, #2
 80058cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8ed 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 80058e8:	e005      	b.n	80058f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f8e0 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8ef 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d122      	bne.n	8005950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d11b      	bne.n	8005950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0204 	mvn.w	r2, #4
 8005920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f8c3 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 800593c:	e005      	b.n	800594a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f8b6 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f8c5 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b08      	cmp	r3, #8
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b08      	cmp	r3, #8
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0208 	mvn.w	r2, #8
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2204      	movs	r2, #4
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f899 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f88c 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f89b 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d122      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d11b      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0210 	mvn.w	r2, #16
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2208      	movs	r2, #8
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f86f 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f862 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f871 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0201 	mvn.w	r2, #1
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fb fafc 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2e:	2b80      	cmp	r3, #128	; 0x80
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f92f 	bl	8005cae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	d10e      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f835 	bl	8005ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0220 	mvn.w	r2, #32
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8fa 	bl	8005c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2d      	ldr	r2, [pc, #180]	; (8005bc0 <TIM_Base_SetConfig+0xc8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <TIM_Base_SetConfig+0xcc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <TIM_Base_SetConfig+0xd0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0x38>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a28      	ldr	r2, [pc, #160]	; (8005bcc <TIM_Base_SetConfig+0xd4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <TIM_Base_SetConfig+0xc8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_Base_SetConfig+0x72>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b50:	d00b      	beq.n	8005b6a <TIM_Base_SetConfig+0x72>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <TIM_Base_SetConfig+0xcc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_Base_SetConfig+0x72>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <TIM_Base_SetConfig+0xd0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0x72>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <TIM_Base_SetConfig+0xd4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a07      	ldr	r2, [pc, #28]	; (8005bc0 <TIM_Base_SetConfig+0xc8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00

08005bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e04b      	b.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d00e      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10c      	bne.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00

08005c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr

08005cae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e03f      	b.n	8005d52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc f80c 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	; 0x24
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fde9 	bl	80068dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695a      	ldr	r2, [r3, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b08a      	sub	sp, #40	; 0x28
 8005d5e:	af02      	add	r7, sp, #8
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d17c      	bne.n	8005e74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_UART_Transmit+0x2c>
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e075      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Transmit+0x3e>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e06e      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2221      	movs	r2, #33	; 0x21
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dae:	f7fc fe59 	bl	8002a64 <HAL_GetTick>
 8005db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	88fa      	ldrh	r2, [r7, #6]
 8005dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc8:	d108      	bne.n	8005ddc <HAL_UART_Transmit+0x82>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	e003      	b.n	8005de4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dec:	e02a      	b.n	8005e44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2200      	movs	r2, #0
 8005df6:	2180      	movs	r1, #128	; 0x80
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fb21 	bl	8006440 <UART_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e036      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	3302      	adds	r3, #2
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e007      	b.n	8005e36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1cf      	bne.n	8005dee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 faf1 	bl	8006440 <UART_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e006      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d11d      	bne.n	8005ed4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_UART_Receive_IT+0x26>
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e016      	b.n	8005ed6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Receive_IT+0x38>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e00f      	b.n	8005ed6 <HAL_UART_Receive_IT+0x58>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fb02 	bl	80064d4 <UART_Start_Receive_IT>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	e000      	b.n	8005ed6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d11d      	bne.n	8005f34 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_UART_Receive_DMA+0x26>
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e016      	b.n	8005f36 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Receive_DMA+0x38>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e00f      	b.n	8005f36 <HAL_UART_Receive_DMA+0x58>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	461a      	mov	r2, r3
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fb0c 	bl	8006548 <UART_Start_Receive_DMA>
 8005f30:	4603      	mov	r3, r0
 8005f32:	e000      	b.n	8005f36 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f34:	2302      	movs	r3, #2
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10d      	bne.n	8005f92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_UART_IRQHandler+0x52>
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fbfc 	bl	8006788 <UART_Receive_IT>
      return;
 8005f90:	e17b      	b.n	800628a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80b1 	beq.w	80060fc <HAL_UART_IRQHandler+0x1bc>
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <HAL_UART_IRQHandler+0x70>
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80a6 	beq.w	80060fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x90>
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_UART_IRQHandler+0xb0>
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f043 0202 	orr.w	r2, r3, #2
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <HAL_UART_IRQHandler+0xd0>
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	f043 0204 	orr.w	r2, r3, #4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00f      	beq.n	800603a <HAL_UART_IRQHandler+0xfa>
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <HAL_UART_IRQHandler+0xee>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f043 0208 	orr.w	r2, r3, #8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 811e 	beq.w	8006280 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_UART_IRQHandler+0x11e>
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb95 	bl	8006788 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <HAL_UART_IRQHandler+0x146>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d031      	beq.n	80060ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fad7 	bl	800663a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d023      	beq.n	80060e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d013      	beq.n	80060da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	4a76      	ldr	r2, [pc, #472]	; (8006290 <HAL_UART_IRQHandler+0x350>)
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fd ff76 	bl	8003fb0 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d016      	beq.n	80060f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060d4:	4610      	mov	r0, r2
 80060d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00e      	b.n	80060f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8ec 	bl	80062b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e00a      	b.n	80060f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8e8 	bl	80062b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e006      	b.n	80060f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f8e4 	bl	80062b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060f6:	e0c3      	b.n	8006280 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	bf00      	nop
    return;
 80060fa:	e0c1      	b.n	8006280 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	2b01      	cmp	r3, #1
 8006102:	f040 80a1 	bne.w	8006248 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 809b 	beq.w	8006248 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8095 	beq.w	8006248 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d04e      	beq.n	80061e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800614c:	8a3b      	ldrh	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8098 	beq.w	8006284 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006158:	8a3a      	ldrh	r2, [r7, #16]
 800615a:	429a      	cmp	r2, r3
 800615c:	f080 8092 	bcs.w	8006284 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8a3a      	ldrh	r2, [r7, #16]
 8006164:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b20      	cmp	r3, #32
 800616e:	d02b      	beq.n	80061c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800617e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0210 	bic.w	r2, r2, #16
 80061bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fd feb9 	bl	8003f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f876 	bl	80062ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061de:	e051      	b.n	8006284 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d047      	beq.n	8006288 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80061f8:	8a7b      	ldrh	r3, [r7, #18]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d044      	beq.n	8006288 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800620c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0210 	bic.w	r2, r2, #16
 800623a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800623c:	8a7b      	ldrh	r3, [r7, #18]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f842 	bl	80062ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006246:	e01f      	b.n	8006288 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_UART_IRQHandler+0x324>
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fa2c 	bl	80066ba <UART_Transmit_IT>
    return;
 8006262:	e012      	b.n	800628a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00d      	beq.n	800628a <HAL_UART_IRQHandler+0x34a>
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d008      	beq.n	800628a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fa6d 	bl	8006758 <UART_EndTransmit_IT>
    return;
 800627e:	e004      	b.n	800628a <HAL_UART_IRQHandler+0x34a>
    return;
 8006280:	bf00      	nop
 8006282:	e002      	b.n	800628a <HAL_UART_IRQHandler+0x34a>
      return;
 8006284:	bf00      	nop
 8006286:	e000      	b.n	800628a <HAL_UART_IRQHandler+0x34a>
      return;
 8006288:	bf00      	nop
  }
}
 800628a:	3728      	adds	r7, #40	; 0x28
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	08006693 	.word	0x08006693

08006294 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr

080062a6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d12a      	bne.n	8006352 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006310:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006330:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0210 	bic.w	r2, r2, #16
 8006350:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	2b01      	cmp	r3, #1
 8006358:	d106      	bne.n	8006368 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff ffb2 	bl	80062ca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006366:	e002      	b.n	800636e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7fc fa4d 	bl	8002808 <HAL_UART_RxCpltCallback>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	2b01      	cmp	r3, #1
 800638a:	d108      	bne.n	800639e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	b29b      	uxth	r3, r3
 8006394:	4619      	mov	r1, r3
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff ff97 	bl	80062ca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800639c:	e002      	b.n	80063a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff ff81 	bl	80062a6 <HAL_UART_RxHalfCpltCallback>
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b21      	cmp	r3, #33	; 0x21
 80063de:	d108      	bne.n	80063f2 <UART_DMAError+0x46>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063ec:	68b8      	ldr	r0, [r7, #8]
 80063ee:	f000 f90f 	bl	8006610 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b22      	cmp	r3, #34	; 0x22
 8006412:	d108      	bne.n	8006426 <UART_DMAError+0x7a>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2200      	movs	r2, #0
 800641e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006420:	68b8      	ldr	r0, [r7, #8]
 8006422:	f000 f90a 	bl	800663a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f043 0210 	orr.w	r2, r3, #16
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006432:	68b8      	ldr	r0, [r7, #8]
 8006434:	f7ff ff40 	bl	80062b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006450:	e02c      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d028      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <UART_WaitOnFlagUntilTimeout+0x30>
 8006460:	f7fc fb00 	bl	8002a64 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	d21d      	bcs.n	80064ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800647e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0201 	bic.w	r2, r2, #1
 800648e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e00f      	b.n	80064cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d0c3      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2222      	movs	r2, #34	; 0x22
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006518:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0220 	orr.w	r2, r2, #32
 8006538:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr
	...

08006548 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2222      	movs	r2, #34	; 0x22
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	4a23      	ldr	r2, [pc, #140]	; (8006604 <UART_Start_Receive_DMA+0xbc>)
 8006576:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <UART_Start_Receive_DMA+0xc0>)
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	4a21      	ldr	r2, [pc, #132]	; (800660c <UART_Start_Receive_DMA+0xc4>)
 8006586:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	2200      	movs	r2, #0
 800658e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006590:	f107 0308 	add.w	r3, r7, #8
 8006594:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	f7fd fc68 	bl	8003e7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065ac:	2300      	movs	r3, #0
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	080062e1 	.word	0x080062e1
 8006608:	08006377 	.word	0x08006377
 800660c:	080063ad 	.word	0x080063ad

08006610 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006626:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006650:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	2b01      	cmp	r3, #1
 8006668:	d107      	bne.n	800667a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0210 	bic.w	r2, r2, #16
 8006678:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff fe03 	bl	80062b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b21      	cmp	r3, #33	; 0x21
 80066cc:	d13e      	bne.n	800674c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d6:	d114      	bne.n	8006702 <UART_Transmit_IT+0x48>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d110      	bne.n	8006702 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	1c9a      	adds	r2, r3, #2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]
 8006700:	e008      	b.n	8006714 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6211      	str	r1, [r2, #32]
 800670c:	781a      	ldrb	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29b      	uxth	r3, r3
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4619      	mov	r1, r3
 8006722:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10f      	bne.n	8006748 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006736:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006746:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fd8b 	bl	8006294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b22      	cmp	r3, #34	; 0x22
 800679a:	f040 8099 	bne.w	80068d0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a6:	d117      	bne.n	80067d8 <UART_Receive_IT+0x50>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d113      	bne.n	80067d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	1c9a      	adds	r2, r3, #2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28
 80067d6:	e026      	b.n	8006826 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ea:	d007      	beq.n	80067fc <UART_Receive_IT+0x74>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <UART_Receive_IT+0x82>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e008      	b.n	800681c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006816:	b2da      	uxtb	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4619      	mov	r1, r3
 8006834:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006836:	2b00      	cmp	r3, #0
 8006838:	d148      	bne.n	80068cc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0220 	bic.w	r2, r2, #32
 8006848:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	2b01      	cmp	r3, #1
 8006878:	d123      	bne.n	80068c2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0210 	bic.w	r2, r2, #16
 800688e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0310 	and.w	r3, r3, #16
 800689a:	2b10      	cmp	r3, #16
 800689c:	d10a      	bne.n	80068b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fd05 	bl	80062ca <HAL_UARTEx_RxEventCallback>
 80068c0:	e002      	b.n	80068c8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fb ffa0 	bl	8002808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	e002      	b.n	80068d2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e000      	b.n	80068d2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006916:	f023 030c 	bic.w	r3, r3, #12
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	430b      	orrs	r3, r1
 8006922:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2c      	ldr	r2, [pc, #176]	; (80069f0 <UART_SetConfig+0x114>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d103      	bne.n	800694c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006944:	f7fe fd70 	bl	8005428 <HAL_RCC_GetPCLK2Freq>
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	e002      	b.n	8006952 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fe fd58 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 8006950:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009a      	lsls	r2, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	4a22      	ldr	r2, [pc, #136]	; (80069f4 <UART_SetConfig+0x118>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	0119      	lsls	r1, r3, #4
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009a      	lsls	r2, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	fbb2 f2f3 	udiv	r2, r2, r3
 8006988:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <UART_SetConfig+0x118>)
 800698a:	fba3 0302 	umull	r0, r3, r3, r2
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	2064      	movs	r0, #100	; 0x64
 8006992:	fb00 f303 	mul.w	r3, r0, r3
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	3332      	adds	r3, #50	; 0x32
 800699c:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <UART_SetConfig+0x118>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a8:	4419      	add	r1, r3
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009a      	lsls	r2, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <UART_SetConfig+0x118>)
 80069c2:	fba3 0302 	umull	r0, r3, r3, r2
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	2064      	movs	r0, #100	; 0x64
 80069ca:	fb00 f303 	mul.w	r3, r0, r3
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	3332      	adds	r3, #50	; 0x32
 80069d4:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <UART_SetConfig+0x118>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	440a      	add	r2, r1
 80069e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40013800 	.word	0x40013800
 80069f4:	51eb851f 	.word	0x51eb851f

080069f8 <__errno>:
 80069f8:	4b01      	ldr	r3, [pc, #4]	; (8006a00 <__errno+0x8>)
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	2000000c 	.word	0x2000000c

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	2600      	movs	r6, #0
 8006a08:	4d0c      	ldr	r5, [pc, #48]	; (8006a3c <__libc_init_array+0x38>)
 8006a0a:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0c:	1b64      	subs	r4, r4, r5
 8006a0e:	10a4      	asrs	r4, r4, #2
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	f004 fc52 	bl	800b2bc <_init>
 8006a18:	2600      	movs	r6, #0
 8006a1a:	4d0a      	ldr	r5, [pc, #40]	; (8006a44 <__libc_init_array+0x40>)
 8006a1c:	4c0a      	ldr	r4, [pc, #40]	; (8006a48 <__libc_init_array+0x44>)
 8006a1e:	1b64      	subs	r4, r4, r5
 8006a20:	10a4      	asrs	r4, r4, #2
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	0800b9c4 	.word	0x0800b9c4
 8006a40:	0800b9c4 	.word	0x0800b9c4
 8006a44:	0800b9c4 	.word	0x0800b9c4
 8006a48:	0800b9c8 	.word	0x0800b9c8

08006a4c <memset>:
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4402      	add	r2, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <__cvt>:
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a62:	461f      	mov	r7, r3
 8006a64:	bfbb      	ittet	lt
 8006a66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	461f      	movlt	r7, r3
 8006a6c:	2300      	movge	r3, #0
 8006a6e:	232d      	movlt	r3, #45	; 0x2d
 8006a70:	b088      	sub	sp, #32
 8006a72:	4614      	mov	r4, r2
 8006a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a78:	7013      	strb	r3, [r2, #0]
 8006a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a80:	f023 0820 	bic.w	r8, r3, #32
 8006a84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a88:	d005      	beq.n	8006a96 <__cvt+0x3a>
 8006a8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a8e:	d100      	bne.n	8006a92 <__cvt+0x36>
 8006a90:	3501      	adds	r5, #1
 8006a92:	2302      	movs	r3, #2
 8006a94:	e000      	b.n	8006a98 <__cvt+0x3c>
 8006a96:	2303      	movs	r3, #3
 8006a98:	aa07      	add	r2, sp, #28
 8006a9a:	9204      	str	r2, [sp, #16]
 8006a9c:	aa06      	add	r2, sp, #24
 8006a9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006aa2:	e9cd 3500 	strd	r3, r5, [sp]
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	f001 fd85 	bl	80085b8 <_dtoa_r>
 8006aae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	d102      	bne.n	8006abc <__cvt+0x60>
 8006ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ab8:	07db      	lsls	r3, r3, #31
 8006aba:	d522      	bpl.n	8006b02 <__cvt+0xa6>
 8006abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ac0:	eb06 0905 	add.w	r9, r6, r5
 8006ac4:	d110      	bne.n	8006ae8 <__cvt+0x8c>
 8006ac6:	7833      	ldrb	r3, [r6, #0]
 8006ac8:	2b30      	cmp	r3, #48	; 0x30
 8006aca:	d10a      	bne.n	8006ae2 <__cvt+0x86>
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7f9 ffde 	bl	8000a94 <__aeabi_dcmpeq>
 8006ad8:	b918      	cbnz	r0, 8006ae2 <__cvt+0x86>
 8006ada:	f1c5 0501 	rsb	r5, r5, #1
 8006ade:	f8ca 5000 	str.w	r5, [sl]
 8006ae2:	f8da 3000 	ldr.w	r3, [sl]
 8006ae6:	4499      	add	r9, r3
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2300      	movs	r3, #0
 8006aec:	4620      	mov	r0, r4
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 ffd0 	bl	8000a94 <__aeabi_dcmpeq>
 8006af4:	b108      	cbz	r0, 8006afa <__cvt+0x9e>
 8006af6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006afa:	2230      	movs	r2, #48	; 0x30
 8006afc:	9b07      	ldr	r3, [sp, #28]
 8006afe:	454b      	cmp	r3, r9
 8006b00:	d307      	bcc.n	8006b12 <__cvt+0xb6>
 8006b02:	4630      	mov	r0, r6
 8006b04:	9b07      	ldr	r3, [sp, #28]
 8006b06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b08:	1b9b      	subs	r3, r3, r6
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	b008      	add	sp, #32
 8006b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	9107      	str	r1, [sp, #28]
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e7f0      	b.n	8006afc <__cvt+0xa0>

08006b1a <__exponent>:
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	f803 2b02 	strb.w	r2, [r3], #2
 8006b24:	bfb6      	itet	lt
 8006b26:	222d      	movlt	r2, #45	; 0x2d
 8006b28:	222b      	movge	r2, #43	; 0x2b
 8006b2a:	4249      	neglt	r1, r1
 8006b2c:	2909      	cmp	r1, #9
 8006b2e:	7042      	strb	r2, [r0, #1]
 8006b30:	dd2b      	ble.n	8006b8a <__exponent+0x70>
 8006b32:	f10d 0407 	add.w	r4, sp, #7
 8006b36:	46a4      	mov	ip, r4
 8006b38:	270a      	movs	r7, #10
 8006b3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b3e:	460a      	mov	r2, r1
 8006b40:	46a6      	mov	lr, r4
 8006b42:	fb07 1516 	mls	r5, r7, r6, r1
 8006b46:	2a63      	cmp	r2, #99	; 0x63
 8006b48:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b56:	dcf0      	bgt.n	8006b3a <__exponent+0x20>
 8006b58:	3130      	adds	r1, #48	; 0x30
 8006b5a:	f1ae 0502 	sub.w	r5, lr, #2
 8006b5e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b62:	4629      	mov	r1, r5
 8006b64:	1c44      	adds	r4, r0, #1
 8006b66:	4561      	cmp	r1, ip
 8006b68:	d30a      	bcc.n	8006b80 <__exponent+0x66>
 8006b6a:	f10d 0209 	add.w	r2, sp, #9
 8006b6e:	eba2 020e 	sub.w	r2, r2, lr
 8006b72:	4565      	cmp	r5, ip
 8006b74:	bf88      	it	hi
 8006b76:	2200      	movhi	r2, #0
 8006b78:	4413      	add	r3, r2
 8006b7a:	1a18      	subs	r0, r3, r0
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b84:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b88:	e7ed      	b.n	8006b66 <__exponent+0x4c>
 8006b8a:	2330      	movs	r3, #48	; 0x30
 8006b8c:	3130      	adds	r1, #48	; 0x30
 8006b8e:	7083      	strb	r3, [r0, #2]
 8006b90:	70c1      	strb	r1, [r0, #3]
 8006b92:	1d03      	adds	r3, r0, #4
 8006b94:	e7f1      	b.n	8006b7a <__exponent+0x60>
	...

08006b98 <_printf_float>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	b091      	sub	sp, #68	; 0x44
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	4605      	mov	r5, r0
 8006baa:	f002 fe59 	bl	8009860 <_localeconv_r>
 8006bae:	6803      	ldr	r3, [r0, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb4:	f7f9 fb42 	bl	800023c <strlen>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	930e      	str	r3, [sp, #56]	; 0x38
 8006bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc0:	900a      	str	r0, [sp, #40]	; 0x28
 8006bc2:	3307      	adds	r3, #7
 8006bc4:	f023 0307 	bic.w	r3, r3, #7
 8006bc8:	f103 0208 	add.w	r2, r3, #8
 8006bcc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8006bd4:	f8c8 2000 	str.w	r2, [r8]
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006be0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006be4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bea:	f04f 32ff 	mov.w	r2, #4294967295
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4b9c      	ldr	r3, [pc, #624]	; (8006e64 <_printf_float+0x2cc>)
 8006bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bf4:	f7f9 ff80 	bl	8000af8 <__aeabi_dcmpun>
 8006bf8:	bb70      	cbnz	r0, 8006c58 <_printf_float+0xc0>
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4b98      	ldr	r3, [pc, #608]	; (8006e64 <_printf_float+0x2cc>)
 8006c02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c04:	f7f9 ff5a 	bl	8000abc <__aeabi_dcmple>
 8006c08:	bb30      	cbnz	r0, 8006c58 <_printf_float+0xc0>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4640      	mov	r0, r8
 8006c10:	4651      	mov	r1, sl
 8006c12:	f7f9 ff49 	bl	8000aa8 <__aeabi_dcmplt>
 8006c16:	b110      	cbz	r0, 8006c1e <_printf_float+0x86>
 8006c18:	232d      	movs	r3, #45	; 0x2d
 8006c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1e:	4b92      	ldr	r3, [pc, #584]	; (8006e68 <_printf_float+0x2d0>)
 8006c20:	4892      	ldr	r0, [pc, #584]	; (8006e6c <_printf_float+0x2d4>)
 8006c22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c26:	bf94      	ite	ls
 8006c28:	4698      	movls	r8, r3
 8006c2a:	4680      	movhi	r8, r0
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	f04f 0a00 	mov.w	sl, #0
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	f02b 0304 	bic.w	r3, fp, #4
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	9700      	str	r7, [sp, #0]
 8006c42:	aa0f      	add	r2, sp, #60	; 0x3c
 8006c44:	f000 f9d4 	bl	8006ff0 <_printf_common>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f040 8090 	bne.w	8006d6e <_printf_float+0x1d6>
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c52:	b011      	add	sp, #68	; 0x44
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	4642      	mov	r2, r8
 8006c5a:	4653      	mov	r3, sl
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4651      	mov	r1, sl
 8006c60:	f7f9 ff4a 	bl	8000af8 <__aeabi_dcmpun>
 8006c64:	b148      	cbz	r0, 8006c7a <_printf_float+0xe2>
 8006c66:	f1ba 0f00 	cmp.w	sl, #0
 8006c6a:	bfb8      	it	lt
 8006c6c:	232d      	movlt	r3, #45	; 0x2d
 8006c6e:	4880      	ldr	r0, [pc, #512]	; (8006e70 <_printf_float+0x2d8>)
 8006c70:	bfb8      	it	lt
 8006c72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c76:	4b7f      	ldr	r3, [pc, #508]	; (8006e74 <_printf_float+0x2dc>)
 8006c78:	e7d3      	b.n	8006c22 <_printf_float+0x8a>
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	d142      	bne.n	8006d0a <_printf_float+0x172>
 8006c84:	2306      	movs	r3, #6
 8006c86:	6063      	str	r3, [r4, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	9206      	str	r2, [sp, #24]
 8006c8c:	aa0e      	add	r2, sp, #56	; 0x38
 8006c8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c92:	aa0d      	add	r2, sp, #52	; 0x34
 8006c94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c98:	9203      	str	r2, [sp, #12]
 8006c9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	6863      	ldr	r3, [r4, #4]
 8006ca6:	4642      	mov	r2, r8
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	4628      	mov	r0, r5
 8006cac:	4653      	mov	r3, sl
 8006cae:	910b      	str	r1, [sp, #44]	; 0x2c
 8006cb0:	f7ff fed4 	bl	8006a5c <__cvt>
 8006cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	2947      	cmp	r1, #71	; 0x47
 8006cba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cbc:	d108      	bne.n	8006cd0 <_printf_float+0x138>
 8006cbe:	1cc8      	adds	r0, r1, #3
 8006cc0:	db02      	blt.n	8006cc8 <_printf_float+0x130>
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	dd40      	ble.n	8006d4a <_printf_float+0x1b2>
 8006cc8:	f1a9 0902 	sub.w	r9, r9, #2
 8006ccc:	fa5f f989 	uxtb.w	r9, r9
 8006cd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cd4:	d81f      	bhi.n	8006d16 <_printf_float+0x17e>
 8006cd6:	464a      	mov	r2, r9
 8006cd8:	3901      	subs	r1, #1
 8006cda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cde:	910d      	str	r1, [sp, #52]	; 0x34
 8006ce0:	f7ff ff1b 	bl	8006b1a <__exponent>
 8006ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	1813      	adds	r3, r2, r0
 8006cea:	2a01      	cmp	r2, #1
 8006cec:	6123      	str	r3, [r4, #16]
 8006cee:	dc02      	bgt.n	8006cf6 <_printf_float+0x15e>
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	07d2      	lsls	r2, r2, #31
 8006cf4:	d501      	bpl.n	8006cfa <_printf_float+0x162>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d09b      	beq.n	8006c3a <_printf_float+0xa2>
 8006d02:	232d      	movs	r3, #45	; 0x2d
 8006d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d08:	e797      	b.n	8006c3a <_printf_float+0xa2>
 8006d0a:	2947      	cmp	r1, #71	; 0x47
 8006d0c:	d1bc      	bne.n	8006c88 <_printf_float+0xf0>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1ba      	bne.n	8006c88 <_printf_float+0xf0>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e7b7      	b.n	8006c86 <_printf_float+0xee>
 8006d16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d1a:	d118      	bne.n	8006d4e <_printf_float+0x1b6>
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	dd0b      	ble.n	8006d3a <_printf_float+0x1a2>
 8006d22:	6121      	str	r1, [r4, #16]
 8006d24:	b913      	cbnz	r3, 8006d2c <_printf_float+0x194>
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	07d0      	lsls	r0, r2, #31
 8006d2a:	d502      	bpl.n	8006d32 <_printf_float+0x19a>
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	440b      	add	r3, r1
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	f04f 0a00 	mov.w	sl, #0
 8006d36:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d38:	e7df      	b.n	8006cfa <_printf_float+0x162>
 8006d3a:	b913      	cbnz	r3, 8006d42 <_printf_float+0x1aa>
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	07d2      	lsls	r2, r2, #31
 8006d40:	d501      	bpl.n	8006d46 <_printf_float+0x1ae>
 8006d42:	3302      	adds	r3, #2
 8006d44:	e7f4      	b.n	8006d30 <_printf_float+0x198>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e7f2      	b.n	8006d30 <_printf_float+0x198>
 8006d4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d50:	4299      	cmp	r1, r3
 8006d52:	db05      	blt.n	8006d60 <_printf_float+0x1c8>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	6121      	str	r1, [r4, #16]
 8006d58:	07d8      	lsls	r0, r3, #31
 8006d5a:	d5ea      	bpl.n	8006d32 <_printf_float+0x19a>
 8006d5c:	1c4b      	adds	r3, r1, #1
 8006d5e:	e7e7      	b.n	8006d30 <_printf_float+0x198>
 8006d60:	2900      	cmp	r1, #0
 8006d62:	bfcc      	ite	gt
 8006d64:	2201      	movgt	r2, #1
 8006d66:	f1c1 0202 	rsble	r2, r1, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	e7e0      	b.n	8006d30 <_printf_float+0x198>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	055a      	lsls	r2, r3, #21
 8006d72:	d407      	bmi.n	8006d84 <_printf_float+0x1ec>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	4642      	mov	r2, r8
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d12b      	bne.n	8006dda <_printf_float+0x242>
 8006d82:	e764      	b.n	8006c4e <_printf_float+0xb6>
 8006d84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d88:	f240 80dd 	bls.w	8006f46 <_printf_float+0x3ae>
 8006d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d90:	2200      	movs	r2, #0
 8006d92:	2300      	movs	r3, #0
 8006d94:	f7f9 fe7e 	bl	8000a94 <__aeabi_dcmpeq>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d033      	beq.n	8006e04 <_printf_float+0x26c>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	4a35      	ldr	r2, [pc, #212]	; (8006e78 <_printf_float+0x2e0>)
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	f43f af51 	beq.w	8006c4e <_printf_float+0xb6>
 8006dac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006db0:	429a      	cmp	r2, r3
 8006db2:	db02      	blt.n	8006dba <_printf_float+0x222>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	07d8      	lsls	r0, r3, #31
 8006db8:	d50f      	bpl.n	8006dda <_printf_float+0x242>
 8006dba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b8      	blx	r7
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f43f af42 	beq.w	8006c4e <_printf_float+0xb6>
 8006dca:	f04f 0800 	mov.w	r8, #0
 8006dce:	f104 091a 	add.w	r9, r4, #26
 8006dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	4543      	cmp	r3, r8
 8006dd8:	dc09      	bgt.n	8006dee <_printf_float+0x256>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	079b      	lsls	r3, r3, #30
 8006dde:	f100 8102 	bmi.w	8006fe6 <_printf_float+0x44e>
 8006de2:	68e0      	ldr	r0, [r4, #12]
 8006de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006de6:	4298      	cmp	r0, r3
 8006de8:	bfb8      	it	lt
 8006dea:	4618      	movlt	r0, r3
 8006dec:	e731      	b.n	8006c52 <_printf_float+0xba>
 8006dee:	2301      	movs	r3, #1
 8006df0:	464a      	mov	r2, r9
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f af28 	beq.w	8006c4e <_printf_float+0xb6>
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	e7e6      	b.n	8006dd2 <_printf_float+0x23a>
 8006e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc38      	bgt.n	8006e7c <_printf_float+0x2e4>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	4a19      	ldr	r2, [pc, #100]	; (8006e78 <_printf_float+0x2e0>)
 8006e12:	47b8      	blx	r7
 8006e14:	3001      	adds	r0, #1
 8006e16:	f43f af1a 	beq.w	8006c4e <_printf_float+0xb6>
 8006e1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	d102      	bne.n	8006e28 <_printf_float+0x290>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	07d9      	lsls	r1, r3, #31
 8006e26:	d5d8      	bpl.n	8006dda <_printf_float+0x242>
 8006e28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b8      	blx	r7
 8006e32:	3001      	adds	r0, #1
 8006e34:	f43f af0b 	beq.w	8006c4e <_printf_float+0xb6>
 8006e38:	f04f 0900 	mov.w	r9, #0
 8006e3c:	f104 0a1a 	add.w	sl, r4, #26
 8006e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e42:	425b      	negs	r3, r3
 8006e44:	454b      	cmp	r3, r9
 8006e46:	dc01      	bgt.n	8006e4c <_printf_float+0x2b4>
 8006e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e4a:	e794      	b.n	8006d76 <_printf_float+0x1de>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4652      	mov	r2, sl
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f aef9 	beq.w	8006c4e <_printf_float+0xb6>
 8006e5c:	f109 0901 	add.w	r9, r9, #1
 8006e60:	e7ee      	b.n	8006e40 <_printf_float+0x2a8>
 8006e62:	bf00      	nop
 8006e64:	7fefffff 	.word	0x7fefffff
 8006e68:	0800b51c 	.word	0x0800b51c
 8006e6c:	0800b520 	.word	0x0800b520
 8006e70:	0800b528 	.word	0x0800b528
 8006e74:	0800b524 	.word	0x0800b524
 8006e78:	0800b52c 	.word	0x0800b52c
 8006e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e80:	429a      	cmp	r2, r3
 8006e82:	bfa8      	it	ge
 8006e84:	461a      	movge	r2, r3
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	4691      	mov	r9, r2
 8006e8a:	dc37      	bgt.n	8006efc <_printf_float+0x364>
 8006e8c:	f04f 0b00 	mov.w	fp, #0
 8006e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e94:	f104 021a 	add.w	r2, r4, #26
 8006e98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e9c:	ebaa 0309 	sub.w	r3, sl, r9
 8006ea0:	455b      	cmp	r3, fp
 8006ea2:	dc33      	bgt.n	8006f0c <_printf_float+0x374>
 8006ea4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	db3b      	blt.n	8006f24 <_printf_float+0x38c>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	07da      	lsls	r2, r3, #31
 8006eb0:	d438      	bmi.n	8006f24 <_printf_float+0x38c>
 8006eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006eb6:	eba3 020a 	sub.w	r2, r3, sl
 8006eba:	eba3 0901 	sub.w	r9, r3, r1
 8006ebe:	4591      	cmp	r9, r2
 8006ec0:	bfa8      	it	ge
 8006ec2:	4691      	movge	r9, r2
 8006ec4:	f1b9 0f00 	cmp.w	r9, #0
 8006ec8:	dc34      	bgt.n	8006f34 <_printf_float+0x39c>
 8006eca:	f04f 0800 	mov.w	r8, #0
 8006ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ed2:	f104 0a1a 	add.w	sl, r4, #26
 8006ed6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006eda:	1a9b      	subs	r3, r3, r2
 8006edc:	eba3 0309 	sub.w	r3, r3, r9
 8006ee0:	4543      	cmp	r3, r8
 8006ee2:	f77f af7a 	ble.w	8006dda <_printf_float+0x242>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4652      	mov	r2, sl
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f43f aeac 	beq.w	8006c4e <_printf_float+0xb6>
 8006ef6:	f108 0801 	add.w	r8, r8, #1
 8006efa:	e7ec      	b.n	8006ed6 <_printf_float+0x33e>
 8006efc:	4613      	mov	r3, r2
 8006efe:	4631      	mov	r1, r6
 8006f00:	4642      	mov	r2, r8
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	d1c0      	bne.n	8006e8c <_printf_float+0x2f4>
 8006f0a:	e6a0      	b.n	8006c4e <_printf_float+0xb6>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f ae99 	beq.w	8006c4e <_printf_float+0xb6>
 8006f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f1e:	f10b 0b01 	add.w	fp, fp, #1
 8006f22:	e7b9      	b.n	8006e98 <_printf_float+0x300>
 8006f24:	4631      	mov	r1, r6
 8006f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1bf      	bne.n	8006eb2 <_printf_float+0x31a>
 8006f32:	e68c      	b.n	8006c4e <_printf_float+0xb6>
 8006f34:	464b      	mov	r3, r9
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	eb08 020a 	add.w	r2, r8, sl
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1c2      	bne.n	8006eca <_printf_float+0x332>
 8006f44:	e683      	b.n	8006c4e <_printf_float+0xb6>
 8006f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f48:	2a01      	cmp	r2, #1
 8006f4a:	dc01      	bgt.n	8006f50 <_printf_float+0x3b8>
 8006f4c:	07db      	lsls	r3, r3, #31
 8006f4e:	d537      	bpl.n	8006fc0 <_printf_float+0x428>
 8006f50:	2301      	movs	r3, #1
 8006f52:	4642      	mov	r2, r8
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae77 	beq.w	8006c4e <_printf_float+0xb6>
 8006f60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f ae6f 	beq.w	8006c4e <_printf_float+0xb6>
 8006f70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f74:	2200      	movs	r2, #0
 8006f76:	2300      	movs	r3, #0
 8006f78:	f7f9 fd8c 	bl	8000a94 <__aeabi_dcmpeq>
 8006f7c:	b9d8      	cbnz	r0, 8006fb6 <_printf_float+0x41e>
 8006f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f80:	f108 0201 	add.w	r2, r8, #1
 8006f84:	3b01      	subs	r3, #1
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d10e      	bne.n	8006fae <_printf_float+0x416>
 8006f90:	e65d      	b.n	8006c4e <_printf_float+0xb6>
 8006f92:	2301      	movs	r3, #1
 8006f94:	464a      	mov	r2, r9
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f ae56 	beq.w	8006c4e <_printf_float+0xb6>
 8006fa2:	f108 0801 	add.w	r8, r8, #1
 8006fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	4543      	cmp	r3, r8
 8006fac:	dcf1      	bgt.n	8006f92 <_printf_float+0x3fa>
 8006fae:	4653      	mov	r3, sl
 8006fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fb4:	e6e0      	b.n	8006d78 <_printf_float+0x1e0>
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	f104 091a 	add.w	r9, r4, #26
 8006fbe:	e7f2      	b.n	8006fa6 <_printf_float+0x40e>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	e7df      	b.n	8006f86 <_printf_float+0x3ee>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	464a      	mov	r2, r9
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f ae3c 	beq.w	8006c4e <_printf_float+0xb6>
 8006fd6:	f108 0801 	add.w	r8, r8, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	dcf0      	bgt.n	8006fc6 <_printf_float+0x42e>
 8006fe4:	e6fd      	b.n	8006de2 <_printf_float+0x24a>
 8006fe6:	f04f 0800 	mov.w	r8, #0
 8006fea:	f104 0919 	add.w	r9, r4, #25
 8006fee:	e7f4      	b.n	8006fda <_printf_float+0x442>

08006ff0 <_printf_common>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	4699      	mov	r9, r3
 8006ff8:	688a      	ldr	r2, [r1, #8]
 8006ffa:	690b      	ldr	r3, [r1, #16]
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	4293      	cmp	r3, r2
 8007000:	bfb8      	it	lt
 8007002:	4613      	movlt	r3, r2
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800700a:	460c      	mov	r4, r1
 800700c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007010:	b10a      	cbz	r2, 8007016 <_printf_common+0x26>
 8007012:	3301      	adds	r3, #1
 8007014:	6033      	str	r3, [r6, #0]
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	0699      	lsls	r1, r3, #26
 800701a:	bf42      	ittt	mi
 800701c:	6833      	ldrmi	r3, [r6, #0]
 800701e:	3302      	addmi	r3, #2
 8007020:	6033      	strmi	r3, [r6, #0]
 8007022:	6825      	ldr	r5, [r4, #0]
 8007024:	f015 0506 	ands.w	r5, r5, #6
 8007028:	d106      	bne.n	8007038 <_printf_common+0x48>
 800702a:	f104 0a19 	add.w	sl, r4, #25
 800702e:	68e3      	ldr	r3, [r4, #12]
 8007030:	6832      	ldr	r2, [r6, #0]
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	42ab      	cmp	r3, r5
 8007036:	dc28      	bgt.n	800708a <_printf_common+0x9a>
 8007038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800703c:	1e13      	subs	r3, r2, #0
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	bf18      	it	ne
 8007042:	2301      	movne	r3, #1
 8007044:	0692      	lsls	r2, r2, #26
 8007046:	d42d      	bmi.n	80070a4 <_printf_common+0xb4>
 8007048:	4649      	mov	r1, r9
 800704a:	4638      	mov	r0, r7
 800704c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007050:	47c0      	blx	r8
 8007052:	3001      	adds	r0, #1
 8007054:	d020      	beq.n	8007098 <_printf_common+0xa8>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	68e5      	ldr	r5, [r4, #12]
 800705a:	f003 0306 	and.w	r3, r3, #6
 800705e:	2b04      	cmp	r3, #4
 8007060:	bf18      	it	ne
 8007062:	2500      	movne	r5, #0
 8007064:	6832      	ldr	r2, [r6, #0]
 8007066:	f04f 0600 	mov.w	r6, #0
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	bf08      	it	eq
 800706e:	1aad      	subeq	r5, r5, r2
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	bf08      	it	eq
 8007074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007078:	4293      	cmp	r3, r2
 800707a:	bfc4      	itt	gt
 800707c:	1a9b      	subgt	r3, r3, r2
 800707e:	18ed      	addgt	r5, r5, r3
 8007080:	341a      	adds	r4, #26
 8007082:	42b5      	cmp	r5, r6
 8007084:	d11a      	bne.n	80070bc <_printf_common+0xcc>
 8007086:	2000      	movs	r0, #0
 8007088:	e008      	b.n	800709c <_printf_common+0xac>
 800708a:	2301      	movs	r3, #1
 800708c:	4652      	mov	r2, sl
 800708e:	4649      	mov	r1, r9
 8007090:	4638      	mov	r0, r7
 8007092:	47c0      	blx	r8
 8007094:	3001      	adds	r0, #1
 8007096:	d103      	bne.n	80070a0 <_printf_common+0xb0>
 8007098:	f04f 30ff 	mov.w	r0, #4294967295
 800709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a0:	3501      	adds	r5, #1
 80070a2:	e7c4      	b.n	800702e <_printf_common+0x3e>
 80070a4:	2030      	movs	r0, #48	; 0x30
 80070a6:	18e1      	adds	r1, r4, r3
 80070a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070b2:	4422      	add	r2, r4
 80070b4:	3302      	adds	r3, #2
 80070b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070ba:	e7c5      	b.n	8007048 <_printf_common+0x58>
 80070bc:	2301      	movs	r3, #1
 80070be:	4622      	mov	r2, r4
 80070c0:	4649      	mov	r1, r9
 80070c2:	4638      	mov	r0, r7
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d0e6      	beq.n	8007098 <_printf_common+0xa8>
 80070ca:	3601      	adds	r6, #1
 80070cc:	e7d9      	b.n	8007082 <_printf_common+0x92>
	...

080070d0 <_printf_i>:
 80070d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	7e0f      	ldrb	r7, [r1, #24]
 80070d6:	4691      	mov	r9, r2
 80070d8:	2f78      	cmp	r7, #120	; 0x78
 80070da:	4680      	mov	r8, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	469a      	mov	sl, r3
 80070e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070e6:	d807      	bhi.n	80070f8 <_printf_i+0x28>
 80070e8:	2f62      	cmp	r7, #98	; 0x62
 80070ea:	d80a      	bhi.n	8007102 <_printf_i+0x32>
 80070ec:	2f00      	cmp	r7, #0
 80070ee:	f000 80d9 	beq.w	80072a4 <_printf_i+0x1d4>
 80070f2:	2f58      	cmp	r7, #88	; 0x58
 80070f4:	f000 80a4 	beq.w	8007240 <_printf_i+0x170>
 80070f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007100:	e03a      	b.n	8007178 <_printf_i+0xa8>
 8007102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007106:	2b15      	cmp	r3, #21
 8007108:	d8f6      	bhi.n	80070f8 <_printf_i+0x28>
 800710a:	a101      	add	r1, pc, #4	; (adr r1, 8007110 <_printf_i+0x40>)
 800710c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007110:	08007169 	.word	0x08007169
 8007114:	0800717d 	.word	0x0800717d
 8007118:	080070f9 	.word	0x080070f9
 800711c:	080070f9 	.word	0x080070f9
 8007120:	080070f9 	.word	0x080070f9
 8007124:	080070f9 	.word	0x080070f9
 8007128:	0800717d 	.word	0x0800717d
 800712c:	080070f9 	.word	0x080070f9
 8007130:	080070f9 	.word	0x080070f9
 8007134:	080070f9 	.word	0x080070f9
 8007138:	080070f9 	.word	0x080070f9
 800713c:	0800728b 	.word	0x0800728b
 8007140:	080071ad 	.word	0x080071ad
 8007144:	0800726d 	.word	0x0800726d
 8007148:	080070f9 	.word	0x080070f9
 800714c:	080070f9 	.word	0x080070f9
 8007150:	080072ad 	.word	0x080072ad
 8007154:	080070f9 	.word	0x080070f9
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080070f9 	.word	0x080070f9
 8007160:	080070f9 	.word	0x080070f9
 8007164:	08007275 	.word	0x08007275
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	1d1a      	adds	r2, r3, #4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	602a      	str	r2, [r5, #0]
 8007170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007178:	2301      	movs	r3, #1
 800717a:	e0a4      	b.n	80072c6 <_printf_i+0x1f6>
 800717c:	6820      	ldr	r0, [r4, #0]
 800717e:	6829      	ldr	r1, [r5, #0]
 8007180:	0606      	lsls	r6, r0, #24
 8007182:	f101 0304 	add.w	r3, r1, #4
 8007186:	d50a      	bpl.n	800719e <_printf_i+0xce>
 8007188:	680e      	ldr	r6, [r1, #0]
 800718a:	602b      	str	r3, [r5, #0]
 800718c:	2e00      	cmp	r6, #0
 800718e:	da03      	bge.n	8007198 <_printf_i+0xc8>
 8007190:	232d      	movs	r3, #45	; 0x2d
 8007192:	4276      	negs	r6, r6
 8007194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007198:	230a      	movs	r3, #10
 800719a:	485e      	ldr	r0, [pc, #376]	; (8007314 <_printf_i+0x244>)
 800719c:	e019      	b.n	80071d2 <_printf_i+0x102>
 800719e:	680e      	ldr	r6, [r1, #0]
 80071a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	bf18      	it	ne
 80071a8:	b236      	sxthne	r6, r6
 80071aa:	e7ef      	b.n	800718c <_printf_i+0xbc>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	1d19      	adds	r1, r3, #4
 80071b2:	6029      	str	r1, [r5, #0]
 80071b4:	0601      	lsls	r1, r0, #24
 80071b6:	d501      	bpl.n	80071bc <_printf_i+0xec>
 80071b8:	681e      	ldr	r6, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <_printf_i+0xf2>
 80071bc:	0646      	lsls	r6, r0, #25
 80071be:	d5fb      	bpl.n	80071b8 <_printf_i+0xe8>
 80071c0:	881e      	ldrh	r6, [r3, #0]
 80071c2:	2f6f      	cmp	r7, #111	; 0x6f
 80071c4:	bf0c      	ite	eq
 80071c6:	2308      	moveq	r3, #8
 80071c8:	230a      	movne	r3, #10
 80071ca:	4852      	ldr	r0, [pc, #328]	; (8007314 <_printf_i+0x244>)
 80071cc:	2100      	movs	r1, #0
 80071ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071d2:	6865      	ldr	r5, [r4, #4]
 80071d4:	2d00      	cmp	r5, #0
 80071d6:	bfa8      	it	ge
 80071d8:	6821      	ldrge	r1, [r4, #0]
 80071da:	60a5      	str	r5, [r4, #8]
 80071dc:	bfa4      	itt	ge
 80071de:	f021 0104 	bicge.w	r1, r1, #4
 80071e2:	6021      	strge	r1, [r4, #0]
 80071e4:	b90e      	cbnz	r6, 80071ea <_printf_i+0x11a>
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	d04d      	beq.n	8007286 <_printf_i+0x1b6>
 80071ea:	4615      	mov	r5, r2
 80071ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80071f0:	fb03 6711 	mls	r7, r3, r1, r6
 80071f4:	5dc7      	ldrb	r7, [r0, r7]
 80071f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071fa:	4637      	mov	r7, r6
 80071fc:	42bb      	cmp	r3, r7
 80071fe:	460e      	mov	r6, r1
 8007200:	d9f4      	bls.n	80071ec <_printf_i+0x11c>
 8007202:	2b08      	cmp	r3, #8
 8007204:	d10b      	bne.n	800721e <_printf_i+0x14e>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	07de      	lsls	r6, r3, #31
 800720a:	d508      	bpl.n	800721e <_printf_i+0x14e>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	4299      	cmp	r1, r3
 8007212:	bfde      	ittt	le
 8007214:	2330      	movle	r3, #48	; 0x30
 8007216:	f805 3c01 	strble.w	r3, [r5, #-1]
 800721a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800721e:	1b52      	subs	r2, r2, r5
 8007220:	6122      	str	r2, [r4, #16]
 8007222:	464b      	mov	r3, r9
 8007224:	4621      	mov	r1, r4
 8007226:	4640      	mov	r0, r8
 8007228:	f8cd a000 	str.w	sl, [sp]
 800722c:	aa03      	add	r2, sp, #12
 800722e:	f7ff fedf 	bl	8006ff0 <_printf_common>
 8007232:	3001      	adds	r0, #1
 8007234:	d14c      	bne.n	80072d0 <_printf_i+0x200>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	b004      	add	sp, #16
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	4834      	ldr	r0, [pc, #208]	; (8007314 <_printf_i+0x244>)
 8007242:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007246:	6829      	ldr	r1, [r5, #0]
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	f851 6b04 	ldr.w	r6, [r1], #4
 800724e:	6029      	str	r1, [r5, #0]
 8007250:	061d      	lsls	r5, r3, #24
 8007252:	d514      	bpl.n	800727e <_printf_i+0x1ae>
 8007254:	07df      	lsls	r7, r3, #31
 8007256:	bf44      	itt	mi
 8007258:	f043 0320 	orrmi.w	r3, r3, #32
 800725c:	6023      	strmi	r3, [r4, #0]
 800725e:	b91e      	cbnz	r6, 8007268 <_printf_i+0x198>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	f023 0320 	bic.w	r3, r3, #32
 8007266:	6023      	str	r3, [r4, #0]
 8007268:	2310      	movs	r3, #16
 800726a:	e7af      	b.n	80071cc <_printf_i+0xfc>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	f043 0320 	orr.w	r3, r3, #32
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	2378      	movs	r3, #120	; 0x78
 8007276:	4828      	ldr	r0, [pc, #160]	; (8007318 <_printf_i+0x248>)
 8007278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800727c:	e7e3      	b.n	8007246 <_printf_i+0x176>
 800727e:	0659      	lsls	r1, r3, #25
 8007280:	bf48      	it	mi
 8007282:	b2b6      	uxthmi	r6, r6
 8007284:	e7e6      	b.n	8007254 <_printf_i+0x184>
 8007286:	4615      	mov	r5, r2
 8007288:	e7bb      	b.n	8007202 <_printf_i+0x132>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	6826      	ldr	r6, [r4, #0]
 800728e:	1d18      	adds	r0, r3, #4
 8007290:	6961      	ldr	r1, [r4, #20]
 8007292:	6028      	str	r0, [r5, #0]
 8007294:	0635      	lsls	r5, r6, #24
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	d501      	bpl.n	800729e <_printf_i+0x1ce>
 800729a:	6019      	str	r1, [r3, #0]
 800729c:	e002      	b.n	80072a4 <_printf_i+0x1d4>
 800729e:	0670      	lsls	r0, r6, #25
 80072a0:	d5fb      	bpl.n	800729a <_printf_i+0x1ca>
 80072a2:	8019      	strh	r1, [r3, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	4615      	mov	r5, r2
 80072a8:	6123      	str	r3, [r4, #16]
 80072aa:	e7ba      	b.n	8007222 <_printf_i+0x152>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	2100      	movs	r1, #0
 80072b0:	1d1a      	adds	r2, r3, #4
 80072b2:	602a      	str	r2, [r5, #0]
 80072b4:	681d      	ldr	r5, [r3, #0]
 80072b6:	6862      	ldr	r2, [r4, #4]
 80072b8:	4628      	mov	r0, r5
 80072ba:	f002 faef 	bl	800989c <memchr>
 80072be:	b108      	cbz	r0, 80072c4 <_printf_i+0x1f4>
 80072c0:	1b40      	subs	r0, r0, r5
 80072c2:	6060      	str	r0, [r4, #4]
 80072c4:	6863      	ldr	r3, [r4, #4]
 80072c6:	6123      	str	r3, [r4, #16]
 80072c8:	2300      	movs	r3, #0
 80072ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ce:	e7a8      	b.n	8007222 <_printf_i+0x152>
 80072d0:	462a      	mov	r2, r5
 80072d2:	4649      	mov	r1, r9
 80072d4:	4640      	mov	r0, r8
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	47d0      	blx	sl
 80072da:	3001      	adds	r0, #1
 80072dc:	d0ab      	beq.n	8007236 <_printf_i+0x166>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	079b      	lsls	r3, r3, #30
 80072e2:	d413      	bmi.n	800730c <_printf_i+0x23c>
 80072e4:	68e0      	ldr	r0, [r4, #12]
 80072e6:	9b03      	ldr	r3, [sp, #12]
 80072e8:	4298      	cmp	r0, r3
 80072ea:	bfb8      	it	lt
 80072ec:	4618      	movlt	r0, r3
 80072ee:	e7a4      	b.n	800723a <_printf_i+0x16a>
 80072f0:	2301      	movs	r3, #1
 80072f2:	4632      	mov	r2, r6
 80072f4:	4649      	mov	r1, r9
 80072f6:	4640      	mov	r0, r8
 80072f8:	47d0      	blx	sl
 80072fa:	3001      	adds	r0, #1
 80072fc:	d09b      	beq.n	8007236 <_printf_i+0x166>
 80072fe:	3501      	adds	r5, #1
 8007300:	68e3      	ldr	r3, [r4, #12]
 8007302:	9903      	ldr	r1, [sp, #12]
 8007304:	1a5b      	subs	r3, r3, r1
 8007306:	42ab      	cmp	r3, r5
 8007308:	dcf2      	bgt.n	80072f0 <_printf_i+0x220>
 800730a:	e7eb      	b.n	80072e4 <_printf_i+0x214>
 800730c:	2500      	movs	r5, #0
 800730e:	f104 0619 	add.w	r6, r4, #25
 8007312:	e7f5      	b.n	8007300 <_printf_i+0x230>
 8007314:	0800b52e 	.word	0x0800b52e
 8007318:	0800b53f 	.word	0x0800b53f

0800731c <_scanf_float>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	b087      	sub	sp, #28
 8007322:	9303      	str	r3, [sp, #12]
 8007324:	688b      	ldr	r3, [r1, #8]
 8007326:	4617      	mov	r7, r2
 8007328:	1e5a      	subs	r2, r3, #1
 800732a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800732e:	bf85      	ittet	hi
 8007330:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007334:	195b      	addhi	r3, r3, r5
 8007336:	2300      	movls	r3, #0
 8007338:	9302      	strhi	r3, [sp, #8]
 800733a:	bf88      	it	hi
 800733c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007340:	468b      	mov	fp, r1
 8007342:	f04f 0500 	mov.w	r5, #0
 8007346:	bf8c      	ite	hi
 8007348:	608b      	strhi	r3, [r1, #8]
 800734a:	9302      	strls	r3, [sp, #8]
 800734c:	680b      	ldr	r3, [r1, #0]
 800734e:	4680      	mov	r8, r0
 8007350:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007354:	f84b 3b1c 	str.w	r3, [fp], #28
 8007358:	460c      	mov	r4, r1
 800735a:	465e      	mov	r6, fp
 800735c:	46aa      	mov	sl, r5
 800735e:	46a9      	mov	r9, r5
 8007360:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007364:	9501      	str	r5, [sp, #4]
 8007366:	68a2      	ldr	r2, [r4, #8]
 8007368:	b152      	cbz	r2, 8007380 <_scanf_float+0x64>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b4e      	cmp	r3, #78	; 0x4e
 8007370:	d864      	bhi.n	800743c <_scanf_float+0x120>
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d83c      	bhi.n	80073f0 <_scanf_float+0xd4>
 8007376:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800737a:	b2c8      	uxtb	r0, r1
 800737c:	280e      	cmp	r0, #14
 800737e:	d93a      	bls.n	80073f6 <_scanf_float+0xda>
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	d003      	beq.n	800738e <_scanf_float+0x72>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007392:	f1ba 0f01 	cmp.w	sl, #1
 8007396:	f200 8113 	bhi.w	80075c0 <_scanf_float+0x2a4>
 800739a:	455e      	cmp	r6, fp
 800739c:	f200 8105 	bhi.w	80075aa <_scanf_float+0x28e>
 80073a0:	2501      	movs	r5, #1
 80073a2:	4628      	mov	r0, r5
 80073a4:	b007      	add	sp, #28
 80073a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80073ae:	2a0d      	cmp	r2, #13
 80073b0:	d8e6      	bhi.n	8007380 <_scanf_float+0x64>
 80073b2:	a101      	add	r1, pc, #4	; (adr r1, 80073b8 <_scanf_float+0x9c>)
 80073b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073b8:	080074f7 	.word	0x080074f7
 80073bc:	08007381 	.word	0x08007381
 80073c0:	08007381 	.word	0x08007381
 80073c4:	08007381 	.word	0x08007381
 80073c8:	08007557 	.word	0x08007557
 80073cc:	0800752f 	.word	0x0800752f
 80073d0:	08007381 	.word	0x08007381
 80073d4:	08007381 	.word	0x08007381
 80073d8:	08007505 	.word	0x08007505
 80073dc:	08007381 	.word	0x08007381
 80073e0:	08007381 	.word	0x08007381
 80073e4:	08007381 	.word	0x08007381
 80073e8:	08007381 	.word	0x08007381
 80073ec:	080074bd 	.word	0x080074bd
 80073f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073f4:	e7db      	b.n	80073ae <_scanf_float+0x92>
 80073f6:	290e      	cmp	r1, #14
 80073f8:	d8c2      	bhi.n	8007380 <_scanf_float+0x64>
 80073fa:	a001      	add	r0, pc, #4	; (adr r0, 8007400 <_scanf_float+0xe4>)
 80073fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007400:	080074af 	.word	0x080074af
 8007404:	08007381 	.word	0x08007381
 8007408:	080074af 	.word	0x080074af
 800740c:	08007543 	.word	0x08007543
 8007410:	08007381 	.word	0x08007381
 8007414:	0800745d 	.word	0x0800745d
 8007418:	08007499 	.word	0x08007499
 800741c:	08007499 	.word	0x08007499
 8007420:	08007499 	.word	0x08007499
 8007424:	08007499 	.word	0x08007499
 8007428:	08007499 	.word	0x08007499
 800742c:	08007499 	.word	0x08007499
 8007430:	08007499 	.word	0x08007499
 8007434:	08007499 	.word	0x08007499
 8007438:	08007499 	.word	0x08007499
 800743c:	2b6e      	cmp	r3, #110	; 0x6e
 800743e:	d809      	bhi.n	8007454 <_scanf_float+0x138>
 8007440:	2b60      	cmp	r3, #96	; 0x60
 8007442:	d8b2      	bhi.n	80073aa <_scanf_float+0x8e>
 8007444:	2b54      	cmp	r3, #84	; 0x54
 8007446:	d077      	beq.n	8007538 <_scanf_float+0x21c>
 8007448:	2b59      	cmp	r3, #89	; 0x59
 800744a:	d199      	bne.n	8007380 <_scanf_float+0x64>
 800744c:	2d07      	cmp	r5, #7
 800744e:	d197      	bne.n	8007380 <_scanf_float+0x64>
 8007450:	2508      	movs	r5, #8
 8007452:	e029      	b.n	80074a8 <_scanf_float+0x18c>
 8007454:	2b74      	cmp	r3, #116	; 0x74
 8007456:	d06f      	beq.n	8007538 <_scanf_float+0x21c>
 8007458:	2b79      	cmp	r3, #121	; 0x79
 800745a:	e7f6      	b.n	800744a <_scanf_float+0x12e>
 800745c:	6821      	ldr	r1, [r4, #0]
 800745e:	05c8      	lsls	r0, r1, #23
 8007460:	d51a      	bpl.n	8007498 <_scanf_float+0x17c>
 8007462:	9b02      	ldr	r3, [sp, #8]
 8007464:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007468:	6021      	str	r1, [r4, #0]
 800746a:	f109 0901 	add.w	r9, r9, #1
 800746e:	b11b      	cbz	r3, 8007478 <_scanf_float+0x15c>
 8007470:	3b01      	subs	r3, #1
 8007472:	3201      	adds	r2, #1
 8007474:	9302      	str	r3, [sp, #8]
 8007476:	60a2      	str	r2, [r4, #8]
 8007478:	68a3      	ldr	r3, [r4, #8]
 800747a:	3b01      	subs	r3, #1
 800747c:	60a3      	str	r3, [r4, #8]
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	3301      	adds	r3, #1
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3b01      	subs	r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	f340 8084 	ble.w	8007598 <_scanf_float+0x27c>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	e766      	b.n	8007366 <_scanf_float+0x4a>
 8007498:	eb1a 0f05 	cmn.w	sl, r5
 800749c:	f47f af70 	bne.w	8007380 <_scanf_float+0x64>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80074a6:	6022      	str	r2, [r4, #0]
 80074a8:	f806 3b01 	strb.w	r3, [r6], #1
 80074ac:	e7e4      	b.n	8007478 <_scanf_float+0x15c>
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	0610      	lsls	r0, r2, #24
 80074b2:	f57f af65 	bpl.w	8007380 <_scanf_float+0x64>
 80074b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ba:	e7f4      	b.n	80074a6 <_scanf_float+0x18a>
 80074bc:	f1ba 0f00 	cmp.w	sl, #0
 80074c0:	d10e      	bne.n	80074e0 <_scanf_float+0x1c4>
 80074c2:	f1b9 0f00 	cmp.w	r9, #0
 80074c6:	d10e      	bne.n	80074e6 <_scanf_float+0x1ca>
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074d2:	d108      	bne.n	80074e6 <_scanf_float+0x1ca>
 80074d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074d8:	f04f 0a01 	mov.w	sl, #1
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	e7e3      	b.n	80074a8 <_scanf_float+0x18c>
 80074e0:	f1ba 0f02 	cmp.w	sl, #2
 80074e4:	d055      	beq.n	8007592 <_scanf_float+0x276>
 80074e6:	2d01      	cmp	r5, #1
 80074e8:	d002      	beq.n	80074f0 <_scanf_float+0x1d4>
 80074ea:	2d04      	cmp	r5, #4
 80074ec:	f47f af48 	bne.w	8007380 <_scanf_float+0x64>
 80074f0:	3501      	adds	r5, #1
 80074f2:	b2ed      	uxtb	r5, r5
 80074f4:	e7d8      	b.n	80074a8 <_scanf_float+0x18c>
 80074f6:	f1ba 0f01 	cmp.w	sl, #1
 80074fa:	f47f af41 	bne.w	8007380 <_scanf_float+0x64>
 80074fe:	f04f 0a02 	mov.w	sl, #2
 8007502:	e7d1      	b.n	80074a8 <_scanf_float+0x18c>
 8007504:	b97d      	cbnz	r5, 8007526 <_scanf_float+0x20a>
 8007506:	f1b9 0f00 	cmp.w	r9, #0
 800750a:	f47f af3c 	bne.w	8007386 <_scanf_float+0x6a>
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007514:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007518:	f47f af39 	bne.w	800738e <_scanf_float+0x72>
 800751c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007520:	2501      	movs	r5, #1
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	e7c0      	b.n	80074a8 <_scanf_float+0x18c>
 8007526:	2d03      	cmp	r5, #3
 8007528:	d0e2      	beq.n	80074f0 <_scanf_float+0x1d4>
 800752a:	2d05      	cmp	r5, #5
 800752c:	e7de      	b.n	80074ec <_scanf_float+0x1d0>
 800752e:	2d02      	cmp	r5, #2
 8007530:	f47f af26 	bne.w	8007380 <_scanf_float+0x64>
 8007534:	2503      	movs	r5, #3
 8007536:	e7b7      	b.n	80074a8 <_scanf_float+0x18c>
 8007538:	2d06      	cmp	r5, #6
 800753a:	f47f af21 	bne.w	8007380 <_scanf_float+0x64>
 800753e:	2507      	movs	r5, #7
 8007540:	e7b2      	b.n	80074a8 <_scanf_float+0x18c>
 8007542:	6822      	ldr	r2, [r4, #0]
 8007544:	0591      	lsls	r1, r2, #22
 8007546:	f57f af1b 	bpl.w	8007380 <_scanf_float+0x64>
 800754a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800754e:	6022      	str	r2, [r4, #0]
 8007550:	f8cd 9004 	str.w	r9, [sp, #4]
 8007554:	e7a8      	b.n	80074a8 <_scanf_float+0x18c>
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800755c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007560:	d006      	beq.n	8007570 <_scanf_float+0x254>
 8007562:	0550      	lsls	r0, r2, #21
 8007564:	f57f af0c 	bpl.w	8007380 <_scanf_float+0x64>
 8007568:	f1b9 0f00 	cmp.w	r9, #0
 800756c:	f43f af0f 	beq.w	800738e <_scanf_float+0x72>
 8007570:	0591      	lsls	r1, r2, #22
 8007572:	bf58      	it	pl
 8007574:	9901      	ldrpl	r1, [sp, #4]
 8007576:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800757a:	bf58      	it	pl
 800757c:	eba9 0101 	subpl.w	r1, r9, r1
 8007580:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007584:	f04f 0900 	mov.w	r9, #0
 8007588:	bf58      	it	pl
 800758a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800758e:	6022      	str	r2, [r4, #0]
 8007590:	e78a      	b.n	80074a8 <_scanf_float+0x18c>
 8007592:	f04f 0a03 	mov.w	sl, #3
 8007596:	e787      	b.n	80074a8 <_scanf_float+0x18c>
 8007598:	4639      	mov	r1, r7
 800759a:	4640      	mov	r0, r8
 800759c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075a0:	4798      	blx	r3
 80075a2:	2800      	cmp	r0, #0
 80075a4:	f43f aedf 	beq.w	8007366 <_scanf_float+0x4a>
 80075a8:	e6ea      	b.n	8007380 <_scanf_float+0x64>
 80075aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075ae:	463a      	mov	r2, r7
 80075b0:	4640      	mov	r0, r8
 80075b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075b6:	4798      	blx	r3
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	e6ec      	b.n	800739a <_scanf_float+0x7e>
 80075c0:	1e6b      	subs	r3, r5, #1
 80075c2:	2b06      	cmp	r3, #6
 80075c4:	d825      	bhi.n	8007612 <_scanf_float+0x2f6>
 80075c6:	2d02      	cmp	r5, #2
 80075c8:	d836      	bhi.n	8007638 <_scanf_float+0x31c>
 80075ca:	455e      	cmp	r6, fp
 80075cc:	f67f aee8 	bls.w	80073a0 <_scanf_float+0x84>
 80075d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075d4:	463a      	mov	r2, r7
 80075d6:	4640      	mov	r0, r8
 80075d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075dc:	4798      	blx	r3
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	6123      	str	r3, [r4, #16]
 80075e4:	e7f1      	b.n	80075ca <_scanf_float+0x2ae>
 80075e6:	9802      	ldr	r0, [sp, #8]
 80075e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075f0:	463a      	mov	r2, r7
 80075f2:	9002      	str	r0, [sp, #8]
 80075f4:	4640      	mov	r0, r8
 80075f6:	4798      	blx	r3
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007602:	fa5f fa8a 	uxtb.w	sl, sl
 8007606:	f1ba 0f02 	cmp.w	sl, #2
 800760a:	d1ec      	bne.n	80075e6 <_scanf_float+0x2ca>
 800760c:	3d03      	subs	r5, #3
 800760e:	b2ed      	uxtb	r5, r5
 8007610:	1b76      	subs	r6, r6, r5
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	05da      	lsls	r2, r3, #23
 8007616:	d52f      	bpl.n	8007678 <_scanf_float+0x35c>
 8007618:	055b      	lsls	r3, r3, #21
 800761a:	d510      	bpl.n	800763e <_scanf_float+0x322>
 800761c:	455e      	cmp	r6, fp
 800761e:	f67f aebf 	bls.w	80073a0 <_scanf_float+0x84>
 8007622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007626:	463a      	mov	r2, r7
 8007628:	4640      	mov	r0, r8
 800762a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800762e:	4798      	blx	r3
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	3b01      	subs	r3, #1
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	e7f1      	b.n	800761c <_scanf_float+0x300>
 8007638:	46aa      	mov	sl, r5
 800763a:	9602      	str	r6, [sp, #8]
 800763c:	e7df      	b.n	80075fe <_scanf_float+0x2e2>
 800763e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	2965      	cmp	r1, #101	; 0x65
 8007646:	f103 33ff 	add.w	r3, r3, #4294967295
 800764a:	f106 35ff 	add.w	r5, r6, #4294967295
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	d00c      	beq.n	800766c <_scanf_float+0x350>
 8007652:	2945      	cmp	r1, #69	; 0x45
 8007654:	d00a      	beq.n	800766c <_scanf_float+0x350>
 8007656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800765a:	463a      	mov	r2, r7
 800765c:	4640      	mov	r0, r8
 800765e:	4798      	blx	r3
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007666:	3b01      	subs	r3, #1
 8007668:	1eb5      	subs	r5, r6, #2
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	463a      	mov	r2, r7
 800766e:	4640      	mov	r0, r8
 8007670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007674:	4798      	blx	r3
 8007676:	462e      	mov	r6, r5
 8007678:	6825      	ldr	r5, [r4, #0]
 800767a:	f015 0510 	ands.w	r5, r5, #16
 800767e:	d155      	bne.n	800772c <_scanf_float+0x410>
 8007680:	7035      	strb	r5, [r6, #0]
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768c:	d11b      	bne.n	80076c6 <_scanf_float+0x3aa>
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	454b      	cmp	r3, r9
 8007692:	eba3 0209 	sub.w	r2, r3, r9
 8007696:	d123      	bne.n	80076e0 <_scanf_float+0x3c4>
 8007698:	2200      	movs	r2, #0
 800769a:	4659      	mov	r1, fp
 800769c:	4640      	mov	r0, r8
 800769e:	f000 fe7b 	bl	8008398 <_strtod_r>
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	f012 0f02 	tst.w	r2, #2
 80076aa:	4606      	mov	r6, r0
 80076ac:	460f      	mov	r7, r1
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	d021      	beq.n	80076f6 <_scanf_float+0x3da>
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	9903      	ldr	r1, [sp, #12]
 80076b6:	600a      	str	r2, [r1, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	e9c3 6700 	strd	r6, r7, [r3]
 80076be:	68e3      	ldr	r3, [r4, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60e3      	str	r3, [r4, #12]
 80076c4:	e66d      	b.n	80073a2 <_scanf_float+0x86>
 80076c6:	9b04      	ldr	r3, [sp, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0e5      	beq.n	8007698 <_scanf_float+0x37c>
 80076cc:	9905      	ldr	r1, [sp, #20]
 80076ce:	230a      	movs	r3, #10
 80076d0:	462a      	mov	r2, r5
 80076d2:	4640      	mov	r0, r8
 80076d4:	3101      	adds	r1, #1
 80076d6:	f000 fee1 	bl	800849c <_strtol_r>
 80076da:	9b04      	ldr	r3, [sp, #16]
 80076dc:	9e05      	ldr	r6, [sp, #20]
 80076de:	1ac2      	subs	r2, r0, r3
 80076e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076e4:	429e      	cmp	r6, r3
 80076e6:	bf28      	it	cs
 80076e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076ec:	4630      	mov	r0, r6
 80076ee:	4910      	ldr	r1, [pc, #64]	; (8007730 <_scanf_float+0x414>)
 80076f0:	f000 f826 	bl	8007740 <siprintf>
 80076f4:	e7d0      	b.n	8007698 <_scanf_float+0x37c>
 80076f6:	f012 0f04 	tst.w	r2, #4
 80076fa:	f103 0204 	add.w	r2, r3, #4
 80076fe:	d1d9      	bne.n	80076b4 <_scanf_float+0x398>
 8007700:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007704:	f8cc 2000 	str.w	r2, [ip]
 8007708:	f8d3 8000 	ldr.w	r8, [r3]
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	f7f9 f9f2 	bl	8000af8 <__aeabi_dcmpun>
 8007714:	b128      	cbz	r0, 8007722 <_scanf_float+0x406>
 8007716:	4807      	ldr	r0, [pc, #28]	; (8007734 <_scanf_float+0x418>)
 8007718:	f000 f80e 	bl	8007738 <nanf>
 800771c:	f8c8 0000 	str.w	r0, [r8]
 8007720:	e7cd      	b.n	80076be <_scanf_float+0x3a2>
 8007722:	4630      	mov	r0, r6
 8007724:	4639      	mov	r1, r7
 8007726:	f7f9 fa45 	bl	8000bb4 <__aeabi_d2f>
 800772a:	e7f7      	b.n	800771c <_scanf_float+0x400>
 800772c:	2500      	movs	r5, #0
 800772e:	e638      	b.n	80073a2 <_scanf_float+0x86>
 8007730:	0800b550 	.word	0x0800b550
 8007734:	0800b958 	.word	0x0800b958

08007738 <nanf>:
 8007738:	4800      	ldr	r0, [pc, #0]	; (800773c <nanf+0x4>)
 800773a:	4770      	bx	lr
 800773c:	7fc00000 	.word	0x7fc00000

08007740 <siprintf>:
 8007740:	b40e      	push	{r1, r2, r3}
 8007742:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007746:	b500      	push	{lr}
 8007748:	b09c      	sub	sp, #112	; 0x70
 800774a:	ab1d      	add	r3, sp, #116	; 0x74
 800774c:	9002      	str	r0, [sp, #8]
 800774e:	9006      	str	r0, [sp, #24]
 8007750:	9107      	str	r1, [sp, #28]
 8007752:	9104      	str	r1, [sp, #16]
 8007754:	4808      	ldr	r0, [pc, #32]	; (8007778 <siprintf+0x38>)
 8007756:	4909      	ldr	r1, [pc, #36]	; (800777c <siprintf+0x3c>)
 8007758:	f853 2b04 	ldr.w	r2, [r3], #4
 800775c:	9105      	str	r1, [sp, #20]
 800775e:	6800      	ldr	r0, [r0, #0]
 8007760:	a902      	add	r1, sp, #8
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	f002 feba 	bl	800a4dc <_svfiprintf_r>
 8007768:	2200      	movs	r2, #0
 800776a:	9b02      	ldr	r3, [sp, #8]
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	b01c      	add	sp, #112	; 0x70
 8007770:	f85d eb04 	ldr.w	lr, [sp], #4
 8007774:	b003      	add	sp, #12
 8007776:	4770      	bx	lr
 8007778:	2000000c 	.word	0x2000000c
 800777c:	ffff0208 	.word	0xffff0208

08007780 <sulp>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	460f      	mov	r7, r1
 8007786:	4690      	mov	r8, r2
 8007788:	f002 fc14 	bl	8009fb4 <__ulp>
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	f1b8 0f00 	cmp.w	r8, #0
 8007794:	d011      	beq.n	80077ba <sulp+0x3a>
 8007796:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800779a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dd0b      	ble.n	80077ba <sulp+0x3a>
 80077a2:	2400      	movs	r4, #0
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80077aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80077ae:	4622      	mov	r2, r4
 80077b0:	462b      	mov	r3, r5
 80077b2:	f7f8 ff07 	bl	80005c4 <__aeabi_dmul>
 80077b6:	4604      	mov	r4, r0
 80077b8:	460d      	mov	r5, r1
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c2:	0000      	movs	r0, r0
 80077c4:	0000      	movs	r0, r0
	...

080077c8 <_strtod_l>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	469b      	mov	fp, r3
 80077ce:	2300      	movs	r3, #0
 80077d0:	b09f      	sub	sp, #124	; 0x7c
 80077d2:	931a      	str	r3, [sp, #104]	; 0x68
 80077d4:	4b9e      	ldr	r3, [pc, #632]	; (8007a50 <_strtod_l+0x288>)
 80077d6:	4682      	mov	sl, r0
 80077d8:	681f      	ldr	r7, [r3, #0]
 80077da:	460e      	mov	r6, r1
 80077dc:	4638      	mov	r0, r7
 80077de:	9215      	str	r2, [sp, #84]	; 0x54
 80077e0:	f7f8 fd2c 	bl	800023c <strlen>
 80077e4:	f04f 0800 	mov.w	r8, #0
 80077e8:	4604      	mov	r4, r0
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	9619      	str	r6, [sp, #100]	; 0x64
 80077f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	2a2b      	cmp	r2, #43	; 0x2b
 80077f6:	d04c      	beq.n	8007892 <_strtod_l+0xca>
 80077f8:	d83a      	bhi.n	8007870 <_strtod_l+0xa8>
 80077fa:	2a0d      	cmp	r2, #13
 80077fc:	d833      	bhi.n	8007866 <_strtod_l+0x9e>
 80077fe:	2a08      	cmp	r2, #8
 8007800:	d833      	bhi.n	800786a <_strtod_l+0xa2>
 8007802:	2a00      	cmp	r2, #0
 8007804:	d03d      	beq.n	8007882 <_strtod_l+0xba>
 8007806:	2300      	movs	r3, #0
 8007808:	930a      	str	r3, [sp, #40]	; 0x28
 800780a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800780c:	782b      	ldrb	r3, [r5, #0]
 800780e:	2b30      	cmp	r3, #48	; 0x30
 8007810:	f040 80aa 	bne.w	8007968 <_strtod_l+0x1a0>
 8007814:	786b      	ldrb	r3, [r5, #1]
 8007816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800781a:	2b58      	cmp	r3, #88	; 0x58
 800781c:	d166      	bne.n	80078ec <_strtod_l+0x124>
 800781e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007820:	4650      	mov	r0, sl
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	ab1a      	add	r3, sp, #104	; 0x68
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	4a8a      	ldr	r2, [pc, #552]	; (8007a54 <_strtod_l+0x28c>)
 800782a:	f8cd b008 	str.w	fp, [sp, #8]
 800782e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007830:	a919      	add	r1, sp, #100	; 0x64
 8007832:	f001 fd17 	bl	8009264 <__gethex>
 8007836:	f010 0607 	ands.w	r6, r0, #7
 800783a:	4604      	mov	r4, r0
 800783c:	d005      	beq.n	800784a <_strtod_l+0x82>
 800783e:	2e06      	cmp	r6, #6
 8007840:	d129      	bne.n	8007896 <_strtod_l+0xce>
 8007842:	2300      	movs	r3, #0
 8007844:	3501      	adds	r5, #1
 8007846:	9519      	str	r5, [sp, #100]	; 0x64
 8007848:	930a      	str	r3, [sp, #40]	; 0x28
 800784a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 858a 	bne.w	8008366 <_strtod_l+0xb9e>
 8007852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007854:	b1d3      	cbz	r3, 800788c <_strtod_l+0xc4>
 8007856:	4642      	mov	r2, r8
 8007858:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800785c:	4610      	mov	r0, r2
 800785e:	4619      	mov	r1, r3
 8007860:	b01f      	add	sp, #124	; 0x7c
 8007862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007866:	2a20      	cmp	r2, #32
 8007868:	d1cd      	bne.n	8007806 <_strtod_l+0x3e>
 800786a:	3301      	adds	r3, #1
 800786c:	9319      	str	r3, [sp, #100]	; 0x64
 800786e:	e7bf      	b.n	80077f0 <_strtod_l+0x28>
 8007870:	2a2d      	cmp	r2, #45	; 0x2d
 8007872:	d1c8      	bne.n	8007806 <_strtod_l+0x3e>
 8007874:	2201      	movs	r2, #1
 8007876:	920a      	str	r2, [sp, #40]	; 0x28
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	9219      	str	r2, [sp, #100]	; 0x64
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1c3      	bne.n	800780a <_strtod_l+0x42>
 8007882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007884:	9619      	str	r6, [sp, #100]	; 0x64
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 856b 	bne.w	8008362 <_strtod_l+0xb9a>
 800788c:	4642      	mov	r2, r8
 800788e:	464b      	mov	r3, r9
 8007890:	e7e4      	b.n	800785c <_strtod_l+0x94>
 8007892:	2200      	movs	r2, #0
 8007894:	e7ef      	b.n	8007876 <_strtod_l+0xae>
 8007896:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007898:	b13a      	cbz	r2, 80078aa <_strtod_l+0xe2>
 800789a:	2135      	movs	r1, #53	; 0x35
 800789c:	a81c      	add	r0, sp, #112	; 0x70
 800789e:	f002 fc8d 	bl	800a1bc <__copybits>
 80078a2:	4650      	mov	r0, sl
 80078a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078a6:	f002 f855 	bl	8009954 <_Bfree>
 80078aa:	3e01      	subs	r6, #1
 80078ac:	2e04      	cmp	r6, #4
 80078ae:	d806      	bhi.n	80078be <_strtod_l+0xf6>
 80078b0:	e8df f006 	tbb	[pc, r6]
 80078b4:	1714030a 	.word	0x1714030a
 80078b8:	0a          	.byte	0x0a
 80078b9:	00          	.byte	0x00
 80078ba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80078be:	0721      	lsls	r1, r4, #28
 80078c0:	d5c3      	bpl.n	800784a <_strtod_l+0x82>
 80078c2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80078c6:	e7c0      	b.n	800784a <_strtod_l+0x82>
 80078c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80078ca:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80078ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80078d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078d6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80078da:	e7f0      	b.n	80078be <_strtod_l+0xf6>
 80078dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007a58 <_strtod_l+0x290>
 80078e0:	e7ed      	b.n	80078be <_strtod_l+0xf6>
 80078e2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80078e6:	f04f 38ff 	mov.w	r8, #4294967295
 80078ea:	e7e8      	b.n	80078be <_strtod_l+0xf6>
 80078ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	9219      	str	r2, [sp, #100]	; 0x64
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b30      	cmp	r3, #48	; 0x30
 80078f6:	d0f9      	beq.n	80078ec <_strtod_l+0x124>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0a6      	beq.n	800784a <_strtod_l+0x82>
 80078fc:	2301      	movs	r3, #1
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007902:	220a      	movs	r2, #10
 8007904:	9308      	str	r3, [sp, #32]
 8007906:	2300      	movs	r3, #0
 8007908:	469b      	mov	fp, r3
 800790a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800790e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007910:	7805      	ldrb	r5, [r0, #0]
 8007912:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007916:	b2d9      	uxtb	r1, r3
 8007918:	2909      	cmp	r1, #9
 800791a:	d927      	bls.n	800796c <_strtod_l+0x1a4>
 800791c:	4622      	mov	r2, r4
 800791e:	4639      	mov	r1, r7
 8007920:	f002 fef2 	bl	800a708 <strncmp>
 8007924:	2800      	cmp	r0, #0
 8007926:	d033      	beq.n	8007990 <_strtod_l+0x1c8>
 8007928:	2000      	movs	r0, #0
 800792a:	462a      	mov	r2, r5
 800792c:	465c      	mov	r4, fp
 800792e:	4603      	mov	r3, r0
 8007930:	9004      	str	r0, [sp, #16]
 8007932:	2a65      	cmp	r2, #101	; 0x65
 8007934:	d001      	beq.n	800793a <_strtod_l+0x172>
 8007936:	2a45      	cmp	r2, #69	; 0x45
 8007938:	d114      	bne.n	8007964 <_strtod_l+0x19c>
 800793a:	b91c      	cbnz	r4, 8007944 <_strtod_l+0x17c>
 800793c:	9a07      	ldr	r2, [sp, #28]
 800793e:	4302      	orrs	r2, r0
 8007940:	d09f      	beq.n	8007882 <_strtod_l+0xba>
 8007942:	2400      	movs	r4, #0
 8007944:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007946:	1c72      	adds	r2, r6, #1
 8007948:	9219      	str	r2, [sp, #100]	; 0x64
 800794a:	7872      	ldrb	r2, [r6, #1]
 800794c:	2a2b      	cmp	r2, #43	; 0x2b
 800794e:	d079      	beq.n	8007a44 <_strtod_l+0x27c>
 8007950:	2a2d      	cmp	r2, #45	; 0x2d
 8007952:	f000 8083 	beq.w	8007a5c <_strtod_l+0x294>
 8007956:	2700      	movs	r7, #0
 8007958:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800795c:	2909      	cmp	r1, #9
 800795e:	f240 8083 	bls.w	8007a68 <_strtod_l+0x2a0>
 8007962:	9619      	str	r6, [sp, #100]	; 0x64
 8007964:	2500      	movs	r5, #0
 8007966:	e09f      	b.n	8007aa8 <_strtod_l+0x2e0>
 8007968:	2300      	movs	r3, #0
 800796a:	e7c8      	b.n	80078fe <_strtod_l+0x136>
 800796c:	f1bb 0f08 	cmp.w	fp, #8
 8007970:	bfd5      	itete	le
 8007972:	9906      	ldrle	r1, [sp, #24]
 8007974:	9905      	ldrgt	r1, [sp, #20]
 8007976:	fb02 3301 	mlale	r3, r2, r1, r3
 800797a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800797e:	f100 0001 	add.w	r0, r0, #1
 8007982:	bfd4      	ite	le
 8007984:	9306      	strle	r3, [sp, #24]
 8007986:	9305      	strgt	r3, [sp, #20]
 8007988:	f10b 0b01 	add.w	fp, fp, #1
 800798c:	9019      	str	r0, [sp, #100]	; 0x64
 800798e:	e7be      	b.n	800790e <_strtod_l+0x146>
 8007990:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007992:	191a      	adds	r2, r3, r4
 8007994:	9219      	str	r2, [sp, #100]	; 0x64
 8007996:	5d1a      	ldrb	r2, [r3, r4]
 8007998:	f1bb 0f00 	cmp.w	fp, #0
 800799c:	d036      	beq.n	8007a0c <_strtod_l+0x244>
 800799e:	465c      	mov	r4, fp
 80079a0:	9004      	str	r0, [sp, #16]
 80079a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	d912      	bls.n	80079d0 <_strtod_l+0x208>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e7c1      	b.n	8007932 <_strtod_l+0x16a>
 80079ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079b0:	3001      	adds	r0, #1
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	9219      	str	r2, [sp, #100]	; 0x64
 80079b6:	785a      	ldrb	r2, [r3, #1]
 80079b8:	2a30      	cmp	r2, #48	; 0x30
 80079ba:	d0f8      	beq.n	80079ae <_strtod_l+0x1e6>
 80079bc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	f200 84d5 	bhi.w	8008370 <_strtod_l+0xba8>
 80079c6:	9004      	str	r0, [sp, #16]
 80079c8:	2000      	movs	r0, #0
 80079ca:	4604      	mov	r4, r0
 80079cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	3a30      	subs	r2, #48	; 0x30
 80079d2:	f100 0301 	add.w	r3, r0, #1
 80079d6:	d013      	beq.n	8007a00 <_strtod_l+0x238>
 80079d8:	9904      	ldr	r1, [sp, #16]
 80079da:	1905      	adds	r5, r0, r4
 80079dc:	4419      	add	r1, r3
 80079de:	9104      	str	r1, [sp, #16]
 80079e0:	4623      	mov	r3, r4
 80079e2:	210a      	movs	r1, #10
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	d113      	bne.n	8007a10 <_strtod_l+0x248>
 80079e8:	1823      	adds	r3, r4, r0
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	f104 0401 	add.w	r4, r4, #1
 80079f0:	4404      	add	r4, r0
 80079f2:	dc1b      	bgt.n	8007a2c <_strtod_l+0x264>
 80079f4:	230a      	movs	r3, #10
 80079f6:	9906      	ldr	r1, [sp, #24]
 80079f8:	fb03 2301 	mla	r3, r3, r1, r2
 80079fc:	9306      	str	r3, [sp, #24]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a02:	4618      	mov	r0, r3
 8007a04:	1c51      	adds	r1, r2, #1
 8007a06:	9119      	str	r1, [sp, #100]	; 0x64
 8007a08:	7852      	ldrb	r2, [r2, #1]
 8007a0a:	e7ca      	b.n	80079a2 <_strtod_l+0x1da>
 8007a0c:	4658      	mov	r0, fp
 8007a0e:	e7d3      	b.n	80079b8 <_strtod_l+0x1f0>
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	dc04      	bgt.n	8007a1e <_strtod_l+0x256>
 8007a14:	9f06      	ldr	r7, [sp, #24]
 8007a16:	434f      	muls	r7, r1
 8007a18:	9706      	str	r7, [sp, #24]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	e7e2      	b.n	80079e4 <_strtod_l+0x21c>
 8007a1e:	1c5f      	adds	r7, r3, #1
 8007a20:	2f10      	cmp	r7, #16
 8007a22:	bfde      	ittt	le
 8007a24:	9f05      	ldrle	r7, [sp, #20]
 8007a26:	434f      	mulle	r7, r1
 8007a28:	9705      	strle	r7, [sp, #20]
 8007a2a:	e7f6      	b.n	8007a1a <_strtod_l+0x252>
 8007a2c:	2c10      	cmp	r4, #16
 8007a2e:	bfdf      	itttt	le
 8007a30:	230a      	movle	r3, #10
 8007a32:	9905      	ldrle	r1, [sp, #20]
 8007a34:	fb03 2301 	mlale	r3, r3, r1, r2
 8007a38:	9305      	strle	r3, [sp, #20]
 8007a3a:	e7e0      	b.n	80079fe <_strtod_l+0x236>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	2301      	movs	r3, #1
 8007a42:	e77b      	b.n	800793c <_strtod_l+0x174>
 8007a44:	2700      	movs	r7, #0
 8007a46:	1cb2      	adds	r2, r6, #2
 8007a48:	9219      	str	r2, [sp, #100]	; 0x64
 8007a4a:	78b2      	ldrb	r2, [r6, #2]
 8007a4c:	e784      	b.n	8007958 <_strtod_l+0x190>
 8007a4e:	bf00      	nop
 8007a50:	0800b7a0 	.word	0x0800b7a0
 8007a54:	0800b558 	.word	0x0800b558
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	2701      	movs	r7, #1
 8007a5e:	e7f2      	b.n	8007a46 <_strtod_l+0x27e>
 8007a60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a62:	1c51      	adds	r1, r2, #1
 8007a64:	9119      	str	r1, [sp, #100]	; 0x64
 8007a66:	7852      	ldrb	r2, [r2, #1]
 8007a68:	2a30      	cmp	r2, #48	; 0x30
 8007a6a:	d0f9      	beq.n	8007a60 <_strtod_l+0x298>
 8007a6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007a70:	2908      	cmp	r1, #8
 8007a72:	f63f af77 	bhi.w	8007964 <_strtod_l+0x19c>
 8007a76:	f04f 0e0a 	mov.w	lr, #10
 8007a7a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007a7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a80:	9209      	str	r2, [sp, #36]	; 0x24
 8007a82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a84:	1c51      	adds	r1, r2, #1
 8007a86:	9119      	str	r1, [sp, #100]	; 0x64
 8007a88:	7852      	ldrb	r2, [r2, #1]
 8007a8a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007a8e:	2d09      	cmp	r5, #9
 8007a90:	d935      	bls.n	8007afe <_strtod_l+0x336>
 8007a92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a94:	1b49      	subs	r1, r1, r5
 8007a96:	2908      	cmp	r1, #8
 8007a98:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007a9c:	dc02      	bgt.n	8007aa4 <_strtod_l+0x2dc>
 8007a9e:	4565      	cmp	r5, ip
 8007aa0:	bfa8      	it	ge
 8007aa2:	4665      	movge	r5, ip
 8007aa4:	b107      	cbz	r7, 8007aa8 <_strtod_l+0x2e0>
 8007aa6:	426d      	negs	r5, r5
 8007aa8:	2c00      	cmp	r4, #0
 8007aaa:	d14c      	bne.n	8007b46 <_strtod_l+0x37e>
 8007aac:	9907      	ldr	r1, [sp, #28]
 8007aae:	4301      	orrs	r1, r0
 8007ab0:	f47f aecb 	bne.w	800784a <_strtod_l+0x82>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f47f aee4 	bne.w	8007882 <_strtod_l+0xba>
 8007aba:	2a69      	cmp	r2, #105	; 0x69
 8007abc:	d026      	beq.n	8007b0c <_strtod_l+0x344>
 8007abe:	dc23      	bgt.n	8007b08 <_strtod_l+0x340>
 8007ac0:	2a49      	cmp	r2, #73	; 0x49
 8007ac2:	d023      	beq.n	8007b0c <_strtod_l+0x344>
 8007ac4:	2a4e      	cmp	r2, #78	; 0x4e
 8007ac6:	f47f aedc 	bne.w	8007882 <_strtod_l+0xba>
 8007aca:	499d      	ldr	r1, [pc, #628]	; (8007d40 <_strtod_l+0x578>)
 8007acc:	a819      	add	r0, sp, #100	; 0x64
 8007ace:	f001 fe17 	bl	8009700 <__match>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	f43f aed5 	beq.w	8007882 <_strtod_l+0xba>
 8007ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b28      	cmp	r3, #40	; 0x28
 8007ade:	d12c      	bne.n	8007b3a <_strtod_l+0x372>
 8007ae0:	4998      	ldr	r1, [pc, #608]	; (8007d44 <_strtod_l+0x57c>)
 8007ae2:	aa1c      	add	r2, sp, #112	; 0x70
 8007ae4:	a819      	add	r0, sp, #100	; 0x64
 8007ae6:	f001 fe1f 	bl	8009728 <__hexnan>
 8007aea:	2805      	cmp	r0, #5
 8007aec:	d125      	bne.n	8007b3a <_strtod_l+0x372>
 8007aee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007af0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007af4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007af8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007afc:	e6a5      	b.n	800784a <_strtod_l+0x82>
 8007afe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007b02:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007b06:	e7bc      	b.n	8007a82 <_strtod_l+0x2ba>
 8007b08:	2a6e      	cmp	r2, #110	; 0x6e
 8007b0a:	e7dc      	b.n	8007ac6 <_strtod_l+0x2fe>
 8007b0c:	498e      	ldr	r1, [pc, #568]	; (8007d48 <_strtod_l+0x580>)
 8007b0e:	a819      	add	r0, sp, #100	; 0x64
 8007b10:	f001 fdf6 	bl	8009700 <__match>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f43f aeb4 	beq.w	8007882 <_strtod_l+0xba>
 8007b1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b1c:	498b      	ldr	r1, [pc, #556]	; (8007d4c <_strtod_l+0x584>)
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	a819      	add	r0, sp, #100	; 0x64
 8007b22:	9319      	str	r3, [sp, #100]	; 0x64
 8007b24:	f001 fdec 	bl	8009700 <__match>
 8007b28:	b910      	cbnz	r0, 8007b30 <_strtod_l+0x368>
 8007b2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	9319      	str	r3, [sp, #100]	; 0x64
 8007b30:	f04f 0800 	mov.w	r8, #0
 8007b34:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007d50 <_strtod_l+0x588>
 8007b38:	e687      	b.n	800784a <_strtod_l+0x82>
 8007b3a:	4886      	ldr	r0, [pc, #536]	; (8007d54 <_strtod_l+0x58c>)
 8007b3c:	f002 fdce 	bl	800a6dc <nan>
 8007b40:	4680      	mov	r8, r0
 8007b42:	4689      	mov	r9, r1
 8007b44:	e681      	b.n	800784a <_strtod_l+0x82>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	f1bb 0f00 	cmp.w	fp, #0
 8007b4c:	bf08      	it	eq
 8007b4e:	46a3      	moveq	fp, r4
 8007b50:	1aeb      	subs	r3, r5, r3
 8007b52:	2c10      	cmp	r4, #16
 8007b54:	9806      	ldr	r0, [sp, #24]
 8007b56:	4626      	mov	r6, r4
 8007b58:	9307      	str	r3, [sp, #28]
 8007b5a:	bfa8      	it	ge
 8007b5c:	2610      	movge	r6, #16
 8007b5e:	f7f8 fcb7 	bl	80004d0 <__aeabi_ui2d>
 8007b62:	2c09      	cmp	r4, #9
 8007b64:	4680      	mov	r8, r0
 8007b66:	4689      	mov	r9, r1
 8007b68:	dd13      	ble.n	8007b92 <_strtod_l+0x3ca>
 8007b6a:	4b7b      	ldr	r3, [pc, #492]	; (8007d58 <_strtod_l+0x590>)
 8007b6c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b70:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b74:	f7f8 fd26 	bl	80005c4 <__aeabi_dmul>
 8007b78:	4680      	mov	r8, r0
 8007b7a:	9805      	ldr	r0, [sp, #20]
 8007b7c:	4689      	mov	r9, r1
 8007b7e:	f7f8 fca7 	bl	80004d0 <__aeabi_ui2d>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4640      	mov	r0, r8
 8007b88:	4649      	mov	r1, r9
 8007b8a:	f7f8 fb65 	bl	8000258 <__adddf3>
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	2c0f      	cmp	r4, #15
 8007b94:	dc36      	bgt.n	8007c04 <_strtod_l+0x43c>
 8007b96:	9b07      	ldr	r3, [sp, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f43f ae56 	beq.w	800784a <_strtod_l+0x82>
 8007b9e:	dd22      	ble.n	8007be6 <_strtod_l+0x41e>
 8007ba0:	2b16      	cmp	r3, #22
 8007ba2:	dc09      	bgt.n	8007bb8 <_strtod_l+0x3f0>
 8007ba4:	496c      	ldr	r1, [pc, #432]	; (8007d58 <_strtod_l+0x590>)
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bac:	464b      	mov	r3, r9
 8007bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb2:	f7f8 fd07 	bl	80005c4 <__aeabi_dmul>
 8007bb6:	e7c3      	b.n	8007b40 <_strtod_l+0x378>
 8007bb8:	9a07      	ldr	r2, [sp, #28]
 8007bba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	db20      	blt.n	8007c04 <_strtod_l+0x43c>
 8007bc2:	4d65      	ldr	r5, [pc, #404]	; (8007d58 <_strtod_l+0x590>)
 8007bc4:	f1c4 040f 	rsb	r4, r4, #15
 8007bc8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007bcc:	4642      	mov	r2, r8
 8007bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	f7f8 fcf6 	bl	80005c4 <__aeabi_dmul>
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	1b1c      	subs	r4, r3, r4
 8007bdc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007be0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007be4:	e7e5      	b.n	8007bb2 <_strtod_l+0x3ea>
 8007be6:	9b07      	ldr	r3, [sp, #28]
 8007be8:	3316      	adds	r3, #22
 8007bea:	db0b      	blt.n	8007c04 <_strtod_l+0x43c>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	4640      	mov	r0, r8
 8007bf0:	1b5d      	subs	r5, r3, r5
 8007bf2:	4b59      	ldr	r3, [pc, #356]	; (8007d58 <_strtod_l+0x590>)
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007bfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bfe:	f7f8 fe0b 	bl	8000818 <__aeabi_ddiv>
 8007c02:	e79d      	b.n	8007b40 <_strtod_l+0x378>
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	1ba6      	subs	r6, r4, r6
 8007c08:	441e      	add	r6, r3
 8007c0a:	2e00      	cmp	r6, #0
 8007c0c:	dd74      	ble.n	8007cf8 <_strtod_l+0x530>
 8007c0e:	f016 030f 	ands.w	r3, r6, #15
 8007c12:	d00a      	beq.n	8007c2a <_strtod_l+0x462>
 8007c14:	4950      	ldr	r1, [pc, #320]	; (8007d58 <_strtod_l+0x590>)
 8007c16:	4642      	mov	r2, r8
 8007c18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c20:	464b      	mov	r3, r9
 8007c22:	f7f8 fccf 	bl	80005c4 <__aeabi_dmul>
 8007c26:	4680      	mov	r8, r0
 8007c28:	4689      	mov	r9, r1
 8007c2a:	f036 060f 	bics.w	r6, r6, #15
 8007c2e:	d052      	beq.n	8007cd6 <_strtod_l+0x50e>
 8007c30:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007c34:	dd27      	ble.n	8007c86 <_strtod_l+0x4be>
 8007c36:	f04f 0b00 	mov.w	fp, #0
 8007c3a:	f8cd b010 	str.w	fp, [sp, #16]
 8007c3e:	f8cd b020 	str.w	fp, [sp, #32]
 8007c42:	f8cd b018 	str.w	fp, [sp, #24]
 8007c46:	2322      	movs	r3, #34	; 0x22
 8007c48:	f04f 0800 	mov.w	r8, #0
 8007c4c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007d50 <_strtod_l+0x588>
 8007c50:	f8ca 3000 	str.w	r3, [sl]
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f43f adf7 	beq.w	800784a <_strtod_l+0x82>
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c60:	f001 fe78 	bl	8009954 <_Bfree>
 8007c64:	4650      	mov	r0, sl
 8007c66:	9906      	ldr	r1, [sp, #24]
 8007c68:	f001 fe74 	bl	8009954 <_Bfree>
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	9904      	ldr	r1, [sp, #16]
 8007c70:	f001 fe70 	bl	8009954 <_Bfree>
 8007c74:	4650      	mov	r0, sl
 8007c76:	9908      	ldr	r1, [sp, #32]
 8007c78:	f001 fe6c 	bl	8009954 <_Bfree>
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	4650      	mov	r0, sl
 8007c80:	f001 fe68 	bl	8009954 <_Bfree>
 8007c84:	e5e1      	b.n	800784a <_strtod_l+0x82>
 8007c86:	4b35      	ldr	r3, [pc, #212]	; (8007d5c <_strtod_l+0x594>)
 8007c88:	4640      	mov	r0, r8
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4649      	mov	r1, r9
 8007c90:	461f      	mov	r7, r3
 8007c92:	1136      	asrs	r6, r6, #4
 8007c94:	2e01      	cmp	r6, #1
 8007c96:	dc21      	bgt.n	8007cdc <_strtod_l+0x514>
 8007c98:	b10b      	cbz	r3, 8007c9e <_strtod_l+0x4d6>
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	4689      	mov	r9, r1
 8007c9e:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <_strtod_l+0x594>)
 8007ca0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ca4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ca8:	4642      	mov	r2, r8
 8007caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cae:	464b      	mov	r3, r9
 8007cb0:	f7f8 fc88 	bl	80005c4 <__aeabi_dmul>
 8007cb4:	4b26      	ldr	r3, [pc, #152]	; (8007d50 <_strtod_l+0x588>)
 8007cb6:	460a      	mov	r2, r1
 8007cb8:	400b      	ands	r3, r1
 8007cba:	4929      	ldr	r1, [pc, #164]	; (8007d60 <_strtod_l+0x598>)
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	428b      	cmp	r3, r1
 8007cc0:	d8b9      	bhi.n	8007c36 <_strtod_l+0x46e>
 8007cc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007cc6:	428b      	cmp	r3, r1
 8007cc8:	bf86      	itte	hi
 8007cca:	f04f 38ff 	movhi.w	r8, #4294967295
 8007cce:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007d64 <_strtod_l+0x59c>
 8007cd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9305      	str	r3, [sp, #20]
 8007cda:	e07f      	b.n	8007ddc <_strtod_l+0x614>
 8007cdc:	07f2      	lsls	r2, r6, #31
 8007cde:	d505      	bpl.n	8007cec <_strtod_l+0x524>
 8007ce0:	9b05      	ldr	r3, [sp, #20]
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 fc6d 	bl	80005c4 <__aeabi_dmul>
 8007cea:	2301      	movs	r3, #1
 8007cec:	9a05      	ldr	r2, [sp, #20]
 8007cee:	3701      	adds	r7, #1
 8007cf0:	3208      	adds	r2, #8
 8007cf2:	1076      	asrs	r6, r6, #1
 8007cf4:	9205      	str	r2, [sp, #20]
 8007cf6:	e7cd      	b.n	8007c94 <_strtod_l+0x4cc>
 8007cf8:	d0ed      	beq.n	8007cd6 <_strtod_l+0x50e>
 8007cfa:	4276      	negs	r6, r6
 8007cfc:	f016 020f 	ands.w	r2, r6, #15
 8007d00:	d00a      	beq.n	8007d18 <_strtod_l+0x550>
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <_strtod_l+0x590>)
 8007d04:	4640      	mov	r0, r8
 8007d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 fd82 	bl	8000818 <__aeabi_ddiv>
 8007d14:	4680      	mov	r8, r0
 8007d16:	4689      	mov	r9, r1
 8007d18:	1136      	asrs	r6, r6, #4
 8007d1a:	d0dc      	beq.n	8007cd6 <_strtod_l+0x50e>
 8007d1c:	2e1f      	cmp	r6, #31
 8007d1e:	dd23      	ble.n	8007d68 <_strtod_l+0x5a0>
 8007d20:	f04f 0b00 	mov.w	fp, #0
 8007d24:	f8cd b010 	str.w	fp, [sp, #16]
 8007d28:	f8cd b020 	str.w	fp, [sp, #32]
 8007d2c:	f8cd b018 	str.w	fp, [sp, #24]
 8007d30:	2322      	movs	r3, #34	; 0x22
 8007d32:	f04f 0800 	mov.w	r8, #0
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	f8ca 3000 	str.w	r3, [sl]
 8007d3e:	e789      	b.n	8007c54 <_strtod_l+0x48c>
 8007d40:	0800b529 	.word	0x0800b529
 8007d44:	0800b56c 	.word	0x0800b56c
 8007d48:	0800b521 	.word	0x0800b521
 8007d4c:	0800b6ac 	.word	0x0800b6ac
 8007d50:	7ff00000 	.word	0x7ff00000
 8007d54:	0800b958 	.word	0x0800b958
 8007d58:	0800b838 	.word	0x0800b838
 8007d5c:	0800b810 	.word	0x0800b810
 8007d60:	7ca00000 	.word	0x7ca00000
 8007d64:	7fefffff 	.word	0x7fefffff
 8007d68:	f016 0310 	ands.w	r3, r6, #16
 8007d6c:	bf18      	it	ne
 8007d6e:	236a      	movne	r3, #106	; 0x6a
 8007d70:	4640      	mov	r0, r8
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	4649      	mov	r1, r9
 8007d76:	2300      	movs	r3, #0
 8007d78:	4fb0      	ldr	r7, [pc, #704]	; (800803c <_strtod_l+0x874>)
 8007d7a:	07f2      	lsls	r2, r6, #31
 8007d7c:	d504      	bpl.n	8007d88 <_strtod_l+0x5c0>
 8007d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d82:	f7f8 fc1f 	bl	80005c4 <__aeabi_dmul>
 8007d86:	2301      	movs	r3, #1
 8007d88:	1076      	asrs	r6, r6, #1
 8007d8a:	f107 0708 	add.w	r7, r7, #8
 8007d8e:	d1f4      	bne.n	8007d7a <_strtod_l+0x5b2>
 8007d90:	b10b      	cbz	r3, 8007d96 <_strtod_l+0x5ce>
 8007d92:	4680      	mov	r8, r0
 8007d94:	4689      	mov	r9, r1
 8007d96:	9b05      	ldr	r3, [sp, #20]
 8007d98:	b1c3      	cbz	r3, 8007dcc <_strtod_l+0x604>
 8007d9a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007d9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	4649      	mov	r1, r9
 8007da6:	dd11      	ble.n	8007dcc <_strtod_l+0x604>
 8007da8:	2b1f      	cmp	r3, #31
 8007daa:	f340 8127 	ble.w	8007ffc <_strtod_l+0x834>
 8007dae:	2b34      	cmp	r3, #52	; 0x34
 8007db0:	bfd8      	it	le
 8007db2:	f04f 33ff 	movle.w	r3, #4294967295
 8007db6:	f04f 0800 	mov.w	r8, #0
 8007dba:	bfcf      	iteee	gt
 8007dbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007dc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007dc4:	fa03 f202 	lslle.w	r2, r3, r2
 8007dc8:	ea02 0901 	andle.w	r9, r2, r1
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fe5e 	bl	8000a94 <__aeabi_dcmpeq>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d1a1      	bne.n	8007d20 <_strtod_l+0x558>
 8007ddc:	9b06      	ldr	r3, [sp, #24]
 8007dde:	465a      	mov	r2, fp
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	4650      	mov	r0, sl
 8007de4:	4623      	mov	r3, r4
 8007de6:	9908      	ldr	r1, [sp, #32]
 8007de8:	f001 fe1c 	bl	8009a24 <__s2b>
 8007dec:	9008      	str	r0, [sp, #32]
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f af21 	beq.w	8007c36 <_strtod_l+0x46e>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	f04f 0b00 	mov.w	fp, #0
 8007dfa:	1b5d      	subs	r5, r3, r5
 8007dfc:	9b07      	ldr	r3, [sp, #28]
 8007dfe:	f8cd b010 	str.w	fp, [sp, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bfb4      	ite	lt
 8007e06:	462b      	movlt	r3, r5
 8007e08:	2300      	movge	r3, #0
 8007e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e0c:	9b07      	ldr	r3, [sp, #28]
 8007e0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007e12:	9314      	str	r3, [sp, #80]	; 0x50
 8007e14:	9b08      	ldr	r3, [sp, #32]
 8007e16:	4650      	mov	r0, sl
 8007e18:	6859      	ldr	r1, [r3, #4]
 8007e1a:	f001 fd5b 	bl	80098d4 <_Balloc>
 8007e1e:	9006      	str	r0, [sp, #24]
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f43f af10 	beq.w	8007c46 <_strtod_l+0x47e>
 8007e26:	9b08      	ldr	r3, [sp, #32]
 8007e28:	300c      	adds	r0, #12
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	f103 010c 	add.w	r1, r3, #12
 8007e30:	3202      	adds	r2, #2
 8007e32:	0092      	lsls	r2, r2, #2
 8007e34:	f001 fd40 	bl	80098b8 <memcpy>
 8007e38:	ab1c      	add	r3, sp, #112	; 0x70
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	4650      	mov	r0, sl
 8007e46:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007e4a:	f002 f92d 	bl	800a0a8 <__d2b>
 8007e4e:	901a      	str	r0, [sp, #104]	; 0x68
 8007e50:	2800      	cmp	r0, #0
 8007e52:	f43f aef8 	beq.w	8007c46 <_strtod_l+0x47e>
 8007e56:	2101      	movs	r1, #1
 8007e58:	4650      	mov	r0, sl
 8007e5a:	f001 fe7b 	bl	8009b54 <__i2b>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	9004      	str	r0, [sp, #16]
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f43f aeef 	beq.w	8007c46 <_strtod_l+0x47e>
 8007e68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007e6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	bfab      	itete	ge
 8007e70:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007e72:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007e74:	18ee      	addge	r6, r5, r3
 8007e76:	1b5c      	sublt	r4, r3, r5
 8007e78:	9b05      	ldr	r3, [sp, #20]
 8007e7a:	bfa8      	it	ge
 8007e7c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007e7e:	eba5 0503 	sub.w	r5, r5, r3
 8007e82:	4415      	add	r5, r2
 8007e84:	4b6e      	ldr	r3, [pc, #440]	; (8008040 <_strtod_l+0x878>)
 8007e86:	f105 35ff 	add.w	r5, r5, #4294967295
 8007e8a:	bfb8      	it	lt
 8007e8c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007e8e:	429d      	cmp	r5, r3
 8007e90:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e94:	f280 80c4 	bge.w	8008020 <_strtod_l+0x858>
 8007e98:	1b5b      	subs	r3, r3, r5
 8007e9a:	2b1f      	cmp	r3, #31
 8007e9c:	f04f 0701 	mov.w	r7, #1
 8007ea0:	eba2 0203 	sub.w	r2, r2, r3
 8007ea4:	f300 80b1 	bgt.w	800800a <_strtod_l+0x842>
 8007ea8:	2500      	movs	r5, #0
 8007eaa:	fa07 f303 	lsl.w	r3, r7, r3
 8007eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb0:	18b7      	adds	r7, r6, r2
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	42be      	cmp	r6, r7
 8007eb6:	4414      	add	r4, r2
 8007eb8:	441c      	add	r4, r3
 8007eba:	4633      	mov	r3, r6
 8007ebc:	bfa8      	it	ge
 8007ebe:	463b      	movge	r3, r7
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	bfa8      	it	ge
 8007ec4:	4623      	movge	r3, r4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfc2      	ittt	gt
 8007eca:	1aff      	subgt	r7, r7, r3
 8007ecc:	1ae4      	subgt	r4, r4, r3
 8007ece:	1af6      	subgt	r6, r6, r3
 8007ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd17      	ble.n	8007f06 <_strtod_l+0x73e>
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4650      	mov	r0, sl
 8007eda:	9904      	ldr	r1, [sp, #16]
 8007edc:	f001 fef8 	bl	8009cd0 <__pow5mult>
 8007ee0:	9004      	str	r0, [sp, #16]
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f43f aeaf 	beq.w	8007c46 <_strtod_l+0x47e>
 8007ee8:	4601      	mov	r1, r0
 8007eea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007eec:	4650      	mov	r0, sl
 8007eee:	f001 fe47 	bl	8009b80 <__multiply>
 8007ef2:	9009      	str	r0, [sp, #36]	; 0x24
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f43f aea6 	beq.w	8007c46 <_strtod_l+0x47e>
 8007efa:	4650      	mov	r0, sl
 8007efc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007efe:	f001 fd29 	bl	8009954 <_Bfree>
 8007f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f04:	931a      	str	r3, [sp, #104]	; 0x68
 8007f06:	2f00      	cmp	r7, #0
 8007f08:	f300 808e 	bgt.w	8008028 <_strtod_l+0x860>
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dd08      	ble.n	8007f24 <_strtod_l+0x75c>
 8007f12:	4650      	mov	r0, sl
 8007f14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f16:	9906      	ldr	r1, [sp, #24]
 8007f18:	f001 feda 	bl	8009cd0 <__pow5mult>
 8007f1c:	9006      	str	r0, [sp, #24]
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f ae91 	beq.w	8007c46 <_strtod_l+0x47e>
 8007f24:	2c00      	cmp	r4, #0
 8007f26:	dd08      	ble.n	8007f3a <_strtod_l+0x772>
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	9906      	ldr	r1, [sp, #24]
 8007f2e:	f001 ff29 	bl	8009d84 <__lshift>
 8007f32:	9006      	str	r0, [sp, #24]
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f43f ae86 	beq.w	8007c46 <_strtod_l+0x47e>
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	dd08      	ble.n	8007f50 <_strtod_l+0x788>
 8007f3e:	4632      	mov	r2, r6
 8007f40:	4650      	mov	r0, sl
 8007f42:	9904      	ldr	r1, [sp, #16]
 8007f44:	f001 ff1e 	bl	8009d84 <__lshift>
 8007f48:	9004      	str	r0, [sp, #16]
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f43f ae7b 	beq.w	8007c46 <_strtod_l+0x47e>
 8007f50:	4650      	mov	r0, sl
 8007f52:	9a06      	ldr	r2, [sp, #24]
 8007f54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f56:	f001 ffa1 	bl	8009e9c <__mdiff>
 8007f5a:	4683      	mov	fp, r0
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	f43f ae72 	beq.w	8007c46 <_strtod_l+0x47e>
 8007f62:	2400      	movs	r4, #0
 8007f64:	68c3      	ldr	r3, [r0, #12]
 8007f66:	9904      	ldr	r1, [sp, #16]
 8007f68:	60c4      	str	r4, [r0, #12]
 8007f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f6c:	f001 ff7a 	bl	8009e64 <__mcmp>
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	da6b      	bge.n	800804c <_strtod_l+0x884>
 8007f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f76:	ea53 0308 	orrs.w	r3, r3, r8
 8007f7a:	f040 8091 	bne.w	80080a0 <_strtod_l+0x8d8>
 8007f7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 808c 	bne.w	80080a0 <_strtod_l+0x8d8>
 8007f88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f8c:	0d1b      	lsrs	r3, r3, #20
 8007f8e:	051b      	lsls	r3, r3, #20
 8007f90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f94:	f240 8084 	bls.w	80080a0 <_strtod_l+0x8d8>
 8007f98:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007f9c:	b91b      	cbnz	r3, 8007fa6 <_strtod_l+0x7de>
 8007f9e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	dd7c      	ble.n	80080a0 <_strtod_l+0x8d8>
 8007fa6:	4659      	mov	r1, fp
 8007fa8:	2201      	movs	r2, #1
 8007faa:	4650      	mov	r0, sl
 8007fac:	f001 feea 	bl	8009d84 <__lshift>
 8007fb0:	9904      	ldr	r1, [sp, #16]
 8007fb2:	4683      	mov	fp, r0
 8007fb4:	f001 ff56 	bl	8009e64 <__mcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	dd71      	ble.n	80080a0 <_strtod_l+0x8d8>
 8007fbc:	9905      	ldr	r1, [sp, #20]
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	4a20      	ldr	r2, [pc, #128]	; (8008044 <_strtod_l+0x87c>)
 8007fc2:	2900      	cmp	r1, #0
 8007fc4:	f000 808c 	beq.w	80080e0 <_strtod_l+0x918>
 8007fc8:	ea02 0109 	and.w	r1, r2, r9
 8007fcc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007fd0:	f300 8086 	bgt.w	80080e0 <_strtod_l+0x918>
 8007fd4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007fd8:	f77f aeaa 	ble.w	8007d30 <_strtod_l+0x568>
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <_strtod_l+0x880>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f7f8 faee 	bl	80005c4 <__aeabi_dmul>
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4303      	orrs	r3, r0
 8007fec:	bf08      	it	eq
 8007fee:	2322      	moveq	r3, #34	; 0x22
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	4689      	mov	r9, r1
 8007ff4:	bf08      	it	eq
 8007ff6:	f8ca 3000 	streq.w	r3, [sl]
 8007ffa:	e62f      	b.n	8007c5c <_strtod_l+0x494>
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	ea03 0808 	and.w	r8, r3, r8
 8008008:	e6e0      	b.n	8007dcc <_strtod_l+0x604>
 800800a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800800e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008012:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008016:	35e2      	adds	r5, #226	; 0xe2
 8008018:	fa07 f505 	lsl.w	r5, r7, r5
 800801c:	970f      	str	r7, [sp, #60]	; 0x3c
 800801e:	e747      	b.n	8007eb0 <_strtod_l+0x6e8>
 8008020:	2301      	movs	r3, #1
 8008022:	2500      	movs	r5, #0
 8008024:	930f      	str	r3, [sp, #60]	; 0x3c
 8008026:	e743      	b.n	8007eb0 <_strtod_l+0x6e8>
 8008028:	463a      	mov	r2, r7
 800802a:	4650      	mov	r0, sl
 800802c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800802e:	f001 fea9 	bl	8009d84 <__lshift>
 8008032:	901a      	str	r0, [sp, #104]	; 0x68
 8008034:	2800      	cmp	r0, #0
 8008036:	f47f af69 	bne.w	8007f0c <_strtod_l+0x744>
 800803a:	e604      	b.n	8007c46 <_strtod_l+0x47e>
 800803c:	0800b580 	.word	0x0800b580
 8008040:	fffffc02 	.word	0xfffffc02
 8008044:	7ff00000 	.word	0x7ff00000
 8008048:	39500000 	.word	0x39500000
 800804c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008050:	d165      	bne.n	800811e <_strtod_l+0x956>
 8008052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008058:	b35a      	cbz	r2, 80080b2 <_strtod_l+0x8ea>
 800805a:	4a99      	ldr	r2, [pc, #612]	; (80082c0 <_strtod_l+0xaf8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d12b      	bne.n	80080b8 <_strtod_l+0x8f0>
 8008060:	9b05      	ldr	r3, [sp, #20]
 8008062:	4641      	mov	r1, r8
 8008064:	b303      	cbz	r3, 80080a8 <_strtod_l+0x8e0>
 8008066:	464a      	mov	r2, r9
 8008068:	4b96      	ldr	r3, [pc, #600]	; (80082c4 <_strtod_l+0xafc>)
 800806a:	4013      	ands	r3, r2
 800806c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	d81b      	bhi.n	80080ae <_strtod_l+0x8e6>
 8008076:	0d1b      	lsrs	r3, r3, #20
 8008078:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800807c:	fa02 f303 	lsl.w	r3, r2, r3
 8008080:	4299      	cmp	r1, r3
 8008082:	d119      	bne.n	80080b8 <_strtod_l+0x8f0>
 8008084:	4b90      	ldr	r3, [pc, #576]	; (80082c8 <_strtod_l+0xb00>)
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	429a      	cmp	r2, r3
 800808a:	d102      	bne.n	8008092 <_strtod_l+0x8ca>
 800808c:	3101      	adds	r1, #1
 800808e:	f43f adda 	beq.w	8007c46 <_strtod_l+0x47e>
 8008092:	f04f 0800 	mov.w	r8, #0
 8008096:	4b8b      	ldr	r3, [pc, #556]	; (80082c4 <_strtod_l+0xafc>)
 8008098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800809a:	401a      	ands	r2, r3
 800809c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d19a      	bne.n	8007fdc <_strtod_l+0x814>
 80080a6:	e5d9      	b.n	8007c5c <_strtod_l+0x494>
 80080a8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ac:	e7e8      	b.n	8008080 <_strtod_l+0x8b8>
 80080ae:	4613      	mov	r3, r2
 80080b0:	e7e6      	b.n	8008080 <_strtod_l+0x8b8>
 80080b2:	ea53 0308 	orrs.w	r3, r3, r8
 80080b6:	d081      	beq.n	8007fbc <_strtod_l+0x7f4>
 80080b8:	b1e5      	cbz	r5, 80080f4 <_strtod_l+0x92c>
 80080ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080bc:	421d      	tst	r5, r3
 80080be:	d0ef      	beq.n	80080a0 <_strtod_l+0x8d8>
 80080c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	9a05      	ldr	r2, [sp, #20]
 80080c8:	b1c3      	cbz	r3, 80080fc <_strtod_l+0x934>
 80080ca:	f7ff fb59 	bl	8007780 <sulp>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080d6:	f7f8 f8bf 	bl	8000258 <__adddf3>
 80080da:	4680      	mov	r8, r0
 80080dc:	4689      	mov	r9, r1
 80080de:	e7df      	b.n	80080a0 <_strtod_l+0x8d8>
 80080e0:	4013      	ands	r3, r2
 80080e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80080e6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80080ea:	f04f 38ff 	mov.w	r8, #4294967295
 80080ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80080f2:	e7d5      	b.n	80080a0 <_strtod_l+0x8d8>
 80080f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080f6:	ea13 0f08 	tst.w	r3, r8
 80080fa:	e7e0      	b.n	80080be <_strtod_l+0x8f6>
 80080fc:	f7ff fb40 	bl	8007780 <sulp>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008108:	f7f8 f8a4 	bl	8000254 <__aeabi_dsub>
 800810c:	2200      	movs	r2, #0
 800810e:	2300      	movs	r3, #0
 8008110:	4680      	mov	r8, r0
 8008112:	4689      	mov	r9, r1
 8008114:	f7f8 fcbe 	bl	8000a94 <__aeabi_dcmpeq>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0c1      	beq.n	80080a0 <_strtod_l+0x8d8>
 800811c:	e608      	b.n	8007d30 <_strtod_l+0x568>
 800811e:	4658      	mov	r0, fp
 8008120:	9904      	ldr	r1, [sp, #16]
 8008122:	f002 f81d 	bl	800a160 <__ratio>
 8008126:	2200      	movs	r2, #0
 8008128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800812c:	4606      	mov	r6, r0
 800812e:	460f      	mov	r7, r1
 8008130:	f7f8 fcc4 	bl	8000abc <__aeabi_dcmple>
 8008134:	2800      	cmp	r0, #0
 8008136:	d070      	beq.n	800821a <_strtod_l+0xa52>
 8008138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d042      	beq.n	80081c4 <_strtod_l+0x9fc>
 800813e:	2600      	movs	r6, #0
 8008140:	4f62      	ldr	r7, [pc, #392]	; (80082cc <_strtod_l+0xb04>)
 8008142:	4d62      	ldr	r5, [pc, #392]	; (80082cc <_strtod_l+0xb04>)
 8008144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800814a:	0d1b      	lsrs	r3, r3, #20
 800814c:	051b      	lsls	r3, r3, #20
 800814e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008152:	4b5f      	ldr	r3, [pc, #380]	; (80082d0 <_strtod_l+0xb08>)
 8008154:	429a      	cmp	r2, r3
 8008156:	f040 80c3 	bne.w	80082e0 <_strtod_l+0xb18>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	4640      	mov	r0, r8
 800815e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008162:	4649      	mov	r1, r9
 8008164:	f001 ff26 	bl	8009fb4 <__ulp>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fa28 	bl	80005c4 <__aeabi_dmul>
 8008174:	4642      	mov	r2, r8
 8008176:	464b      	mov	r3, r9
 8008178:	f7f8 f86e 	bl	8000258 <__adddf3>
 800817c:	460b      	mov	r3, r1
 800817e:	4951      	ldr	r1, [pc, #324]	; (80082c4 <_strtod_l+0xafc>)
 8008180:	4a54      	ldr	r2, [pc, #336]	; (80082d4 <_strtod_l+0xb0c>)
 8008182:	4019      	ands	r1, r3
 8008184:	4291      	cmp	r1, r2
 8008186:	4680      	mov	r8, r0
 8008188:	d95d      	bls.n	8008246 <_strtod_l+0xa7e>
 800818a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800818c:	4b4e      	ldr	r3, [pc, #312]	; (80082c8 <_strtod_l+0xb00>)
 800818e:	429a      	cmp	r2, r3
 8008190:	d103      	bne.n	800819a <_strtod_l+0x9d2>
 8008192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008194:	3301      	adds	r3, #1
 8008196:	f43f ad56 	beq.w	8007c46 <_strtod_l+0x47e>
 800819a:	f04f 38ff 	mov.w	r8, #4294967295
 800819e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80082c8 <_strtod_l+0xb00>
 80081a2:	4650      	mov	r0, sl
 80081a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081a6:	f001 fbd5 	bl	8009954 <_Bfree>
 80081aa:	4650      	mov	r0, sl
 80081ac:	9906      	ldr	r1, [sp, #24]
 80081ae:	f001 fbd1 	bl	8009954 <_Bfree>
 80081b2:	4650      	mov	r0, sl
 80081b4:	9904      	ldr	r1, [sp, #16]
 80081b6:	f001 fbcd 	bl	8009954 <_Bfree>
 80081ba:	4659      	mov	r1, fp
 80081bc:	4650      	mov	r0, sl
 80081be:	f001 fbc9 	bl	8009954 <_Bfree>
 80081c2:	e627      	b.n	8007e14 <_strtod_l+0x64c>
 80081c4:	f1b8 0f00 	cmp.w	r8, #0
 80081c8:	d119      	bne.n	80081fe <_strtod_l+0xa36>
 80081ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d0:	b9e3      	cbnz	r3, 800820c <_strtod_l+0xa44>
 80081d2:	2200      	movs	r2, #0
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <_strtod_l+0xb04>)
 80081da:	f7f8 fc65 	bl	8000aa8 <__aeabi_dcmplt>
 80081de:	b9c8      	cbnz	r0, 8008214 <_strtod_l+0xa4c>
 80081e0:	2200      	movs	r2, #0
 80081e2:	4630      	mov	r0, r6
 80081e4:	4639      	mov	r1, r7
 80081e6:	4b3c      	ldr	r3, [pc, #240]	; (80082d8 <_strtod_l+0xb10>)
 80081e8:	f7f8 f9ec 	bl	80005c4 <__aeabi_dmul>
 80081ec:	4604      	mov	r4, r0
 80081ee:	460d      	mov	r5, r1
 80081f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80081f4:	9416      	str	r4, [sp, #88]	; 0x58
 80081f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80081f8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80081fc:	e7a2      	b.n	8008144 <_strtod_l+0x97c>
 80081fe:	f1b8 0f01 	cmp.w	r8, #1
 8008202:	d103      	bne.n	800820c <_strtod_l+0xa44>
 8008204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	f43f ad92 	beq.w	8007d30 <_strtod_l+0x568>
 800820c:	2600      	movs	r6, #0
 800820e:	2400      	movs	r4, #0
 8008210:	4f32      	ldr	r7, [pc, #200]	; (80082dc <_strtod_l+0xb14>)
 8008212:	e796      	b.n	8008142 <_strtod_l+0x97a>
 8008214:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008216:	4d30      	ldr	r5, [pc, #192]	; (80082d8 <_strtod_l+0xb10>)
 8008218:	e7ea      	b.n	80081f0 <_strtod_l+0xa28>
 800821a:	4b2f      	ldr	r3, [pc, #188]	; (80082d8 <_strtod_l+0xb10>)
 800821c:	2200      	movs	r2, #0
 800821e:	4630      	mov	r0, r6
 8008220:	4639      	mov	r1, r7
 8008222:	f7f8 f9cf 	bl	80005c4 <__aeabi_dmul>
 8008226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
 800822c:	b933      	cbnz	r3, 800823c <_strtod_l+0xa74>
 800822e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008232:	9010      	str	r0, [sp, #64]	; 0x40
 8008234:	9311      	str	r3, [sp, #68]	; 0x44
 8008236:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800823a:	e783      	b.n	8008144 <_strtod_l+0x97c>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008244:	e7f7      	b.n	8008236 <_strtod_l+0xa6e>
 8008246:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800824a:	9b05      	ldr	r3, [sp, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1a8      	bne.n	80081a2 <_strtod_l+0x9da>
 8008250:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008256:	0d1b      	lsrs	r3, r3, #20
 8008258:	051b      	lsls	r3, r3, #20
 800825a:	429a      	cmp	r2, r3
 800825c:	d1a1      	bne.n	80081a2 <_strtod_l+0x9da>
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 fd0f 	bl	8000c84 <__aeabi_d2lz>
 8008266:	f7f8 f97f 	bl	8000568 <__aeabi_l2d>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	f7f7 ffef 	bl	8000254 <__aeabi_dsub>
 8008276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800827c:	ea43 0308 	orr.w	r3, r3, r8
 8008280:	4313      	orrs	r3, r2
 8008282:	4604      	mov	r4, r0
 8008284:	460d      	mov	r5, r1
 8008286:	d066      	beq.n	8008356 <_strtod_l+0xb8e>
 8008288:	a309      	add	r3, pc, #36	; (adr r3, 80082b0 <_strtod_l+0xae8>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 fc0b 	bl	8000aa8 <__aeabi_dcmplt>
 8008292:	2800      	cmp	r0, #0
 8008294:	f47f ace2 	bne.w	8007c5c <_strtod_l+0x494>
 8008298:	a307      	add	r3, pc, #28	; (adr r3, 80082b8 <_strtod_l+0xaf0>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f8 fc1f 	bl	8000ae4 <__aeabi_dcmpgt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f43f af7b 	beq.w	80081a2 <_strtod_l+0x9da>
 80082ac:	e4d6      	b.n	8007c5c <_strtod_l+0x494>
 80082ae:	bf00      	nop
 80082b0:	94a03595 	.word	0x94a03595
 80082b4:	3fdfffff 	.word	0x3fdfffff
 80082b8:	35afe535 	.word	0x35afe535
 80082bc:	3fe00000 	.word	0x3fe00000
 80082c0:	000fffff 	.word	0x000fffff
 80082c4:	7ff00000 	.word	0x7ff00000
 80082c8:	7fefffff 	.word	0x7fefffff
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	7fe00000 	.word	0x7fe00000
 80082d4:	7c9fffff 	.word	0x7c9fffff
 80082d8:	3fe00000 	.word	0x3fe00000
 80082dc:	bff00000 	.word	0xbff00000
 80082e0:	9b05      	ldr	r3, [sp, #20]
 80082e2:	b313      	cbz	r3, 800832a <_strtod_l+0xb62>
 80082e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082ea:	d81e      	bhi.n	800832a <_strtod_l+0xb62>
 80082ec:	a326      	add	r3, pc, #152	; (adr r3, 8008388 <_strtod_l+0xbc0>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 fbe1 	bl	8000abc <__aeabi_dcmple>
 80082fa:	b190      	cbz	r0, 8008322 <_strtod_l+0xb5a>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	f7f8 fc38 	bl	8000b74 <__aeabi_d2uiz>
 8008304:	2801      	cmp	r0, #1
 8008306:	bf38      	it	cc
 8008308:	2001      	movcc	r0, #1
 800830a:	f7f8 f8e1 	bl	80004d0 <__aeabi_ui2d>
 800830e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008310:	4604      	mov	r4, r0
 8008312:	460d      	mov	r5, r1
 8008314:	b9d3      	cbnz	r3, 800834c <_strtod_l+0xb84>
 8008316:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800831a:	9012      	str	r0, [sp, #72]	; 0x48
 800831c:	9313      	str	r3, [sp, #76]	; 0x4c
 800831e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008322:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008324:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008328:	1a9f      	subs	r7, r3, r2
 800832a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800832e:	f001 fe41 	bl	8009fb4 <__ulp>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 f943 	bl	80005c4 <__aeabi_dmul>
 800833e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008342:	f7f7 ff89 	bl	8000258 <__adddf3>
 8008346:	4680      	mov	r8, r0
 8008348:	4689      	mov	r9, r1
 800834a:	e77e      	b.n	800824a <_strtod_l+0xa82>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008354:	e7e3      	b.n	800831e <_strtod_l+0xb56>
 8008356:	a30e      	add	r3, pc, #56	; (adr r3, 8008390 <_strtod_l+0xbc8>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f7f8 fba4 	bl	8000aa8 <__aeabi_dcmplt>
 8008360:	e7a1      	b.n	80082a6 <_strtod_l+0xade>
 8008362:	2300      	movs	r3, #0
 8008364:	930a      	str	r3, [sp, #40]	; 0x28
 8008366:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008368:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	f7ff ba71 	b.w	8007852 <_strtod_l+0x8a>
 8008370:	2a65      	cmp	r2, #101	; 0x65
 8008372:	f43f ab63 	beq.w	8007a3c <_strtod_l+0x274>
 8008376:	2a45      	cmp	r2, #69	; 0x45
 8008378:	f43f ab60 	beq.w	8007a3c <_strtod_l+0x274>
 800837c:	2301      	movs	r3, #1
 800837e:	f7ff bb95 	b.w	8007aac <_strtod_l+0x2e4>
 8008382:	bf00      	nop
 8008384:	f3af 8000 	nop.w
 8008388:	ffc00000 	.word	0xffc00000
 800838c:	41dfffff 	.word	0x41dfffff
 8008390:	94a03595 	.word	0x94a03595
 8008394:	3fcfffff 	.word	0x3fcfffff

08008398 <_strtod_r>:
 8008398:	4b01      	ldr	r3, [pc, #4]	; (80083a0 <_strtod_r+0x8>)
 800839a:	f7ff ba15 	b.w	80077c8 <_strtod_l>
 800839e:	bf00      	nop
 80083a0:	20000074 	.word	0x20000074

080083a4 <_strtol_l.constprop.0>:
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083aa:	4680      	mov	r8, r0
 80083ac:	d001      	beq.n	80083b2 <_strtol_l.constprop.0+0xe>
 80083ae:	2b24      	cmp	r3, #36	; 0x24
 80083b0:	d906      	bls.n	80083c0 <_strtol_l.constprop.0+0x1c>
 80083b2:	f7fe fb21 	bl	80069f8 <__errno>
 80083b6:	2316      	movs	r3, #22
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	2000      	movs	r0, #0
 80083bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c0:	460d      	mov	r5, r1
 80083c2:	4f35      	ldr	r7, [pc, #212]	; (8008498 <_strtol_l.constprop.0+0xf4>)
 80083c4:	4628      	mov	r0, r5
 80083c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083ca:	5de6      	ldrb	r6, [r4, r7]
 80083cc:	f016 0608 	ands.w	r6, r6, #8
 80083d0:	d1f8      	bne.n	80083c4 <_strtol_l.constprop.0+0x20>
 80083d2:	2c2d      	cmp	r4, #45	; 0x2d
 80083d4:	d12f      	bne.n	8008436 <_strtol_l.constprop.0+0x92>
 80083d6:	2601      	movs	r6, #1
 80083d8:	782c      	ldrb	r4, [r5, #0]
 80083da:	1c85      	adds	r5, r0, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d057      	beq.n	8008490 <_strtol_l.constprop.0+0xec>
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d109      	bne.n	80083f8 <_strtol_l.constprop.0+0x54>
 80083e4:	2c30      	cmp	r4, #48	; 0x30
 80083e6:	d107      	bne.n	80083f8 <_strtol_l.constprop.0+0x54>
 80083e8:	7828      	ldrb	r0, [r5, #0]
 80083ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80083ee:	2858      	cmp	r0, #88	; 0x58
 80083f0:	d149      	bne.n	8008486 <_strtol_l.constprop.0+0xe2>
 80083f2:	2310      	movs	r3, #16
 80083f4:	786c      	ldrb	r4, [r5, #1]
 80083f6:	3502      	adds	r5, #2
 80083f8:	2700      	movs	r7, #0
 80083fa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80083fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008402:	fbbe f9f3 	udiv	r9, lr, r3
 8008406:	4638      	mov	r0, r7
 8008408:	fb03 ea19 	mls	sl, r3, r9, lr
 800840c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008410:	f1bc 0f09 	cmp.w	ip, #9
 8008414:	d814      	bhi.n	8008440 <_strtol_l.constprop.0+0x9c>
 8008416:	4664      	mov	r4, ip
 8008418:	42a3      	cmp	r3, r4
 800841a:	dd22      	ble.n	8008462 <_strtol_l.constprop.0+0xbe>
 800841c:	2f00      	cmp	r7, #0
 800841e:	db1d      	blt.n	800845c <_strtol_l.constprop.0+0xb8>
 8008420:	4581      	cmp	r9, r0
 8008422:	d31b      	bcc.n	800845c <_strtol_l.constprop.0+0xb8>
 8008424:	d101      	bne.n	800842a <_strtol_l.constprop.0+0x86>
 8008426:	45a2      	cmp	sl, r4
 8008428:	db18      	blt.n	800845c <_strtol_l.constprop.0+0xb8>
 800842a:	2701      	movs	r7, #1
 800842c:	fb00 4003 	mla	r0, r0, r3, r4
 8008430:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008434:	e7ea      	b.n	800840c <_strtol_l.constprop.0+0x68>
 8008436:	2c2b      	cmp	r4, #43	; 0x2b
 8008438:	bf04      	itt	eq
 800843a:	782c      	ldrbeq	r4, [r5, #0]
 800843c:	1c85      	addeq	r5, r0, #2
 800843e:	e7cd      	b.n	80083dc <_strtol_l.constprop.0+0x38>
 8008440:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008444:	f1bc 0f19 	cmp.w	ip, #25
 8008448:	d801      	bhi.n	800844e <_strtol_l.constprop.0+0xaa>
 800844a:	3c37      	subs	r4, #55	; 0x37
 800844c:	e7e4      	b.n	8008418 <_strtol_l.constprop.0+0x74>
 800844e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008452:	f1bc 0f19 	cmp.w	ip, #25
 8008456:	d804      	bhi.n	8008462 <_strtol_l.constprop.0+0xbe>
 8008458:	3c57      	subs	r4, #87	; 0x57
 800845a:	e7dd      	b.n	8008418 <_strtol_l.constprop.0+0x74>
 800845c:	f04f 37ff 	mov.w	r7, #4294967295
 8008460:	e7e6      	b.n	8008430 <_strtol_l.constprop.0+0x8c>
 8008462:	2f00      	cmp	r7, #0
 8008464:	da07      	bge.n	8008476 <_strtol_l.constprop.0+0xd2>
 8008466:	2322      	movs	r3, #34	; 0x22
 8008468:	4670      	mov	r0, lr
 800846a:	f8c8 3000 	str.w	r3, [r8]
 800846e:	2a00      	cmp	r2, #0
 8008470:	d0a4      	beq.n	80083bc <_strtol_l.constprop.0+0x18>
 8008472:	1e69      	subs	r1, r5, #1
 8008474:	e005      	b.n	8008482 <_strtol_l.constprop.0+0xde>
 8008476:	b106      	cbz	r6, 800847a <_strtol_l.constprop.0+0xd6>
 8008478:	4240      	negs	r0, r0
 800847a:	2a00      	cmp	r2, #0
 800847c:	d09e      	beq.n	80083bc <_strtol_l.constprop.0+0x18>
 800847e:	2f00      	cmp	r7, #0
 8008480:	d1f7      	bne.n	8008472 <_strtol_l.constprop.0+0xce>
 8008482:	6011      	str	r1, [r2, #0]
 8008484:	e79a      	b.n	80083bc <_strtol_l.constprop.0+0x18>
 8008486:	2430      	movs	r4, #48	; 0x30
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1b5      	bne.n	80083f8 <_strtol_l.constprop.0+0x54>
 800848c:	2308      	movs	r3, #8
 800848e:	e7b3      	b.n	80083f8 <_strtol_l.constprop.0+0x54>
 8008490:	2c30      	cmp	r4, #48	; 0x30
 8008492:	d0a9      	beq.n	80083e8 <_strtol_l.constprop.0+0x44>
 8008494:	230a      	movs	r3, #10
 8008496:	e7af      	b.n	80083f8 <_strtol_l.constprop.0+0x54>
 8008498:	0800b5a9 	.word	0x0800b5a9

0800849c <_strtol_r>:
 800849c:	f7ff bf82 	b.w	80083a4 <_strtol_l.constprop.0>

080084a0 <quorem>:
 80084a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	6903      	ldr	r3, [r0, #16]
 80084a6:	690c      	ldr	r4, [r1, #16]
 80084a8:	4607      	mov	r7, r0
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	f2c0 8082 	blt.w	80085b4 <quorem+0x114>
 80084b0:	3c01      	subs	r4, #1
 80084b2:	f100 0514 	add.w	r5, r0, #20
 80084b6:	f101 0814 	add.w	r8, r1, #20
 80084ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c8:	3301      	adds	r3, #1
 80084ca:	429a      	cmp	r2, r3
 80084cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80084d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084d8:	d331      	bcc.n	800853e <quorem+0x9e>
 80084da:	f04f 0e00 	mov.w	lr, #0
 80084de:	4640      	mov	r0, r8
 80084e0:	46ac      	mov	ip, r5
 80084e2:	46f2      	mov	sl, lr
 80084e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80084e8:	b293      	uxth	r3, r2
 80084ea:	fb06 e303 	mla	r3, r6, r3, lr
 80084ee:	0c12      	lsrs	r2, r2, #16
 80084f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	fb06 e202 	mla	r2, r6, r2, lr
 80084fa:	ebaa 0303 	sub.w	r3, sl, r3
 80084fe:	f8dc a000 	ldr.w	sl, [ip]
 8008502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008506:	fa1f fa8a 	uxth.w	sl, sl
 800850a:	4453      	add	r3, sl
 800850c:	f8dc a000 	ldr.w	sl, [ip]
 8008510:	b292      	uxth	r2, r2
 8008512:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008516:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800851a:	b29b      	uxth	r3, r3
 800851c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008520:	4581      	cmp	r9, r0
 8008522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008526:	f84c 3b04 	str.w	r3, [ip], #4
 800852a:	d2db      	bcs.n	80084e4 <quorem+0x44>
 800852c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008530:	b92b      	cbnz	r3, 800853e <quorem+0x9e>
 8008532:	9b01      	ldr	r3, [sp, #4]
 8008534:	3b04      	subs	r3, #4
 8008536:	429d      	cmp	r5, r3
 8008538:	461a      	mov	r2, r3
 800853a:	d32f      	bcc.n	800859c <quorem+0xfc>
 800853c:	613c      	str	r4, [r7, #16]
 800853e:	4638      	mov	r0, r7
 8008540:	f001 fc90 	bl	8009e64 <__mcmp>
 8008544:	2800      	cmp	r0, #0
 8008546:	db25      	blt.n	8008594 <quorem+0xf4>
 8008548:	4628      	mov	r0, r5
 800854a:	f04f 0c00 	mov.w	ip, #0
 800854e:	3601      	adds	r6, #1
 8008550:	f858 1b04 	ldr.w	r1, [r8], #4
 8008554:	f8d0 e000 	ldr.w	lr, [r0]
 8008558:	b28b      	uxth	r3, r1
 800855a:	ebac 0303 	sub.w	r3, ip, r3
 800855e:	fa1f f28e 	uxth.w	r2, lr
 8008562:	4413      	add	r3, r2
 8008564:	0c0a      	lsrs	r2, r1, #16
 8008566:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800856a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800856e:	b29b      	uxth	r3, r3
 8008570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008574:	45c1      	cmp	r9, r8
 8008576:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800857a:	f840 3b04 	str.w	r3, [r0], #4
 800857e:	d2e7      	bcs.n	8008550 <quorem+0xb0>
 8008580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008584:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008588:	b922      	cbnz	r2, 8008594 <quorem+0xf4>
 800858a:	3b04      	subs	r3, #4
 800858c:	429d      	cmp	r5, r3
 800858e:	461a      	mov	r2, r3
 8008590:	d30a      	bcc.n	80085a8 <quorem+0x108>
 8008592:	613c      	str	r4, [r7, #16]
 8008594:	4630      	mov	r0, r6
 8008596:	b003      	add	sp, #12
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	3b04      	subs	r3, #4
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	d1cb      	bne.n	800853c <quorem+0x9c>
 80085a4:	3c01      	subs	r4, #1
 80085a6:	e7c6      	b.n	8008536 <quorem+0x96>
 80085a8:	6812      	ldr	r2, [r2, #0]
 80085aa:	3b04      	subs	r3, #4
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	d1f0      	bne.n	8008592 <quorem+0xf2>
 80085b0:	3c01      	subs	r4, #1
 80085b2:	e7eb      	b.n	800858c <quorem+0xec>
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7ee      	b.n	8008596 <quorem+0xf6>

080085b8 <_dtoa_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	4616      	mov	r6, r2
 80085be:	461f      	mov	r7, r3
 80085c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085c2:	b099      	sub	sp, #100	; 0x64
 80085c4:	4605      	mov	r5, r0
 80085c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80085ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80085ce:	b974      	cbnz	r4, 80085ee <_dtoa_r+0x36>
 80085d0:	2010      	movs	r0, #16
 80085d2:	f001 f949 	bl	8009868 <malloc>
 80085d6:	4602      	mov	r2, r0
 80085d8:	6268      	str	r0, [r5, #36]	; 0x24
 80085da:	b920      	cbnz	r0, 80085e6 <_dtoa_r+0x2e>
 80085dc:	21ea      	movs	r1, #234	; 0xea
 80085de:	4ba8      	ldr	r3, [pc, #672]	; (8008880 <_dtoa_r+0x2c8>)
 80085e0:	48a8      	ldr	r0, [pc, #672]	; (8008884 <_dtoa_r+0x2cc>)
 80085e2:	f002 f8b3 	bl	800a74c <__assert_func>
 80085e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085ea:	6004      	str	r4, [r0, #0]
 80085ec:	60c4      	str	r4, [r0, #12]
 80085ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085f0:	6819      	ldr	r1, [r3, #0]
 80085f2:	b151      	cbz	r1, 800860a <_dtoa_r+0x52>
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	2301      	movs	r3, #1
 80085f8:	4093      	lsls	r3, r2
 80085fa:	604a      	str	r2, [r1, #4]
 80085fc:	608b      	str	r3, [r1, #8]
 80085fe:	4628      	mov	r0, r5
 8008600:	f001 f9a8 	bl	8009954 <_Bfree>
 8008604:	2200      	movs	r2, #0
 8008606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	1e3b      	subs	r3, r7, #0
 800860c:	bfaf      	iteee	ge
 800860e:	2300      	movge	r3, #0
 8008610:	2201      	movlt	r2, #1
 8008612:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008616:	9305      	strlt	r3, [sp, #20]
 8008618:	bfa8      	it	ge
 800861a:	f8c8 3000 	strge.w	r3, [r8]
 800861e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008622:	4b99      	ldr	r3, [pc, #612]	; (8008888 <_dtoa_r+0x2d0>)
 8008624:	bfb8      	it	lt
 8008626:	f8c8 2000 	strlt.w	r2, [r8]
 800862a:	ea33 0309 	bics.w	r3, r3, r9
 800862e:	d119      	bne.n	8008664 <_dtoa_r+0xac>
 8008630:	f242 730f 	movw	r3, #9999	; 0x270f
 8008634:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800863c:	4333      	orrs	r3, r6
 800863e:	f000 857f 	beq.w	8009140 <_dtoa_r+0xb88>
 8008642:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008644:	b953      	cbnz	r3, 800865c <_dtoa_r+0xa4>
 8008646:	4b91      	ldr	r3, [pc, #580]	; (800888c <_dtoa_r+0x2d4>)
 8008648:	e022      	b.n	8008690 <_dtoa_r+0xd8>
 800864a:	4b91      	ldr	r3, [pc, #580]	; (8008890 <_dtoa_r+0x2d8>)
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	3308      	adds	r3, #8
 8008650:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	9803      	ldr	r0, [sp, #12]
 8008656:	b019      	add	sp, #100	; 0x64
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	4b8b      	ldr	r3, [pc, #556]	; (800888c <_dtoa_r+0x2d4>)
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	3303      	adds	r3, #3
 8008662:	e7f5      	b.n	8008650 <_dtoa_r+0x98>
 8008664:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008668:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800866c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008670:	2200      	movs	r2, #0
 8008672:	2300      	movs	r3, #0
 8008674:	f7f8 fa0e 	bl	8000a94 <__aeabi_dcmpeq>
 8008678:	4680      	mov	r8, r0
 800867a:	b158      	cbz	r0, 8008694 <_dtoa_r+0xdc>
 800867c:	2301      	movs	r3, #1
 800867e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8558 	beq.w	800913a <_dtoa_r+0xb82>
 800868a:	4882      	ldr	r0, [pc, #520]	; (8008894 <_dtoa_r+0x2dc>)
 800868c:	6018      	str	r0, [r3, #0]
 800868e:	1e43      	subs	r3, r0, #1
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	e7df      	b.n	8008654 <_dtoa_r+0x9c>
 8008694:	ab16      	add	r3, sp, #88	; 0x58
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	ab17      	add	r3, sp, #92	; 0x5c
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	4628      	mov	r0, r5
 800869e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086a2:	f001 fd01 	bl	800a0a8 <__d2b>
 80086a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80086aa:	4683      	mov	fp, r0
 80086ac:	2c00      	cmp	r4, #0
 80086ae:	d07f      	beq.n	80087b0 <_dtoa_r+0x1f8>
 80086b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80086ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80086c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80086c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80086ca:	2200      	movs	r2, #0
 80086cc:	4b72      	ldr	r3, [pc, #456]	; (8008898 <_dtoa_r+0x2e0>)
 80086ce:	f7f7 fdc1 	bl	8000254 <__aeabi_dsub>
 80086d2:	a365      	add	r3, pc, #404	; (adr r3, 8008868 <_dtoa_r+0x2b0>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f7 ff74 	bl	80005c4 <__aeabi_dmul>
 80086dc:	a364      	add	r3, pc, #400	; (adr r3, 8008870 <_dtoa_r+0x2b8>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 fdb9 	bl	8000258 <__adddf3>
 80086e6:	4606      	mov	r6, r0
 80086e8:	4620      	mov	r0, r4
 80086ea:	460f      	mov	r7, r1
 80086ec:	f7f7 ff00 	bl	80004f0 <__aeabi_i2d>
 80086f0:	a361      	add	r3, pc, #388	; (adr r3, 8008878 <_dtoa_r+0x2c0>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 ff65 	bl	80005c4 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4630      	mov	r0, r6
 8008700:	4639      	mov	r1, r7
 8008702:	f7f7 fda9 	bl	8000258 <__adddf3>
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	f7f8 fa0b 	bl	8000b24 <__aeabi_d2iz>
 800870e:	2200      	movs	r2, #0
 8008710:	4682      	mov	sl, r0
 8008712:	2300      	movs	r3, #0
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 f9c6 	bl	8000aa8 <__aeabi_dcmplt>
 800871c:	b148      	cbz	r0, 8008732 <_dtoa_r+0x17a>
 800871e:	4650      	mov	r0, sl
 8008720:	f7f7 fee6 	bl	80004f0 <__aeabi_i2d>
 8008724:	4632      	mov	r2, r6
 8008726:	463b      	mov	r3, r7
 8008728:	f7f8 f9b4 	bl	8000a94 <__aeabi_dcmpeq>
 800872c:	b908      	cbnz	r0, 8008732 <_dtoa_r+0x17a>
 800872e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008732:	f1ba 0f16 	cmp.w	sl, #22
 8008736:	d858      	bhi.n	80087ea <_dtoa_r+0x232>
 8008738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800873c:	4b57      	ldr	r3, [pc, #348]	; (800889c <_dtoa_r+0x2e4>)
 800873e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f7f8 f9af 	bl	8000aa8 <__aeabi_dcmplt>
 800874a:	2800      	cmp	r0, #0
 800874c:	d04f      	beq.n	80087ee <_dtoa_r+0x236>
 800874e:	2300      	movs	r3, #0
 8008750:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008754:	930f      	str	r3, [sp, #60]	; 0x3c
 8008756:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008758:	1b1c      	subs	r4, r3, r4
 800875a:	1e63      	subs	r3, r4, #1
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	bf49      	itett	mi
 8008760:	f1c4 0301 	rsbmi	r3, r4, #1
 8008764:	2300      	movpl	r3, #0
 8008766:	9306      	strmi	r3, [sp, #24]
 8008768:	2300      	movmi	r3, #0
 800876a:	bf54      	ite	pl
 800876c:	9306      	strpl	r3, [sp, #24]
 800876e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008770:	f1ba 0f00 	cmp.w	sl, #0
 8008774:	db3d      	blt.n	80087f2 <_dtoa_r+0x23a>
 8008776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008778:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800877c:	4453      	add	r3, sl
 800877e:	9309      	str	r3, [sp, #36]	; 0x24
 8008780:	2300      	movs	r3, #0
 8008782:	930a      	str	r3, [sp, #40]	; 0x28
 8008784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008786:	2b09      	cmp	r3, #9
 8008788:	f200 808c 	bhi.w	80088a4 <_dtoa_r+0x2ec>
 800878c:	2b05      	cmp	r3, #5
 800878e:	bfc4      	itt	gt
 8008790:	3b04      	subgt	r3, #4
 8008792:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008796:	bfc8      	it	gt
 8008798:	2400      	movgt	r4, #0
 800879a:	f1a3 0302 	sub.w	r3, r3, #2
 800879e:	bfd8      	it	le
 80087a0:	2401      	movle	r4, #1
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	f200 808a 	bhi.w	80088bc <_dtoa_r+0x304>
 80087a8:	e8df f003 	tbb	[pc, r3]
 80087ac:	5b4d4f2d 	.word	0x5b4d4f2d
 80087b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80087b4:	441c      	add	r4, r3
 80087b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	bfc3      	ittte	gt
 80087be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80087c6:	fa09 f303 	lslgt.w	r3, r9, r3
 80087ca:	f1c3 0320 	rsble	r3, r3, #32
 80087ce:	bfc6      	itte	gt
 80087d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80087d4:	4318      	orrgt	r0, r3
 80087d6:	fa06 f003 	lslle.w	r0, r6, r3
 80087da:	f7f7 fe79 	bl	80004d0 <__aeabi_ui2d>
 80087de:	2301      	movs	r3, #1
 80087e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80087e4:	3c01      	subs	r4, #1
 80087e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80087e8:	e76f      	b.n	80086ca <_dtoa_r+0x112>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e7b2      	b.n	8008754 <_dtoa_r+0x19c>
 80087ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80087f0:	e7b1      	b.n	8008756 <_dtoa_r+0x19e>
 80087f2:	9b06      	ldr	r3, [sp, #24]
 80087f4:	eba3 030a 	sub.w	r3, r3, sl
 80087f8:	9306      	str	r3, [sp, #24]
 80087fa:	f1ca 0300 	rsb	r3, sl, #0
 80087fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008800:	2300      	movs	r3, #0
 8008802:	930e      	str	r3, [sp, #56]	; 0x38
 8008804:	e7be      	b.n	8008784 <_dtoa_r+0x1cc>
 8008806:	2300      	movs	r3, #0
 8008808:	930b      	str	r3, [sp, #44]	; 0x2c
 800880a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800880c:	2b00      	cmp	r3, #0
 800880e:	dc58      	bgt.n	80088c2 <_dtoa_r+0x30a>
 8008810:	f04f 0901 	mov.w	r9, #1
 8008814:	464b      	mov	r3, r9
 8008816:	f8cd 9020 	str.w	r9, [sp, #32]
 800881a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800881e:	2200      	movs	r2, #0
 8008820:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008822:	6042      	str	r2, [r0, #4]
 8008824:	2204      	movs	r2, #4
 8008826:	f102 0614 	add.w	r6, r2, #20
 800882a:	429e      	cmp	r6, r3
 800882c:	6841      	ldr	r1, [r0, #4]
 800882e:	d94e      	bls.n	80088ce <_dtoa_r+0x316>
 8008830:	4628      	mov	r0, r5
 8008832:	f001 f84f 	bl	80098d4 <_Balloc>
 8008836:	9003      	str	r0, [sp, #12]
 8008838:	2800      	cmp	r0, #0
 800883a:	d14c      	bne.n	80088d6 <_dtoa_r+0x31e>
 800883c:	4602      	mov	r2, r0
 800883e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008842:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <_dtoa_r+0x2e8>)
 8008844:	e6cc      	b.n	80085e0 <_dtoa_r+0x28>
 8008846:	2301      	movs	r3, #1
 8008848:	e7de      	b.n	8008808 <_dtoa_r+0x250>
 800884a:	2300      	movs	r3, #0
 800884c:	930b      	str	r3, [sp, #44]	; 0x2c
 800884e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008850:	eb0a 0903 	add.w	r9, sl, r3
 8008854:	f109 0301 	add.w	r3, r9, #1
 8008858:	2b01      	cmp	r3, #1
 800885a:	9308      	str	r3, [sp, #32]
 800885c:	bfb8      	it	lt
 800885e:	2301      	movlt	r3, #1
 8008860:	e7dd      	b.n	800881e <_dtoa_r+0x266>
 8008862:	2301      	movs	r3, #1
 8008864:	e7f2      	b.n	800884c <_dtoa_r+0x294>
 8008866:	bf00      	nop
 8008868:	636f4361 	.word	0x636f4361
 800886c:	3fd287a7 	.word	0x3fd287a7
 8008870:	8b60c8b3 	.word	0x8b60c8b3
 8008874:	3fc68a28 	.word	0x3fc68a28
 8008878:	509f79fb 	.word	0x509f79fb
 800887c:	3fd34413 	.word	0x3fd34413
 8008880:	0800b6b6 	.word	0x0800b6b6
 8008884:	0800b6cd 	.word	0x0800b6cd
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	0800b6b2 	.word	0x0800b6b2
 8008890:	0800b6a9 	.word	0x0800b6a9
 8008894:	0800b52d 	.word	0x0800b52d
 8008898:	3ff80000 	.word	0x3ff80000
 800889c:	0800b838 	.word	0x0800b838
 80088a0:	0800b728 	.word	0x0800b728
 80088a4:	2401      	movs	r4, #1
 80088a6:	2300      	movs	r3, #0
 80088a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80088aa:	9322      	str	r3, [sp, #136]	; 0x88
 80088ac:	f04f 39ff 	mov.w	r9, #4294967295
 80088b0:	2200      	movs	r2, #0
 80088b2:	2312      	movs	r3, #18
 80088b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80088b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80088ba:	e7b0      	b.n	800881e <_dtoa_r+0x266>
 80088bc:	2301      	movs	r3, #1
 80088be:	930b      	str	r3, [sp, #44]	; 0x2c
 80088c0:	e7f4      	b.n	80088ac <_dtoa_r+0x2f4>
 80088c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80088c6:	464b      	mov	r3, r9
 80088c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80088cc:	e7a7      	b.n	800881e <_dtoa_r+0x266>
 80088ce:	3101      	adds	r1, #1
 80088d0:	6041      	str	r1, [r0, #4]
 80088d2:	0052      	lsls	r2, r2, #1
 80088d4:	e7a7      	b.n	8008826 <_dtoa_r+0x26e>
 80088d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088d8:	9a03      	ldr	r2, [sp, #12]
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	9b08      	ldr	r3, [sp, #32]
 80088de:	2b0e      	cmp	r3, #14
 80088e0:	f200 80a8 	bhi.w	8008a34 <_dtoa_r+0x47c>
 80088e4:	2c00      	cmp	r4, #0
 80088e6:	f000 80a5 	beq.w	8008a34 <_dtoa_r+0x47c>
 80088ea:	f1ba 0f00 	cmp.w	sl, #0
 80088ee:	dd34      	ble.n	800895a <_dtoa_r+0x3a2>
 80088f0:	4a9a      	ldr	r2, [pc, #616]	; (8008b5c <_dtoa_r+0x5a4>)
 80088f2:	f00a 030f 	and.w	r3, sl, #15
 80088f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80088fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008902:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008906:	ea4f 142a 	mov.w	r4, sl, asr #4
 800890a:	d016      	beq.n	800893a <_dtoa_r+0x382>
 800890c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008910:	4b93      	ldr	r3, [pc, #588]	; (8008b60 <_dtoa_r+0x5a8>)
 8008912:	2703      	movs	r7, #3
 8008914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008918:	f7f7 ff7e 	bl	8000818 <__aeabi_ddiv>
 800891c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008920:	f004 040f 	and.w	r4, r4, #15
 8008924:	4e8e      	ldr	r6, [pc, #568]	; (8008b60 <_dtoa_r+0x5a8>)
 8008926:	b954      	cbnz	r4, 800893e <_dtoa_r+0x386>
 8008928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800892c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008930:	f7f7 ff72 	bl	8000818 <__aeabi_ddiv>
 8008934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008938:	e029      	b.n	800898e <_dtoa_r+0x3d6>
 800893a:	2702      	movs	r7, #2
 800893c:	e7f2      	b.n	8008924 <_dtoa_r+0x36c>
 800893e:	07e1      	lsls	r1, r4, #31
 8008940:	d508      	bpl.n	8008954 <_dtoa_r+0x39c>
 8008942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008946:	e9d6 2300 	ldrd	r2, r3, [r6]
 800894a:	f7f7 fe3b 	bl	80005c4 <__aeabi_dmul>
 800894e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008952:	3701      	adds	r7, #1
 8008954:	1064      	asrs	r4, r4, #1
 8008956:	3608      	adds	r6, #8
 8008958:	e7e5      	b.n	8008926 <_dtoa_r+0x36e>
 800895a:	f000 80a5 	beq.w	8008aa8 <_dtoa_r+0x4f0>
 800895e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008962:	f1ca 0400 	rsb	r4, sl, #0
 8008966:	4b7d      	ldr	r3, [pc, #500]	; (8008b5c <_dtoa_r+0x5a4>)
 8008968:	f004 020f 	and.w	r2, r4, #15
 800896c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fe26 	bl	80005c4 <__aeabi_dmul>
 8008978:	2702      	movs	r7, #2
 800897a:	2300      	movs	r3, #0
 800897c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008980:	4e77      	ldr	r6, [pc, #476]	; (8008b60 <_dtoa_r+0x5a8>)
 8008982:	1124      	asrs	r4, r4, #4
 8008984:	2c00      	cmp	r4, #0
 8008986:	f040 8084 	bne.w	8008a92 <_dtoa_r+0x4da>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d2      	bne.n	8008934 <_dtoa_r+0x37c>
 800898e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 808b 	beq.w	8008aac <_dtoa_r+0x4f4>
 8008996:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800899a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800899e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089a2:	2200      	movs	r2, #0
 80089a4:	4b6f      	ldr	r3, [pc, #444]	; (8008b64 <_dtoa_r+0x5ac>)
 80089a6:	f7f8 f87f 	bl	8000aa8 <__aeabi_dcmplt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d07e      	beq.n	8008aac <_dtoa_r+0x4f4>
 80089ae:	9b08      	ldr	r3, [sp, #32]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d07b      	beq.n	8008aac <_dtoa_r+0x4f4>
 80089b4:	f1b9 0f00 	cmp.w	r9, #0
 80089b8:	dd38      	ble.n	8008a2c <_dtoa_r+0x474>
 80089ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089be:	2200      	movs	r2, #0
 80089c0:	4b69      	ldr	r3, [pc, #420]	; (8008b68 <_dtoa_r+0x5b0>)
 80089c2:	f7f7 fdff 	bl	80005c4 <__aeabi_dmul>
 80089c6:	464c      	mov	r4, r9
 80089c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80089d0:	3701      	adds	r7, #1
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7f7 fd8c 	bl	80004f0 <__aeabi_i2d>
 80089d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089dc:	f7f7 fdf2 	bl	80005c4 <__aeabi_dmul>
 80089e0:	2200      	movs	r2, #0
 80089e2:	4b62      	ldr	r3, [pc, #392]	; (8008b6c <_dtoa_r+0x5b4>)
 80089e4:	f7f7 fc38 	bl	8000258 <__adddf3>
 80089e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80089ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089f0:	9611      	str	r6, [sp, #68]	; 0x44
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	d15d      	bne.n	8008ab2 <_dtoa_r+0x4fa>
 80089f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089fa:	2200      	movs	r2, #0
 80089fc:	4b5c      	ldr	r3, [pc, #368]	; (8008b70 <_dtoa_r+0x5b8>)
 80089fe:	f7f7 fc29 	bl	8000254 <__aeabi_dsub>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a0a:	4633      	mov	r3, r6
 8008a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a0e:	f7f8 f869 	bl	8000ae4 <__aeabi_dcmpgt>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f040 829c 	bne.w	8008f50 <_dtoa_r+0x998>
 8008a18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008a22:	f7f8 f841 	bl	8000aa8 <__aeabi_dcmplt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f040 8290 	bne.w	8008f4c <_dtoa_r+0x994>
 8008a2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008a30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f2c0 8152 	blt.w	8008ce0 <_dtoa_r+0x728>
 8008a3c:	f1ba 0f0e 	cmp.w	sl, #14
 8008a40:	f300 814e 	bgt.w	8008ce0 <_dtoa_r+0x728>
 8008a44:	4b45      	ldr	r3, [pc, #276]	; (8008b5c <_dtoa_r+0x5a4>)
 8008a46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f280 80db 	bge.w	8008c10 <_dtoa_r+0x658>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f300 80d7 	bgt.w	8008c10 <_dtoa_r+0x658>
 8008a62:	f040 8272 	bne.w	8008f4a <_dtoa_r+0x992>
 8008a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	4b40      	ldr	r3, [pc, #256]	; (8008b70 <_dtoa_r+0x5b8>)
 8008a6e:	f7f7 fda9 	bl	80005c4 <__aeabi_dmul>
 8008a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a76:	f7f8 f82b 	bl	8000ad0 <__aeabi_dcmpge>
 8008a7a:	9c08      	ldr	r4, [sp, #32]
 8008a7c:	4626      	mov	r6, r4
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f040 8248 	bne.w	8008f14 <_dtoa_r+0x95c>
 8008a84:	2331      	movs	r3, #49	; 0x31
 8008a86:	9f03      	ldr	r7, [sp, #12]
 8008a88:	f10a 0a01 	add.w	sl, sl, #1
 8008a8c:	f807 3b01 	strb.w	r3, [r7], #1
 8008a90:	e244      	b.n	8008f1c <_dtoa_r+0x964>
 8008a92:	07e2      	lsls	r2, r4, #31
 8008a94:	d505      	bpl.n	8008aa2 <_dtoa_r+0x4ea>
 8008a96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a9a:	f7f7 fd93 	bl	80005c4 <__aeabi_dmul>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	3701      	adds	r7, #1
 8008aa2:	1064      	asrs	r4, r4, #1
 8008aa4:	3608      	adds	r6, #8
 8008aa6:	e76d      	b.n	8008984 <_dtoa_r+0x3cc>
 8008aa8:	2702      	movs	r7, #2
 8008aaa:	e770      	b.n	800898e <_dtoa_r+0x3d6>
 8008aac:	46d0      	mov	r8, sl
 8008aae:	9c08      	ldr	r4, [sp, #32]
 8008ab0:	e78f      	b.n	80089d2 <_dtoa_r+0x41a>
 8008ab2:	9903      	ldr	r1, [sp, #12]
 8008ab4:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <_dtoa_r+0x5a4>)
 8008ab6:	4421      	add	r1, r4
 8008ab8:	9112      	str	r1, [sp, #72]	; 0x48
 8008aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008abc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ac0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008ac4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	d055      	beq.n	8008b78 <_dtoa_r+0x5c0>
 8008acc:	2000      	movs	r0, #0
 8008ace:	4929      	ldr	r1, [pc, #164]	; (8008b74 <_dtoa_r+0x5bc>)
 8008ad0:	f7f7 fea2 	bl	8000818 <__aeabi_ddiv>
 8008ad4:	463b      	mov	r3, r7
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	f7f7 fbbc 	bl	8000254 <__aeabi_dsub>
 8008adc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ae0:	9f03      	ldr	r7, [sp, #12]
 8008ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae6:	f7f8 f81d 	bl	8000b24 <__aeabi_d2iz>
 8008aea:	4604      	mov	r4, r0
 8008aec:	f7f7 fd00 	bl	80004f0 <__aeabi_i2d>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af8:	f7f7 fbac 	bl	8000254 <__aeabi_dsub>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	3430      	adds	r4, #48	; 0x30
 8008b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b0a:	f807 4b01 	strb.w	r4, [r7], #1
 8008b0e:	f7f7 ffcb 	bl	8000aa8 <__aeabi_dcmplt>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d174      	bne.n	8008c00 <_dtoa_r+0x648>
 8008b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	4911      	ldr	r1, [pc, #68]	; (8008b64 <_dtoa_r+0x5ac>)
 8008b1e:	f7f7 fb99 	bl	8000254 <__aeabi_dsub>
 8008b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b26:	f7f7 ffbf 	bl	8000aa8 <__aeabi_dcmplt>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f040 80b7 	bne.w	8008c9e <_dtoa_r+0x6e6>
 8008b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b32:	429f      	cmp	r7, r3
 8008b34:	f43f af7a 	beq.w	8008a2c <_dtoa_r+0x474>
 8008b38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <_dtoa_r+0x5b0>)
 8008b40:	f7f7 fd40 	bl	80005c4 <__aeabi_dmul>
 8008b44:	2200      	movs	r2, #0
 8008b46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b4e:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <_dtoa_r+0x5b0>)
 8008b50:	f7f7 fd38 	bl	80005c4 <__aeabi_dmul>
 8008b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b58:	e7c3      	b.n	8008ae2 <_dtoa_r+0x52a>
 8008b5a:	bf00      	nop
 8008b5c:	0800b838 	.word	0x0800b838
 8008b60:	0800b810 	.word	0x0800b810
 8008b64:	3ff00000 	.word	0x3ff00000
 8008b68:	40240000 	.word	0x40240000
 8008b6c:	401c0000 	.word	0x401c0000
 8008b70:	40140000 	.word	0x40140000
 8008b74:	3fe00000 	.word	0x3fe00000
 8008b78:	4630      	mov	r0, r6
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	f7f7 fd22 	bl	80005c4 <__aeabi_dmul>
 8008b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b86:	9c03      	ldr	r4, [sp, #12]
 8008b88:	9314      	str	r3, [sp, #80]	; 0x50
 8008b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b8e:	f7f7 ffc9 	bl	8000b24 <__aeabi_d2iz>
 8008b92:	9015      	str	r0, [sp, #84]	; 0x54
 8008b94:	f7f7 fcac 	bl	80004f0 <__aeabi_i2d>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ba0:	f7f7 fb58 	bl	8000254 <__aeabi_dsub>
 8008ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	3330      	adds	r3, #48	; 0x30
 8008baa:	f804 3b01 	strb.w	r3, [r4], #1
 8008bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bb0:	460f      	mov	r7, r1
 8008bb2:	429c      	cmp	r4, r3
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	d124      	bne.n	8008c04 <_dtoa_r+0x64c>
 8008bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bbe:	4bb0      	ldr	r3, [pc, #704]	; (8008e80 <_dtoa_r+0x8c8>)
 8008bc0:	f7f7 fb4a 	bl	8000258 <__adddf3>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 ff8a 	bl	8000ae4 <__aeabi_dcmpgt>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d163      	bne.n	8008c9c <_dtoa_r+0x6e4>
 8008bd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bd8:	2000      	movs	r0, #0
 8008bda:	49a9      	ldr	r1, [pc, #676]	; (8008e80 <_dtoa_r+0x8c8>)
 8008bdc:	f7f7 fb3a 	bl	8000254 <__aeabi_dsub>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 ff5e 	bl	8000aa8 <__aeabi_dcmplt>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f43f af1d 	beq.w	8008a2c <_dtoa_r+0x474>
 8008bf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008bf4:	1e7b      	subs	r3, r7, #1
 8008bf6:	9314      	str	r3, [sp, #80]	; 0x50
 8008bf8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008bfc:	2b30      	cmp	r3, #48	; 0x30
 8008bfe:	d0f8      	beq.n	8008bf2 <_dtoa_r+0x63a>
 8008c00:	46c2      	mov	sl, r8
 8008c02:	e03b      	b.n	8008c7c <_dtoa_r+0x6c4>
 8008c04:	4b9f      	ldr	r3, [pc, #636]	; (8008e84 <_dtoa_r+0x8cc>)
 8008c06:	f7f7 fcdd 	bl	80005c4 <__aeabi_dmul>
 8008c0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c0e:	e7bc      	b.n	8008b8a <_dtoa_r+0x5d2>
 8008c10:	9f03      	ldr	r7, [sp, #12]
 8008c12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008c16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	f7f7 fdfb 	bl	8000818 <__aeabi_ddiv>
 8008c22:	f7f7 ff7f 	bl	8000b24 <__aeabi_d2iz>
 8008c26:	4604      	mov	r4, r0
 8008c28:	f7f7 fc62 	bl	80004f0 <__aeabi_i2d>
 8008c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c30:	f7f7 fcc8 	bl	80005c4 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f7f7 fb0a 	bl	8000254 <__aeabi_dsub>
 8008c40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008c44:	f807 6b01 	strb.w	r6, [r7], #1
 8008c48:	9e03      	ldr	r6, [sp, #12]
 8008c4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008c4e:	1bbe      	subs	r6, r7, r6
 8008c50:	45b4      	cmp	ip, r6
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	d136      	bne.n	8008cc6 <_dtoa_r+0x70e>
 8008c58:	f7f7 fafe 	bl	8000258 <__adddf3>
 8008c5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c60:	4680      	mov	r8, r0
 8008c62:	4689      	mov	r9, r1
 8008c64:	f7f7 ff3e 	bl	8000ae4 <__aeabi_dcmpgt>
 8008c68:	bb58      	cbnz	r0, 8008cc2 <_dtoa_r+0x70a>
 8008c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 ff0f 	bl	8000a94 <__aeabi_dcmpeq>
 8008c76:	b108      	cbz	r0, 8008c7c <_dtoa_r+0x6c4>
 8008c78:	07e1      	lsls	r1, r4, #31
 8008c7a:	d422      	bmi.n	8008cc2 <_dtoa_r+0x70a>
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	4659      	mov	r1, fp
 8008c80:	f000 fe68 	bl	8009954 <_Bfree>
 8008c84:	2300      	movs	r3, #0
 8008c86:	703b      	strb	r3, [r7, #0]
 8008c88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c8a:	f10a 0001 	add.w	r0, sl, #1
 8008c8e:	6018      	str	r0, [r3, #0]
 8008c90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f43f acde 	beq.w	8008654 <_dtoa_r+0x9c>
 8008c98:	601f      	str	r7, [r3, #0]
 8008c9a:	e4db      	b.n	8008654 <_dtoa_r+0x9c>
 8008c9c:	4627      	mov	r7, r4
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	461f      	mov	r7, r3
 8008ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ca6:	2a39      	cmp	r2, #57	; 0x39
 8008ca8:	d107      	bne.n	8008cba <_dtoa_r+0x702>
 8008caa:	9a03      	ldr	r2, [sp, #12]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d1f7      	bne.n	8008ca0 <_dtoa_r+0x6e8>
 8008cb0:	2230      	movs	r2, #48	; 0x30
 8008cb2:	9903      	ldr	r1, [sp, #12]
 8008cb4:	f108 0801 	add.w	r8, r8, #1
 8008cb8:	700a      	strb	r2, [r1, #0]
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	3201      	adds	r2, #1
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	e79e      	b.n	8008c00 <_dtoa_r+0x648>
 8008cc2:	46d0      	mov	r8, sl
 8008cc4:	e7eb      	b.n	8008c9e <_dtoa_r+0x6e6>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	4b6e      	ldr	r3, [pc, #440]	; (8008e84 <_dtoa_r+0x8cc>)
 8008cca:	f7f7 fc7b 	bl	80005c4 <__aeabi_dmul>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	4689      	mov	r9, r1
 8008cd6:	f7f7 fedd 	bl	8000a94 <__aeabi_dcmpeq>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d09b      	beq.n	8008c16 <_dtoa_r+0x65e>
 8008cde:	e7cd      	b.n	8008c7c <_dtoa_r+0x6c4>
 8008ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	f000 80d0 	beq.w	8008e88 <_dtoa_r+0x8d0>
 8008ce8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008cea:	2a01      	cmp	r2, #1
 8008cec:	f300 80ae 	bgt.w	8008e4c <_dtoa_r+0x894>
 8008cf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cf2:	2a00      	cmp	r2, #0
 8008cf4:	f000 80a6 	beq.w	8008e44 <_dtoa_r+0x88c>
 8008cf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008cfe:	9f06      	ldr	r7, [sp, #24]
 8008d00:	9a06      	ldr	r2, [sp, #24]
 8008d02:	2101      	movs	r1, #1
 8008d04:	441a      	add	r2, r3
 8008d06:	9206      	str	r2, [sp, #24]
 8008d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	441a      	add	r2, r3
 8008d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d10:	f000 ff20 	bl	8009b54 <__i2b>
 8008d14:	4606      	mov	r6, r0
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	dd0c      	ble.n	8008d34 <_dtoa_r+0x77c>
 8008d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dd09      	ble.n	8008d34 <_dtoa_r+0x77c>
 8008d20:	42bb      	cmp	r3, r7
 8008d22:	bfa8      	it	ge
 8008d24:	463b      	movge	r3, r7
 8008d26:	9a06      	ldr	r2, [sp, #24]
 8008d28:	1aff      	subs	r7, r7, r3
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	9206      	str	r2, [sp, #24]
 8008d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	9309      	str	r3, [sp, #36]	; 0x24
 8008d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d36:	b1f3      	cbz	r3, 8008d76 <_dtoa_r+0x7be>
 8008d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80a8 	beq.w	8008e90 <_dtoa_r+0x8d8>
 8008d40:	2c00      	cmp	r4, #0
 8008d42:	dd10      	ble.n	8008d66 <_dtoa_r+0x7ae>
 8008d44:	4631      	mov	r1, r6
 8008d46:	4622      	mov	r2, r4
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 ffc1 	bl	8009cd0 <__pow5mult>
 8008d4e:	465a      	mov	r2, fp
 8008d50:	4601      	mov	r1, r0
 8008d52:	4606      	mov	r6, r0
 8008d54:	4628      	mov	r0, r5
 8008d56:	f000 ff13 	bl	8009b80 <__multiply>
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f000 fdf8 	bl	8009954 <_Bfree>
 8008d64:	46c3      	mov	fp, r8
 8008d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d68:	1b1a      	subs	r2, r3, r4
 8008d6a:	d004      	beq.n	8008d76 <_dtoa_r+0x7be>
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 ffae 	bl	8009cd0 <__pow5mult>
 8008d74:	4683      	mov	fp, r0
 8008d76:	2101      	movs	r1, #1
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f000 feeb 	bl	8009b54 <__i2b>
 8008d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d80:	4604      	mov	r4, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f340 8086 	ble.w	8008e94 <_dtoa_r+0x8dc>
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f000 ff9f 	bl	8009cd0 <__pow5mult>
 8008d92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d94:	4604      	mov	r4, r0
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	dd7f      	ble.n	8008e9a <_dtoa_r+0x8e2>
 8008d9a:	f04f 0800 	mov.w	r8, #0
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008da4:	6918      	ldr	r0, [r3, #16]
 8008da6:	f000 fe87 	bl	8009ab8 <__hi0bits>
 8008daa:	f1c0 0020 	rsb	r0, r0, #32
 8008dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db0:	4418      	add	r0, r3
 8008db2:	f010 001f 	ands.w	r0, r0, #31
 8008db6:	f000 8092 	beq.w	8008ede <_dtoa_r+0x926>
 8008dba:	f1c0 0320 	rsb	r3, r0, #32
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	f340 808a 	ble.w	8008ed8 <_dtoa_r+0x920>
 8008dc4:	f1c0 001c 	rsb	r0, r0, #28
 8008dc8:	9b06      	ldr	r3, [sp, #24]
 8008dca:	4407      	add	r7, r0
 8008dcc:	4403      	add	r3, r0
 8008dce:	9306      	str	r3, [sp, #24]
 8008dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd2:	4403      	add	r3, r0
 8008dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd6:	9b06      	ldr	r3, [sp, #24]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	dd05      	ble.n	8008de8 <_dtoa_r+0x830>
 8008ddc:	4659      	mov	r1, fp
 8008dde:	461a      	mov	r2, r3
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 ffcf 	bl	8009d84 <__lshift>
 8008de6:	4683      	mov	fp, r0
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	dd05      	ble.n	8008dfa <_dtoa_r+0x842>
 8008dee:	4621      	mov	r1, r4
 8008df0:	461a      	mov	r2, r3
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 ffc6 	bl	8009d84 <__lshift>
 8008df8:	4604      	mov	r4, r0
 8008dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d070      	beq.n	8008ee2 <_dtoa_r+0x92a>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4658      	mov	r0, fp
 8008e04:	f001 f82e 	bl	8009e64 <__mcmp>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	da6a      	bge.n	8008ee2 <_dtoa_r+0x92a>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4659      	mov	r1, fp
 8008e10:	220a      	movs	r2, #10
 8008e12:	4628      	mov	r0, r5
 8008e14:	f000 fdc0 	bl	8009998 <__multadd>
 8008e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1a:	4683      	mov	fp, r0
 8008e1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 8194 	beq.w	800914e <_dtoa_r+0xb96>
 8008e26:	4631      	mov	r1, r6
 8008e28:	2300      	movs	r3, #0
 8008e2a:	220a      	movs	r2, #10
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f000 fdb3 	bl	8009998 <__multadd>
 8008e32:	f1b9 0f00 	cmp.w	r9, #0
 8008e36:	4606      	mov	r6, r0
 8008e38:	f300 8093 	bgt.w	8008f62 <_dtoa_r+0x9aa>
 8008e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	dc57      	bgt.n	8008ef2 <_dtoa_r+0x93a>
 8008e42:	e08e      	b.n	8008f62 <_dtoa_r+0x9aa>
 8008e44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e4a:	e757      	b.n	8008cfc <_dtoa_r+0x744>
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	1e5c      	subs	r4, r3, #1
 8008e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e52:	42a3      	cmp	r3, r4
 8008e54:	bfb7      	itett	lt
 8008e56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008e58:	1b1c      	subge	r4, r3, r4
 8008e5a:	1ae2      	sublt	r2, r4, r3
 8008e5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008e5e:	bfbe      	ittt	lt
 8008e60:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008e62:	189b      	addlt	r3, r3, r2
 8008e64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e66:	9b08      	ldr	r3, [sp, #32]
 8008e68:	bfb8      	it	lt
 8008e6a:	2400      	movlt	r4, #0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bfbb      	ittet	lt
 8008e70:	9b06      	ldrlt	r3, [sp, #24]
 8008e72:	9a08      	ldrlt	r2, [sp, #32]
 8008e74:	9f06      	ldrge	r7, [sp, #24]
 8008e76:	1a9f      	sublt	r7, r3, r2
 8008e78:	bfac      	ite	ge
 8008e7a:	9b08      	ldrge	r3, [sp, #32]
 8008e7c:	2300      	movlt	r3, #0
 8008e7e:	e73f      	b.n	8008d00 <_dtoa_r+0x748>
 8008e80:	3fe00000 	.word	0x3fe00000
 8008e84:	40240000 	.word	0x40240000
 8008e88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e8a:	9f06      	ldr	r7, [sp, #24]
 8008e8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008e8e:	e742      	b.n	8008d16 <_dtoa_r+0x75e>
 8008e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e92:	e76b      	b.n	8008d6c <_dtoa_r+0x7b4>
 8008e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	dc19      	bgt.n	8008ece <_dtoa_r+0x916>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	b9bb      	cbnz	r3, 8008ece <_dtoa_r+0x916>
 8008e9e:	9b05      	ldr	r3, [sp, #20]
 8008ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea4:	b99b      	cbnz	r3, 8008ece <_dtoa_r+0x916>
 8008ea6:	9b05      	ldr	r3, [sp, #20]
 8008ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eac:	0d1b      	lsrs	r3, r3, #20
 8008eae:	051b      	lsls	r3, r3, #20
 8008eb0:	b183      	cbz	r3, 8008ed4 <_dtoa_r+0x91c>
 8008eb2:	f04f 0801 	mov.w	r8, #1
 8008eb6:	9b06      	ldr	r3, [sp, #24]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	9306      	str	r3, [sp, #24]
 8008ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f47f af6a 	bne.w	8008d9e <_dtoa_r+0x7e6>
 8008eca:	2001      	movs	r0, #1
 8008ecc:	e76f      	b.n	8008dae <_dtoa_r+0x7f6>
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	e7f6      	b.n	8008ec2 <_dtoa_r+0x90a>
 8008ed4:	4698      	mov	r8, r3
 8008ed6:	e7f4      	b.n	8008ec2 <_dtoa_r+0x90a>
 8008ed8:	f43f af7d 	beq.w	8008dd6 <_dtoa_r+0x81e>
 8008edc:	4618      	mov	r0, r3
 8008ede:	301c      	adds	r0, #28
 8008ee0:	e772      	b.n	8008dc8 <_dtoa_r+0x810>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dc36      	bgt.n	8008f56 <_dtoa_r+0x99e>
 8008ee8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	dd33      	ble.n	8008f56 <_dtoa_r+0x99e>
 8008eee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ef2:	f1b9 0f00 	cmp.w	r9, #0
 8008ef6:	d10d      	bne.n	8008f14 <_dtoa_r+0x95c>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	464b      	mov	r3, r9
 8008efc:	2205      	movs	r2, #5
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 fd4a 	bl	8009998 <__multadd>
 8008f04:	4601      	mov	r1, r0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4658      	mov	r0, fp
 8008f0a:	f000 ffab 	bl	8009e64 <__mcmp>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f73f adb8 	bgt.w	8008a84 <_dtoa_r+0x4cc>
 8008f14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f16:	9f03      	ldr	r7, [sp, #12]
 8008f18:	ea6f 0a03 	mvn.w	sl, r3
 8008f1c:	f04f 0800 	mov.w	r8, #0
 8008f20:	4621      	mov	r1, r4
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 fd16 	bl	8009954 <_Bfree>
 8008f28:	2e00      	cmp	r6, #0
 8008f2a:	f43f aea7 	beq.w	8008c7c <_dtoa_r+0x6c4>
 8008f2e:	f1b8 0f00 	cmp.w	r8, #0
 8008f32:	d005      	beq.n	8008f40 <_dtoa_r+0x988>
 8008f34:	45b0      	cmp	r8, r6
 8008f36:	d003      	beq.n	8008f40 <_dtoa_r+0x988>
 8008f38:	4641      	mov	r1, r8
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 fd0a 	bl	8009954 <_Bfree>
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 fd06 	bl	8009954 <_Bfree>
 8008f48:	e698      	b.n	8008c7c <_dtoa_r+0x6c4>
 8008f4a:	2400      	movs	r4, #0
 8008f4c:	4626      	mov	r6, r4
 8008f4e:	e7e1      	b.n	8008f14 <_dtoa_r+0x95c>
 8008f50:	46c2      	mov	sl, r8
 8008f52:	4626      	mov	r6, r4
 8008f54:	e596      	b.n	8008a84 <_dtoa_r+0x4cc>
 8008f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80fd 	beq.w	800915c <_dtoa_r+0xba4>
 8008f62:	2f00      	cmp	r7, #0
 8008f64:	dd05      	ble.n	8008f72 <_dtoa_r+0x9ba>
 8008f66:	4631      	mov	r1, r6
 8008f68:	463a      	mov	r2, r7
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 ff0a 	bl	8009d84 <__lshift>
 8008f70:	4606      	mov	r6, r0
 8008f72:	f1b8 0f00 	cmp.w	r8, #0
 8008f76:	d05c      	beq.n	8009032 <_dtoa_r+0xa7a>
 8008f78:	4628      	mov	r0, r5
 8008f7a:	6871      	ldr	r1, [r6, #4]
 8008f7c:	f000 fcaa 	bl	80098d4 <_Balloc>
 8008f80:	4607      	mov	r7, r0
 8008f82:	b928      	cbnz	r0, 8008f90 <_dtoa_r+0x9d8>
 8008f84:	4602      	mov	r2, r0
 8008f86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f8a:	4b7f      	ldr	r3, [pc, #508]	; (8009188 <_dtoa_r+0xbd0>)
 8008f8c:	f7ff bb28 	b.w	80085e0 <_dtoa_r+0x28>
 8008f90:	6932      	ldr	r2, [r6, #16]
 8008f92:	f106 010c 	add.w	r1, r6, #12
 8008f96:	3202      	adds	r2, #2
 8008f98:	0092      	lsls	r2, r2, #2
 8008f9a:	300c      	adds	r0, #12
 8008f9c:	f000 fc8c 	bl	80098b8 <memcpy>
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 feed 	bl	8009d84 <__lshift>
 8008faa:	46b0      	mov	r8, r6
 8008fac:	4606      	mov	r6, r0
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	9308      	str	r3, [sp, #32]
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	444b      	add	r3, r9
 8008fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc2:	9b08      	ldr	r3, [sp, #32]
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4658      	mov	r0, fp
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	f7ff fa68 	bl	80084a0 <quorem>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	3330      	adds	r3, #48	; 0x30
 8008fd6:	9006      	str	r0, [sp, #24]
 8008fd8:	4658      	mov	r0, fp
 8008fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fdc:	f000 ff42 	bl	8009e64 <__mcmp>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	4681      	mov	r9, r0
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 ff58 	bl	8009e9c <__mdiff>
 8008fec:	68c2      	ldr	r2, [r0, #12]
 8008fee:	4607      	mov	r7, r0
 8008ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff2:	bb02      	cbnz	r2, 8009036 <_dtoa_r+0xa7e>
 8008ff4:	4601      	mov	r1, r0
 8008ff6:	4658      	mov	r0, fp
 8008ff8:	f000 ff34 	bl	8009e64 <__mcmp>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009000:	4639      	mov	r1, r7
 8009002:	4628      	mov	r0, r5
 8009004:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009008:	f000 fca4 	bl	8009954 <_Bfree>
 800900c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800900e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009010:	9f08      	ldr	r7, [sp, #32]
 8009012:	ea43 0102 	orr.w	r1, r3, r2
 8009016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009018:	430b      	orrs	r3, r1
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	d10d      	bne.n	800903a <_dtoa_r+0xa82>
 800901e:	2b39      	cmp	r3, #57	; 0x39
 8009020:	d029      	beq.n	8009076 <_dtoa_r+0xabe>
 8009022:	f1b9 0f00 	cmp.w	r9, #0
 8009026:	dd01      	ble.n	800902c <_dtoa_r+0xa74>
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	3331      	adds	r3, #49	; 0x31
 800902c:	9a04      	ldr	r2, [sp, #16]
 800902e:	7013      	strb	r3, [r2, #0]
 8009030:	e776      	b.n	8008f20 <_dtoa_r+0x968>
 8009032:	4630      	mov	r0, r6
 8009034:	e7b9      	b.n	8008faa <_dtoa_r+0x9f2>
 8009036:	2201      	movs	r2, #1
 8009038:	e7e2      	b.n	8009000 <_dtoa_r+0xa48>
 800903a:	f1b9 0f00 	cmp.w	r9, #0
 800903e:	db06      	blt.n	800904e <_dtoa_r+0xa96>
 8009040:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009042:	ea41 0909 	orr.w	r9, r1, r9
 8009046:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009048:	ea59 0101 	orrs.w	r1, r9, r1
 800904c:	d120      	bne.n	8009090 <_dtoa_r+0xad8>
 800904e:	2a00      	cmp	r2, #0
 8009050:	ddec      	ble.n	800902c <_dtoa_r+0xa74>
 8009052:	4659      	mov	r1, fp
 8009054:	2201      	movs	r2, #1
 8009056:	4628      	mov	r0, r5
 8009058:	9308      	str	r3, [sp, #32]
 800905a:	f000 fe93 	bl	8009d84 <__lshift>
 800905e:	4621      	mov	r1, r4
 8009060:	4683      	mov	fp, r0
 8009062:	f000 feff 	bl	8009e64 <__mcmp>
 8009066:	2800      	cmp	r0, #0
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	dc02      	bgt.n	8009072 <_dtoa_r+0xaba>
 800906c:	d1de      	bne.n	800902c <_dtoa_r+0xa74>
 800906e:	07da      	lsls	r2, r3, #31
 8009070:	d5dc      	bpl.n	800902c <_dtoa_r+0xa74>
 8009072:	2b39      	cmp	r3, #57	; 0x39
 8009074:	d1d8      	bne.n	8009028 <_dtoa_r+0xa70>
 8009076:	2339      	movs	r3, #57	; 0x39
 8009078:	9a04      	ldr	r2, [sp, #16]
 800907a:	7013      	strb	r3, [r2, #0]
 800907c:	463b      	mov	r3, r7
 800907e:	461f      	mov	r7, r3
 8009080:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009084:	3b01      	subs	r3, #1
 8009086:	2a39      	cmp	r2, #57	; 0x39
 8009088:	d050      	beq.n	800912c <_dtoa_r+0xb74>
 800908a:	3201      	adds	r2, #1
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e747      	b.n	8008f20 <_dtoa_r+0x968>
 8009090:	2a00      	cmp	r2, #0
 8009092:	dd03      	ble.n	800909c <_dtoa_r+0xae4>
 8009094:	2b39      	cmp	r3, #57	; 0x39
 8009096:	d0ee      	beq.n	8009076 <_dtoa_r+0xabe>
 8009098:	3301      	adds	r3, #1
 800909a:	e7c7      	b.n	800902c <_dtoa_r+0xa74>
 800909c:	9a08      	ldr	r2, [sp, #32]
 800909e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090a4:	428a      	cmp	r2, r1
 80090a6:	d02a      	beq.n	80090fe <_dtoa_r+0xb46>
 80090a8:	4659      	mov	r1, fp
 80090aa:	2300      	movs	r3, #0
 80090ac:	220a      	movs	r2, #10
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 fc72 	bl	8009998 <__multadd>
 80090b4:	45b0      	cmp	r8, r6
 80090b6:	4683      	mov	fp, r0
 80090b8:	f04f 0300 	mov.w	r3, #0
 80090bc:	f04f 020a 	mov.w	r2, #10
 80090c0:	4641      	mov	r1, r8
 80090c2:	4628      	mov	r0, r5
 80090c4:	d107      	bne.n	80090d6 <_dtoa_r+0xb1e>
 80090c6:	f000 fc67 	bl	8009998 <__multadd>
 80090ca:	4680      	mov	r8, r0
 80090cc:	4606      	mov	r6, r0
 80090ce:	9b08      	ldr	r3, [sp, #32]
 80090d0:	3301      	adds	r3, #1
 80090d2:	9308      	str	r3, [sp, #32]
 80090d4:	e775      	b.n	8008fc2 <_dtoa_r+0xa0a>
 80090d6:	f000 fc5f 	bl	8009998 <__multadd>
 80090da:	4631      	mov	r1, r6
 80090dc:	4680      	mov	r8, r0
 80090de:	2300      	movs	r3, #0
 80090e0:	220a      	movs	r2, #10
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 fc58 	bl	8009998 <__multadd>
 80090e8:	4606      	mov	r6, r0
 80090ea:	e7f0      	b.n	80090ce <_dtoa_r+0xb16>
 80090ec:	f1b9 0f00 	cmp.w	r9, #0
 80090f0:	bfcc      	ite	gt
 80090f2:	464f      	movgt	r7, r9
 80090f4:	2701      	movle	r7, #1
 80090f6:	f04f 0800 	mov.w	r8, #0
 80090fa:	9a03      	ldr	r2, [sp, #12]
 80090fc:	4417      	add	r7, r2
 80090fe:	4659      	mov	r1, fp
 8009100:	2201      	movs	r2, #1
 8009102:	4628      	mov	r0, r5
 8009104:	9308      	str	r3, [sp, #32]
 8009106:	f000 fe3d 	bl	8009d84 <__lshift>
 800910a:	4621      	mov	r1, r4
 800910c:	4683      	mov	fp, r0
 800910e:	f000 fea9 	bl	8009e64 <__mcmp>
 8009112:	2800      	cmp	r0, #0
 8009114:	dcb2      	bgt.n	800907c <_dtoa_r+0xac4>
 8009116:	d102      	bne.n	800911e <_dtoa_r+0xb66>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	07db      	lsls	r3, r3, #31
 800911c:	d4ae      	bmi.n	800907c <_dtoa_r+0xac4>
 800911e:	463b      	mov	r3, r7
 8009120:	461f      	mov	r7, r3
 8009122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009126:	2a30      	cmp	r2, #48	; 0x30
 8009128:	d0fa      	beq.n	8009120 <_dtoa_r+0xb68>
 800912a:	e6f9      	b.n	8008f20 <_dtoa_r+0x968>
 800912c:	9a03      	ldr	r2, [sp, #12]
 800912e:	429a      	cmp	r2, r3
 8009130:	d1a5      	bne.n	800907e <_dtoa_r+0xac6>
 8009132:	2331      	movs	r3, #49	; 0x31
 8009134:	f10a 0a01 	add.w	sl, sl, #1
 8009138:	e779      	b.n	800902e <_dtoa_r+0xa76>
 800913a:	4b14      	ldr	r3, [pc, #80]	; (800918c <_dtoa_r+0xbd4>)
 800913c:	f7ff baa8 	b.w	8008690 <_dtoa_r+0xd8>
 8009140:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009142:	2b00      	cmp	r3, #0
 8009144:	f47f aa81 	bne.w	800864a <_dtoa_r+0x92>
 8009148:	4b11      	ldr	r3, [pc, #68]	; (8009190 <_dtoa_r+0xbd8>)
 800914a:	f7ff baa1 	b.w	8008690 <_dtoa_r+0xd8>
 800914e:	f1b9 0f00 	cmp.w	r9, #0
 8009152:	dc03      	bgt.n	800915c <_dtoa_r+0xba4>
 8009154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009156:	2b02      	cmp	r3, #2
 8009158:	f73f aecb 	bgt.w	8008ef2 <_dtoa_r+0x93a>
 800915c:	9f03      	ldr	r7, [sp, #12]
 800915e:	4621      	mov	r1, r4
 8009160:	4658      	mov	r0, fp
 8009162:	f7ff f99d 	bl	80084a0 <quorem>
 8009166:	9a03      	ldr	r2, [sp, #12]
 8009168:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800916c:	f807 3b01 	strb.w	r3, [r7], #1
 8009170:	1aba      	subs	r2, r7, r2
 8009172:	4591      	cmp	r9, r2
 8009174:	ddba      	ble.n	80090ec <_dtoa_r+0xb34>
 8009176:	4659      	mov	r1, fp
 8009178:	2300      	movs	r3, #0
 800917a:	220a      	movs	r2, #10
 800917c:	4628      	mov	r0, r5
 800917e:	f000 fc0b 	bl	8009998 <__multadd>
 8009182:	4683      	mov	fp, r0
 8009184:	e7eb      	b.n	800915e <_dtoa_r+0xba6>
 8009186:	bf00      	nop
 8009188:	0800b728 	.word	0x0800b728
 800918c:	0800b52c 	.word	0x0800b52c
 8009190:	0800b6a9 	.word	0x0800b6a9

08009194 <rshift>:
 8009194:	6903      	ldr	r3, [r0, #16]
 8009196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800919a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800919e:	f100 0414 	add.w	r4, r0, #20
 80091a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091a6:	dd46      	ble.n	8009236 <rshift+0xa2>
 80091a8:	f011 011f 	ands.w	r1, r1, #31
 80091ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091b4:	d10c      	bne.n	80091d0 <rshift+0x3c>
 80091b6:	4629      	mov	r1, r5
 80091b8:	f100 0710 	add.w	r7, r0, #16
 80091bc:	42b1      	cmp	r1, r6
 80091be:	d335      	bcc.n	800922c <rshift+0x98>
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	1eea      	subs	r2, r5, #3
 80091c6:	4296      	cmp	r6, r2
 80091c8:	bf38      	it	cc
 80091ca:	2300      	movcc	r3, #0
 80091cc:	4423      	add	r3, r4
 80091ce:	e015      	b.n	80091fc <rshift+0x68>
 80091d0:	46a1      	mov	r9, r4
 80091d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091d6:	f1c1 0820 	rsb	r8, r1, #32
 80091da:	40cf      	lsrs	r7, r1
 80091dc:	f105 0e04 	add.w	lr, r5, #4
 80091e0:	4576      	cmp	r6, lr
 80091e2:	46f4      	mov	ip, lr
 80091e4:	d816      	bhi.n	8009214 <rshift+0x80>
 80091e6:	1a9a      	subs	r2, r3, r2
 80091e8:	0092      	lsls	r2, r2, #2
 80091ea:	3a04      	subs	r2, #4
 80091ec:	3501      	adds	r5, #1
 80091ee:	42ae      	cmp	r6, r5
 80091f0:	bf38      	it	cc
 80091f2:	2200      	movcc	r2, #0
 80091f4:	18a3      	adds	r3, r4, r2
 80091f6:	50a7      	str	r7, [r4, r2]
 80091f8:	b107      	cbz	r7, 80091fc <rshift+0x68>
 80091fa:	3304      	adds	r3, #4
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	eba3 0204 	sub.w	r2, r3, r4
 8009202:	bf08      	it	eq
 8009204:	2300      	moveq	r3, #0
 8009206:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800920a:	6102      	str	r2, [r0, #16]
 800920c:	bf08      	it	eq
 800920e:	6143      	streq	r3, [r0, #20]
 8009210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009214:	f8dc c000 	ldr.w	ip, [ip]
 8009218:	fa0c fc08 	lsl.w	ip, ip, r8
 800921c:	ea4c 0707 	orr.w	r7, ip, r7
 8009220:	f849 7b04 	str.w	r7, [r9], #4
 8009224:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009228:	40cf      	lsrs	r7, r1
 800922a:	e7d9      	b.n	80091e0 <rshift+0x4c>
 800922c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009230:	f847 cf04 	str.w	ip, [r7, #4]!
 8009234:	e7c2      	b.n	80091bc <rshift+0x28>
 8009236:	4623      	mov	r3, r4
 8009238:	e7e0      	b.n	80091fc <rshift+0x68>

0800923a <__hexdig_fun>:
 800923a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800923e:	2b09      	cmp	r3, #9
 8009240:	d802      	bhi.n	8009248 <__hexdig_fun+0xe>
 8009242:	3820      	subs	r0, #32
 8009244:	b2c0      	uxtb	r0, r0
 8009246:	4770      	bx	lr
 8009248:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800924c:	2b05      	cmp	r3, #5
 800924e:	d801      	bhi.n	8009254 <__hexdig_fun+0x1a>
 8009250:	3847      	subs	r0, #71	; 0x47
 8009252:	e7f7      	b.n	8009244 <__hexdig_fun+0xa>
 8009254:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009258:	2b05      	cmp	r3, #5
 800925a:	d801      	bhi.n	8009260 <__hexdig_fun+0x26>
 800925c:	3827      	subs	r0, #39	; 0x27
 800925e:	e7f1      	b.n	8009244 <__hexdig_fun+0xa>
 8009260:	2000      	movs	r0, #0
 8009262:	4770      	bx	lr

08009264 <__gethex>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	b08b      	sub	sp, #44	; 0x2c
 800926a:	9305      	str	r3, [sp, #20]
 800926c:	4bb2      	ldr	r3, [pc, #712]	; (8009538 <__gethex+0x2d4>)
 800926e:	9002      	str	r0, [sp, #8]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	468b      	mov	fp, r1
 8009274:	4618      	mov	r0, r3
 8009276:	4690      	mov	r8, r2
 8009278:	9303      	str	r3, [sp, #12]
 800927a:	f7f6 ffdf 	bl	800023c <strlen>
 800927e:	4682      	mov	sl, r0
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	f8db 2000 	ldr.w	r2, [fp]
 8009286:	4403      	add	r3, r0
 8009288:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800928c:	9306      	str	r3, [sp, #24]
 800928e:	1c93      	adds	r3, r2, #2
 8009290:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009294:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009298:	32fe      	adds	r2, #254	; 0xfe
 800929a:	18d1      	adds	r1, r2, r3
 800929c:	461f      	mov	r7, r3
 800929e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092a2:	9101      	str	r1, [sp, #4]
 80092a4:	2830      	cmp	r0, #48	; 0x30
 80092a6:	d0f8      	beq.n	800929a <__gethex+0x36>
 80092a8:	f7ff ffc7 	bl	800923a <__hexdig_fun>
 80092ac:	4604      	mov	r4, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d13a      	bne.n	8009328 <__gethex+0xc4>
 80092b2:	4652      	mov	r2, sl
 80092b4:	4638      	mov	r0, r7
 80092b6:	9903      	ldr	r1, [sp, #12]
 80092b8:	f001 fa26 	bl	800a708 <strncmp>
 80092bc:	4605      	mov	r5, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d166      	bne.n	8009390 <__gethex+0x12c>
 80092c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80092c6:	eb07 060a 	add.w	r6, r7, sl
 80092ca:	f7ff ffb6 	bl	800923a <__hexdig_fun>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d060      	beq.n	8009394 <__gethex+0x130>
 80092d2:	4633      	mov	r3, r6
 80092d4:	7818      	ldrb	r0, [r3, #0]
 80092d6:	461f      	mov	r7, r3
 80092d8:	2830      	cmp	r0, #48	; 0x30
 80092da:	f103 0301 	add.w	r3, r3, #1
 80092de:	d0f9      	beq.n	80092d4 <__gethex+0x70>
 80092e0:	f7ff ffab 	bl	800923a <__hexdig_fun>
 80092e4:	2301      	movs	r3, #1
 80092e6:	fab0 f480 	clz	r4, r0
 80092ea:	4635      	mov	r5, r6
 80092ec:	0964      	lsrs	r4, r4, #5
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	463a      	mov	r2, r7
 80092f2:	4616      	mov	r6, r2
 80092f4:	7830      	ldrb	r0, [r6, #0]
 80092f6:	3201      	adds	r2, #1
 80092f8:	f7ff ff9f 	bl	800923a <__hexdig_fun>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1f8      	bne.n	80092f2 <__gethex+0x8e>
 8009300:	4652      	mov	r2, sl
 8009302:	4630      	mov	r0, r6
 8009304:	9903      	ldr	r1, [sp, #12]
 8009306:	f001 f9ff 	bl	800a708 <strncmp>
 800930a:	b980      	cbnz	r0, 800932e <__gethex+0xca>
 800930c:	b94d      	cbnz	r5, 8009322 <__gethex+0xbe>
 800930e:	eb06 050a 	add.w	r5, r6, sl
 8009312:	462a      	mov	r2, r5
 8009314:	4616      	mov	r6, r2
 8009316:	7830      	ldrb	r0, [r6, #0]
 8009318:	3201      	adds	r2, #1
 800931a:	f7ff ff8e 	bl	800923a <__hexdig_fun>
 800931e:	2800      	cmp	r0, #0
 8009320:	d1f8      	bne.n	8009314 <__gethex+0xb0>
 8009322:	1bad      	subs	r5, r5, r6
 8009324:	00ad      	lsls	r5, r5, #2
 8009326:	e004      	b.n	8009332 <__gethex+0xce>
 8009328:	2400      	movs	r4, #0
 800932a:	4625      	mov	r5, r4
 800932c:	e7e0      	b.n	80092f0 <__gethex+0x8c>
 800932e:	2d00      	cmp	r5, #0
 8009330:	d1f7      	bne.n	8009322 <__gethex+0xbe>
 8009332:	7833      	ldrb	r3, [r6, #0]
 8009334:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009338:	2b50      	cmp	r3, #80	; 0x50
 800933a:	d139      	bne.n	80093b0 <__gethex+0x14c>
 800933c:	7873      	ldrb	r3, [r6, #1]
 800933e:	2b2b      	cmp	r3, #43	; 0x2b
 8009340:	d02a      	beq.n	8009398 <__gethex+0x134>
 8009342:	2b2d      	cmp	r3, #45	; 0x2d
 8009344:	d02c      	beq.n	80093a0 <__gethex+0x13c>
 8009346:	f04f 0900 	mov.w	r9, #0
 800934a:	1c71      	adds	r1, r6, #1
 800934c:	7808      	ldrb	r0, [r1, #0]
 800934e:	f7ff ff74 	bl	800923a <__hexdig_fun>
 8009352:	1e43      	subs	r3, r0, #1
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b18      	cmp	r3, #24
 8009358:	d82a      	bhi.n	80093b0 <__gethex+0x14c>
 800935a:	f1a0 0210 	sub.w	r2, r0, #16
 800935e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009362:	f7ff ff6a 	bl	800923a <__hexdig_fun>
 8009366:	1e43      	subs	r3, r0, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b18      	cmp	r3, #24
 800936c:	d91b      	bls.n	80093a6 <__gethex+0x142>
 800936e:	f1b9 0f00 	cmp.w	r9, #0
 8009372:	d000      	beq.n	8009376 <__gethex+0x112>
 8009374:	4252      	negs	r2, r2
 8009376:	4415      	add	r5, r2
 8009378:	f8cb 1000 	str.w	r1, [fp]
 800937c:	b1d4      	cbz	r4, 80093b4 <__gethex+0x150>
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	bf14      	ite	ne
 8009384:	2700      	movne	r7, #0
 8009386:	2706      	moveq	r7, #6
 8009388:	4638      	mov	r0, r7
 800938a:	b00b      	add	sp, #44	; 0x2c
 800938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009390:	463e      	mov	r6, r7
 8009392:	4625      	mov	r5, r4
 8009394:	2401      	movs	r4, #1
 8009396:	e7cc      	b.n	8009332 <__gethex+0xce>
 8009398:	f04f 0900 	mov.w	r9, #0
 800939c:	1cb1      	adds	r1, r6, #2
 800939e:	e7d5      	b.n	800934c <__gethex+0xe8>
 80093a0:	f04f 0901 	mov.w	r9, #1
 80093a4:	e7fa      	b.n	800939c <__gethex+0x138>
 80093a6:	230a      	movs	r3, #10
 80093a8:	fb03 0202 	mla	r2, r3, r2, r0
 80093ac:	3a10      	subs	r2, #16
 80093ae:	e7d6      	b.n	800935e <__gethex+0xfa>
 80093b0:	4631      	mov	r1, r6
 80093b2:	e7e1      	b.n	8009378 <__gethex+0x114>
 80093b4:	4621      	mov	r1, r4
 80093b6:	1bf3      	subs	r3, r6, r7
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b07      	cmp	r3, #7
 80093bc:	dc0a      	bgt.n	80093d4 <__gethex+0x170>
 80093be:	9802      	ldr	r0, [sp, #8]
 80093c0:	f000 fa88 	bl	80098d4 <_Balloc>
 80093c4:	4604      	mov	r4, r0
 80093c6:	b940      	cbnz	r0, 80093da <__gethex+0x176>
 80093c8:	4602      	mov	r2, r0
 80093ca:	21de      	movs	r1, #222	; 0xde
 80093cc:	4b5b      	ldr	r3, [pc, #364]	; (800953c <__gethex+0x2d8>)
 80093ce:	485c      	ldr	r0, [pc, #368]	; (8009540 <__gethex+0x2dc>)
 80093d0:	f001 f9bc 	bl	800a74c <__assert_func>
 80093d4:	3101      	adds	r1, #1
 80093d6:	105b      	asrs	r3, r3, #1
 80093d8:	e7ef      	b.n	80093ba <__gethex+0x156>
 80093da:	f04f 0b00 	mov.w	fp, #0
 80093de:	f100 0914 	add.w	r9, r0, #20
 80093e2:	f1ca 0301 	rsb	r3, sl, #1
 80093e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80093ea:	f8cd b004 	str.w	fp, [sp, #4]
 80093ee:	9308      	str	r3, [sp, #32]
 80093f0:	42b7      	cmp	r7, r6
 80093f2:	d33f      	bcc.n	8009474 <__gethex+0x210>
 80093f4:	9f04      	ldr	r7, [sp, #16]
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	f847 3b04 	str.w	r3, [r7], #4
 80093fc:	eba7 0709 	sub.w	r7, r7, r9
 8009400:	10bf      	asrs	r7, r7, #2
 8009402:	6127      	str	r7, [r4, #16]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fb57 	bl	8009ab8 <__hi0bits>
 800940a:	017f      	lsls	r7, r7, #5
 800940c:	f8d8 6000 	ldr.w	r6, [r8]
 8009410:	1a3f      	subs	r7, r7, r0
 8009412:	42b7      	cmp	r7, r6
 8009414:	dd62      	ble.n	80094dc <__gethex+0x278>
 8009416:	1bbf      	subs	r7, r7, r6
 8009418:	4639      	mov	r1, r7
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fef1 	bl	800a202 <__any_on>
 8009420:	4682      	mov	sl, r0
 8009422:	b1a8      	cbz	r0, 8009450 <__gethex+0x1ec>
 8009424:	f04f 0a01 	mov.w	sl, #1
 8009428:	1e7b      	subs	r3, r7, #1
 800942a:	1159      	asrs	r1, r3, #5
 800942c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009430:	f003 021f 	and.w	r2, r3, #31
 8009434:	fa0a f202 	lsl.w	r2, sl, r2
 8009438:	420a      	tst	r2, r1
 800943a:	d009      	beq.n	8009450 <__gethex+0x1ec>
 800943c:	4553      	cmp	r3, sl
 800943e:	dd05      	ble.n	800944c <__gethex+0x1e8>
 8009440:	4620      	mov	r0, r4
 8009442:	1eb9      	subs	r1, r7, #2
 8009444:	f000 fedd 	bl	800a202 <__any_on>
 8009448:	2800      	cmp	r0, #0
 800944a:	d144      	bne.n	80094d6 <__gethex+0x272>
 800944c:	f04f 0a02 	mov.w	sl, #2
 8009450:	4639      	mov	r1, r7
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff fe9e 	bl	8009194 <rshift>
 8009458:	443d      	add	r5, r7
 800945a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800945e:	42ab      	cmp	r3, r5
 8009460:	da4a      	bge.n	80094f8 <__gethex+0x294>
 8009462:	4621      	mov	r1, r4
 8009464:	9802      	ldr	r0, [sp, #8]
 8009466:	f000 fa75 	bl	8009954 <_Bfree>
 800946a:	2300      	movs	r3, #0
 800946c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800946e:	27a3      	movs	r7, #163	; 0xa3
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	e789      	b.n	8009388 <__gethex+0x124>
 8009474:	1e73      	subs	r3, r6, #1
 8009476:	9a06      	ldr	r2, [sp, #24]
 8009478:	9307      	str	r3, [sp, #28]
 800947a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800947e:	4293      	cmp	r3, r2
 8009480:	d019      	beq.n	80094b6 <__gethex+0x252>
 8009482:	f1bb 0f20 	cmp.w	fp, #32
 8009486:	d107      	bne.n	8009498 <__gethex+0x234>
 8009488:	9b04      	ldr	r3, [sp, #16]
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	f843 2b04 	str.w	r2, [r3], #4
 8009490:	9304      	str	r3, [sp, #16]
 8009492:	2300      	movs	r3, #0
 8009494:	469b      	mov	fp, r3
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800949c:	f7ff fecd 	bl	800923a <__hexdig_fun>
 80094a0:	9b01      	ldr	r3, [sp, #4]
 80094a2:	f000 000f 	and.w	r0, r0, #15
 80094a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80094aa:	4303      	orrs	r3, r0
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	f10b 0b04 	add.w	fp, fp, #4
 80094b2:	9b07      	ldr	r3, [sp, #28]
 80094b4:	e00d      	b.n	80094d2 <__gethex+0x26e>
 80094b6:	9a08      	ldr	r2, [sp, #32]
 80094b8:	1e73      	subs	r3, r6, #1
 80094ba:	4413      	add	r3, r2
 80094bc:	42bb      	cmp	r3, r7
 80094be:	d3e0      	bcc.n	8009482 <__gethex+0x21e>
 80094c0:	4618      	mov	r0, r3
 80094c2:	4652      	mov	r2, sl
 80094c4:	9903      	ldr	r1, [sp, #12]
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
 80094c8:	f001 f91e 	bl	800a708 <strncmp>
 80094cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1d7      	bne.n	8009482 <__gethex+0x21e>
 80094d2:	461e      	mov	r6, r3
 80094d4:	e78c      	b.n	80093f0 <__gethex+0x18c>
 80094d6:	f04f 0a03 	mov.w	sl, #3
 80094da:	e7b9      	b.n	8009450 <__gethex+0x1ec>
 80094dc:	da09      	bge.n	80094f2 <__gethex+0x28e>
 80094de:	1bf7      	subs	r7, r6, r7
 80094e0:	4621      	mov	r1, r4
 80094e2:	463a      	mov	r2, r7
 80094e4:	9802      	ldr	r0, [sp, #8]
 80094e6:	f000 fc4d 	bl	8009d84 <__lshift>
 80094ea:	4604      	mov	r4, r0
 80094ec:	1bed      	subs	r5, r5, r7
 80094ee:	f100 0914 	add.w	r9, r0, #20
 80094f2:	f04f 0a00 	mov.w	sl, #0
 80094f6:	e7b0      	b.n	800945a <__gethex+0x1f6>
 80094f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80094fc:	42a8      	cmp	r0, r5
 80094fe:	dd72      	ble.n	80095e6 <__gethex+0x382>
 8009500:	1b45      	subs	r5, r0, r5
 8009502:	42ae      	cmp	r6, r5
 8009504:	dc35      	bgt.n	8009572 <__gethex+0x30e>
 8009506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d029      	beq.n	8009562 <__gethex+0x2fe>
 800950e:	2b03      	cmp	r3, #3
 8009510:	d02b      	beq.n	800956a <__gethex+0x306>
 8009512:	2b01      	cmp	r3, #1
 8009514:	d11c      	bne.n	8009550 <__gethex+0x2ec>
 8009516:	42ae      	cmp	r6, r5
 8009518:	d11a      	bne.n	8009550 <__gethex+0x2ec>
 800951a:	2e01      	cmp	r6, #1
 800951c:	d112      	bne.n	8009544 <__gethex+0x2e0>
 800951e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009522:	9a05      	ldr	r2, [sp, #20]
 8009524:	2762      	movs	r7, #98	; 0x62
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	2301      	movs	r3, #1
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	f8c9 3000 	str.w	r3, [r9]
 8009530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009532:	601c      	str	r4, [r3, #0]
 8009534:	e728      	b.n	8009388 <__gethex+0x124>
 8009536:	bf00      	nop
 8009538:	0800b7a0 	.word	0x0800b7a0
 800953c:	0800b728 	.word	0x0800b728
 8009540:	0800b739 	.word	0x0800b739
 8009544:	4620      	mov	r0, r4
 8009546:	1e71      	subs	r1, r6, #1
 8009548:	f000 fe5b 	bl	800a202 <__any_on>
 800954c:	2800      	cmp	r0, #0
 800954e:	d1e6      	bne.n	800951e <__gethex+0x2ba>
 8009550:	4621      	mov	r1, r4
 8009552:	9802      	ldr	r0, [sp, #8]
 8009554:	f000 f9fe 	bl	8009954 <_Bfree>
 8009558:	2300      	movs	r3, #0
 800955a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800955c:	2750      	movs	r7, #80	; 0x50
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	e712      	b.n	8009388 <__gethex+0x124>
 8009562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1f3      	bne.n	8009550 <__gethex+0x2ec>
 8009568:	e7d9      	b.n	800951e <__gethex+0x2ba>
 800956a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1d6      	bne.n	800951e <__gethex+0x2ba>
 8009570:	e7ee      	b.n	8009550 <__gethex+0x2ec>
 8009572:	1e6f      	subs	r7, r5, #1
 8009574:	f1ba 0f00 	cmp.w	sl, #0
 8009578:	d132      	bne.n	80095e0 <__gethex+0x37c>
 800957a:	b127      	cbz	r7, 8009586 <__gethex+0x322>
 800957c:	4639      	mov	r1, r7
 800957e:	4620      	mov	r0, r4
 8009580:	f000 fe3f 	bl	800a202 <__any_on>
 8009584:	4682      	mov	sl, r0
 8009586:	2101      	movs	r1, #1
 8009588:	117b      	asrs	r3, r7, #5
 800958a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800958e:	f007 071f 	and.w	r7, r7, #31
 8009592:	fa01 f707 	lsl.w	r7, r1, r7
 8009596:	421f      	tst	r7, r3
 8009598:	f04f 0702 	mov.w	r7, #2
 800959c:	4629      	mov	r1, r5
 800959e:	4620      	mov	r0, r4
 80095a0:	bf18      	it	ne
 80095a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80095a6:	1b76      	subs	r6, r6, r5
 80095a8:	f7ff fdf4 	bl	8009194 <rshift>
 80095ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095b0:	f1ba 0f00 	cmp.w	sl, #0
 80095b4:	d048      	beq.n	8009648 <__gethex+0x3e4>
 80095b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d015      	beq.n	80095ea <__gethex+0x386>
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d017      	beq.n	80095f2 <__gethex+0x38e>
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d109      	bne.n	80095da <__gethex+0x376>
 80095c6:	f01a 0f02 	tst.w	sl, #2
 80095ca:	d006      	beq.n	80095da <__gethex+0x376>
 80095cc:	f8d9 0000 	ldr.w	r0, [r9]
 80095d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80095d4:	f01a 0f01 	tst.w	sl, #1
 80095d8:	d10e      	bne.n	80095f8 <__gethex+0x394>
 80095da:	f047 0710 	orr.w	r7, r7, #16
 80095de:	e033      	b.n	8009648 <__gethex+0x3e4>
 80095e0:	f04f 0a01 	mov.w	sl, #1
 80095e4:	e7cf      	b.n	8009586 <__gethex+0x322>
 80095e6:	2701      	movs	r7, #1
 80095e8:	e7e2      	b.n	80095b0 <__gethex+0x34c>
 80095ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ec:	f1c3 0301 	rsb	r3, r3, #1
 80095f0:	9315      	str	r3, [sp, #84]	; 0x54
 80095f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0f0      	beq.n	80095da <__gethex+0x376>
 80095f8:	f04f 0c00 	mov.w	ip, #0
 80095fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009600:	f104 0314 	add.w	r3, r4, #20
 8009604:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009608:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800960c:	4618      	mov	r0, r3
 800960e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009612:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009616:	d01c      	beq.n	8009652 <__gethex+0x3ee>
 8009618:	3201      	adds	r2, #1
 800961a:	6002      	str	r2, [r0, #0]
 800961c:	2f02      	cmp	r7, #2
 800961e:	f104 0314 	add.w	r3, r4, #20
 8009622:	d13d      	bne.n	80096a0 <__gethex+0x43c>
 8009624:	f8d8 2000 	ldr.w	r2, [r8]
 8009628:	3a01      	subs	r2, #1
 800962a:	42b2      	cmp	r2, r6
 800962c:	d10a      	bne.n	8009644 <__gethex+0x3e0>
 800962e:	2201      	movs	r2, #1
 8009630:	1171      	asrs	r1, r6, #5
 8009632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009636:	f006 061f 	and.w	r6, r6, #31
 800963a:	fa02 f606 	lsl.w	r6, r2, r6
 800963e:	421e      	tst	r6, r3
 8009640:	bf18      	it	ne
 8009642:	4617      	movne	r7, r2
 8009644:	f047 0720 	orr.w	r7, r7, #32
 8009648:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800964a:	601c      	str	r4, [r3, #0]
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	601d      	str	r5, [r3, #0]
 8009650:	e69a      	b.n	8009388 <__gethex+0x124>
 8009652:	4299      	cmp	r1, r3
 8009654:	f843 cc04 	str.w	ip, [r3, #-4]
 8009658:	d8d8      	bhi.n	800960c <__gethex+0x3a8>
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	459b      	cmp	fp, r3
 800965e:	db17      	blt.n	8009690 <__gethex+0x42c>
 8009660:	6861      	ldr	r1, [r4, #4]
 8009662:	9802      	ldr	r0, [sp, #8]
 8009664:	3101      	adds	r1, #1
 8009666:	f000 f935 	bl	80098d4 <_Balloc>
 800966a:	4681      	mov	r9, r0
 800966c:	b918      	cbnz	r0, 8009676 <__gethex+0x412>
 800966e:	4602      	mov	r2, r0
 8009670:	2184      	movs	r1, #132	; 0x84
 8009672:	4b19      	ldr	r3, [pc, #100]	; (80096d8 <__gethex+0x474>)
 8009674:	e6ab      	b.n	80093ce <__gethex+0x16a>
 8009676:	6922      	ldr	r2, [r4, #16]
 8009678:	f104 010c 	add.w	r1, r4, #12
 800967c:	3202      	adds	r2, #2
 800967e:	0092      	lsls	r2, r2, #2
 8009680:	300c      	adds	r0, #12
 8009682:	f000 f919 	bl	80098b8 <memcpy>
 8009686:	4621      	mov	r1, r4
 8009688:	9802      	ldr	r0, [sp, #8]
 800968a:	f000 f963 	bl	8009954 <_Bfree>
 800968e:	464c      	mov	r4, r9
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	6122      	str	r2, [r4, #16]
 8009696:	2201      	movs	r2, #1
 8009698:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800969c:	615a      	str	r2, [r3, #20]
 800969e:	e7bd      	b.n	800961c <__gethex+0x3b8>
 80096a0:	6922      	ldr	r2, [r4, #16]
 80096a2:	455a      	cmp	r2, fp
 80096a4:	dd0b      	ble.n	80096be <__gethex+0x45a>
 80096a6:	2101      	movs	r1, #1
 80096a8:	4620      	mov	r0, r4
 80096aa:	f7ff fd73 	bl	8009194 <rshift>
 80096ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096b2:	3501      	adds	r5, #1
 80096b4:	42ab      	cmp	r3, r5
 80096b6:	f6ff aed4 	blt.w	8009462 <__gethex+0x1fe>
 80096ba:	2701      	movs	r7, #1
 80096bc:	e7c2      	b.n	8009644 <__gethex+0x3e0>
 80096be:	f016 061f 	ands.w	r6, r6, #31
 80096c2:	d0fa      	beq.n	80096ba <__gethex+0x456>
 80096c4:	4453      	add	r3, sl
 80096c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096ca:	f000 f9f5 	bl	8009ab8 <__hi0bits>
 80096ce:	f1c6 0620 	rsb	r6, r6, #32
 80096d2:	42b0      	cmp	r0, r6
 80096d4:	dbe7      	blt.n	80096a6 <__gethex+0x442>
 80096d6:	e7f0      	b.n	80096ba <__gethex+0x456>
 80096d8:	0800b728 	.word	0x0800b728

080096dc <L_shift>:
 80096dc:	f1c2 0208 	rsb	r2, r2, #8
 80096e0:	0092      	lsls	r2, r2, #2
 80096e2:	b570      	push	{r4, r5, r6, lr}
 80096e4:	f1c2 0620 	rsb	r6, r2, #32
 80096e8:	6843      	ldr	r3, [r0, #4]
 80096ea:	6804      	ldr	r4, [r0, #0]
 80096ec:	fa03 f506 	lsl.w	r5, r3, r6
 80096f0:	432c      	orrs	r4, r5
 80096f2:	40d3      	lsrs	r3, r2
 80096f4:	6004      	str	r4, [r0, #0]
 80096f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80096fa:	4288      	cmp	r0, r1
 80096fc:	d3f4      	bcc.n	80096e8 <L_shift+0xc>
 80096fe:	bd70      	pop	{r4, r5, r6, pc}

08009700 <__match>:
 8009700:	b530      	push	{r4, r5, lr}
 8009702:	6803      	ldr	r3, [r0, #0]
 8009704:	3301      	adds	r3, #1
 8009706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800970a:	b914      	cbnz	r4, 8009712 <__match+0x12>
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	2001      	movs	r0, #1
 8009710:	bd30      	pop	{r4, r5, pc}
 8009712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009716:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800971a:	2d19      	cmp	r5, #25
 800971c:	bf98      	it	ls
 800971e:	3220      	addls	r2, #32
 8009720:	42a2      	cmp	r2, r4
 8009722:	d0f0      	beq.n	8009706 <__match+0x6>
 8009724:	2000      	movs	r0, #0
 8009726:	e7f3      	b.n	8009710 <__match+0x10>

08009728 <__hexnan>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	2500      	movs	r5, #0
 800972e:	680b      	ldr	r3, [r1, #0]
 8009730:	4682      	mov	sl, r0
 8009732:	115e      	asrs	r6, r3, #5
 8009734:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009738:	f013 031f 	ands.w	r3, r3, #31
 800973c:	bf18      	it	ne
 800973e:	3604      	addne	r6, #4
 8009740:	1f37      	subs	r7, r6, #4
 8009742:	46b9      	mov	r9, r7
 8009744:	463c      	mov	r4, r7
 8009746:	46ab      	mov	fp, r5
 8009748:	b087      	sub	sp, #28
 800974a:	4690      	mov	r8, r2
 800974c:	6802      	ldr	r2, [r0, #0]
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	f846 5c04 	str.w	r5, [r6, #-4]
 8009754:	9502      	str	r5, [sp, #8]
 8009756:	7851      	ldrb	r1, [r2, #1]
 8009758:	1c53      	adds	r3, r2, #1
 800975a:	9303      	str	r3, [sp, #12]
 800975c:	b341      	cbz	r1, 80097b0 <__hexnan+0x88>
 800975e:	4608      	mov	r0, r1
 8009760:	9205      	str	r2, [sp, #20]
 8009762:	9104      	str	r1, [sp, #16]
 8009764:	f7ff fd69 	bl	800923a <__hexdig_fun>
 8009768:	2800      	cmp	r0, #0
 800976a:	d14f      	bne.n	800980c <__hexnan+0xe4>
 800976c:	9904      	ldr	r1, [sp, #16]
 800976e:	9a05      	ldr	r2, [sp, #20]
 8009770:	2920      	cmp	r1, #32
 8009772:	d818      	bhi.n	80097a6 <__hexnan+0x7e>
 8009774:	9b02      	ldr	r3, [sp, #8]
 8009776:	459b      	cmp	fp, r3
 8009778:	dd13      	ble.n	80097a2 <__hexnan+0x7a>
 800977a:	454c      	cmp	r4, r9
 800977c:	d206      	bcs.n	800978c <__hexnan+0x64>
 800977e:	2d07      	cmp	r5, #7
 8009780:	dc04      	bgt.n	800978c <__hexnan+0x64>
 8009782:	462a      	mov	r2, r5
 8009784:	4649      	mov	r1, r9
 8009786:	4620      	mov	r0, r4
 8009788:	f7ff ffa8 	bl	80096dc <L_shift>
 800978c:	4544      	cmp	r4, r8
 800978e:	d950      	bls.n	8009832 <__hexnan+0x10a>
 8009790:	2300      	movs	r3, #0
 8009792:	f1a4 0904 	sub.w	r9, r4, #4
 8009796:	f844 3c04 	str.w	r3, [r4, #-4]
 800979a:	461d      	mov	r5, r3
 800979c:	464c      	mov	r4, r9
 800979e:	f8cd b008 	str.w	fp, [sp, #8]
 80097a2:	9a03      	ldr	r2, [sp, #12]
 80097a4:	e7d7      	b.n	8009756 <__hexnan+0x2e>
 80097a6:	2929      	cmp	r1, #41	; 0x29
 80097a8:	d156      	bne.n	8009858 <__hexnan+0x130>
 80097aa:	3202      	adds	r2, #2
 80097ac:	f8ca 2000 	str.w	r2, [sl]
 80097b0:	f1bb 0f00 	cmp.w	fp, #0
 80097b4:	d050      	beq.n	8009858 <__hexnan+0x130>
 80097b6:	454c      	cmp	r4, r9
 80097b8:	d206      	bcs.n	80097c8 <__hexnan+0xa0>
 80097ba:	2d07      	cmp	r5, #7
 80097bc:	dc04      	bgt.n	80097c8 <__hexnan+0xa0>
 80097be:	462a      	mov	r2, r5
 80097c0:	4649      	mov	r1, r9
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7ff ff8a 	bl	80096dc <L_shift>
 80097c8:	4544      	cmp	r4, r8
 80097ca:	d934      	bls.n	8009836 <__hexnan+0x10e>
 80097cc:	4623      	mov	r3, r4
 80097ce:	f1a8 0204 	sub.w	r2, r8, #4
 80097d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80097d6:	429f      	cmp	r7, r3
 80097d8:	f842 1f04 	str.w	r1, [r2, #4]!
 80097dc:	d2f9      	bcs.n	80097d2 <__hexnan+0xaa>
 80097de:	1b3b      	subs	r3, r7, r4
 80097e0:	f023 0303 	bic.w	r3, r3, #3
 80097e4:	3304      	adds	r3, #4
 80097e6:	3401      	adds	r4, #1
 80097e8:	3e03      	subs	r6, #3
 80097ea:	42b4      	cmp	r4, r6
 80097ec:	bf88      	it	hi
 80097ee:	2304      	movhi	r3, #4
 80097f0:	2200      	movs	r2, #0
 80097f2:	4443      	add	r3, r8
 80097f4:	f843 2b04 	str.w	r2, [r3], #4
 80097f8:	429f      	cmp	r7, r3
 80097fa:	d2fb      	bcs.n	80097f4 <__hexnan+0xcc>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	b91b      	cbnz	r3, 8009808 <__hexnan+0xe0>
 8009800:	4547      	cmp	r7, r8
 8009802:	d127      	bne.n	8009854 <__hexnan+0x12c>
 8009804:	2301      	movs	r3, #1
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	2005      	movs	r0, #5
 800980a:	e026      	b.n	800985a <__hexnan+0x132>
 800980c:	3501      	adds	r5, #1
 800980e:	2d08      	cmp	r5, #8
 8009810:	f10b 0b01 	add.w	fp, fp, #1
 8009814:	dd06      	ble.n	8009824 <__hexnan+0xfc>
 8009816:	4544      	cmp	r4, r8
 8009818:	d9c3      	bls.n	80097a2 <__hexnan+0x7a>
 800981a:	2300      	movs	r3, #0
 800981c:	2501      	movs	r5, #1
 800981e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009822:	3c04      	subs	r4, #4
 8009824:	6822      	ldr	r2, [r4, #0]
 8009826:	f000 000f 	and.w	r0, r0, #15
 800982a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800982e:	6022      	str	r2, [r4, #0]
 8009830:	e7b7      	b.n	80097a2 <__hexnan+0x7a>
 8009832:	2508      	movs	r5, #8
 8009834:	e7b5      	b.n	80097a2 <__hexnan+0x7a>
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0df      	beq.n	80097fc <__hexnan+0xd4>
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	f1c3 0320 	rsb	r3, r3, #32
 8009844:	fa22 f303 	lsr.w	r3, r2, r3
 8009848:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800984c:	401a      	ands	r2, r3
 800984e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009852:	e7d3      	b.n	80097fc <__hexnan+0xd4>
 8009854:	3f04      	subs	r7, #4
 8009856:	e7d1      	b.n	80097fc <__hexnan+0xd4>
 8009858:	2004      	movs	r0, #4
 800985a:	b007      	add	sp, #28
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009860 <_localeconv_r>:
 8009860:	4800      	ldr	r0, [pc, #0]	; (8009864 <_localeconv_r+0x4>)
 8009862:	4770      	bx	lr
 8009864:	20000164 	.word	0x20000164

08009868 <malloc>:
 8009868:	4b02      	ldr	r3, [pc, #8]	; (8009874 <malloc+0xc>)
 800986a:	4601      	mov	r1, r0
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f000 bd65 	b.w	800a33c <_malloc_r>
 8009872:	bf00      	nop
 8009874:	2000000c 	.word	0x2000000c

08009878 <__ascii_mbtowc>:
 8009878:	b082      	sub	sp, #8
 800987a:	b901      	cbnz	r1, 800987e <__ascii_mbtowc+0x6>
 800987c:	a901      	add	r1, sp, #4
 800987e:	b142      	cbz	r2, 8009892 <__ascii_mbtowc+0x1a>
 8009880:	b14b      	cbz	r3, 8009896 <__ascii_mbtowc+0x1e>
 8009882:	7813      	ldrb	r3, [r2, #0]
 8009884:	600b      	str	r3, [r1, #0]
 8009886:	7812      	ldrb	r2, [r2, #0]
 8009888:	1e10      	subs	r0, r2, #0
 800988a:	bf18      	it	ne
 800988c:	2001      	movne	r0, #1
 800988e:	b002      	add	sp, #8
 8009890:	4770      	bx	lr
 8009892:	4610      	mov	r0, r2
 8009894:	e7fb      	b.n	800988e <__ascii_mbtowc+0x16>
 8009896:	f06f 0001 	mvn.w	r0, #1
 800989a:	e7f8      	b.n	800988e <__ascii_mbtowc+0x16>

0800989c <memchr>:
 800989c:	4603      	mov	r3, r0
 800989e:	b510      	push	{r4, lr}
 80098a0:	b2c9      	uxtb	r1, r1
 80098a2:	4402      	add	r2, r0
 80098a4:	4293      	cmp	r3, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	d101      	bne.n	80098ae <memchr+0x12>
 80098aa:	2000      	movs	r0, #0
 80098ac:	e003      	b.n	80098b6 <memchr+0x1a>
 80098ae:	7804      	ldrb	r4, [r0, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	428c      	cmp	r4, r1
 80098b4:	d1f6      	bne.n	80098a4 <memchr+0x8>
 80098b6:	bd10      	pop	{r4, pc}

080098b8 <memcpy>:
 80098b8:	440a      	add	r2, r1
 80098ba:	4291      	cmp	r1, r2
 80098bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098c0:	d100      	bne.n	80098c4 <memcpy+0xc>
 80098c2:	4770      	bx	lr
 80098c4:	b510      	push	{r4, lr}
 80098c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ca:	4291      	cmp	r1, r2
 80098cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098d0:	d1f9      	bne.n	80098c6 <memcpy+0xe>
 80098d2:	bd10      	pop	{r4, pc}

080098d4 <_Balloc>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098d8:	4604      	mov	r4, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	b976      	cbnz	r6, 80098fc <_Balloc+0x28>
 80098de:	2010      	movs	r0, #16
 80098e0:	f7ff ffc2 	bl	8009868 <malloc>
 80098e4:	4602      	mov	r2, r0
 80098e6:	6260      	str	r0, [r4, #36]	; 0x24
 80098e8:	b920      	cbnz	r0, 80098f4 <_Balloc+0x20>
 80098ea:	2166      	movs	r1, #102	; 0x66
 80098ec:	4b17      	ldr	r3, [pc, #92]	; (800994c <_Balloc+0x78>)
 80098ee:	4818      	ldr	r0, [pc, #96]	; (8009950 <_Balloc+0x7c>)
 80098f0:	f000 ff2c 	bl	800a74c <__assert_func>
 80098f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f8:	6006      	str	r6, [r0, #0]
 80098fa:	60c6      	str	r6, [r0, #12]
 80098fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098fe:	68f3      	ldr	r3, [r6, #12]
 8009900:	b183      	cbz	r3, 8009924 <_Balloc+0x50>
 8009902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800990a:	b9b8      	cbnz	r0, 800993c <_Balloc+0x68>
 800990c:	2101      	movs	r1, #1
 800990e:	fa01 f605 	lsl.w	r6, r1, r5
 8009912:	1d72      	adds	r2, r6, #5
 8009914:	4620      	mov	r0, r4
 8009916:	0092      	lsls	r2, r2, #2
 8009918:	f000 fc94 	bl	800a244 <_calloc_r>
 800991c:	b160      	cbz	r0, 8009938 <_Balloc+0x64>
 800991e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009922:	e00e      	b.n	8009942 <_Balloc+0x6e>
 8009924:	2221      	movs	r2, #33	; 0x21
 8009926:	2104      	movs	r1, #4
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fc8b 	bl	800a244 <_calloc_r>
 800992e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009930:	60f0      	str	r0, [r6, #12]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e4      	bne.n	8009902 <_Balloc+0x2e>
 8009938:	2000      	movs	r0, #0
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	6802      	ldr	r2, [r0, #0]
 800993e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009942:	2300      	movs	r3, #0
 8009944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009948:	e7f7      	b.n	800993a <_Balloc+0x66>
 800994a:	bf00      	nop
 800994c:	0800b6b6 	.word	0x0800b6b6
 8009950:	0800b7b4 	.word	0x0800b7b4

08009954 <_Bfree>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009958:	4605      	mov	r5, r0
 800995a:	460c      	mov	r4, r1
 800995c:	b976      	cbnz	r6, 800997c <_Bfree+0x28>
 800995e:	2010      	movs	r0, #16
 8009960:	f7ff ff82 	bl	8009868 <malloc>
 8009964:	4602      	mov	r2, r0
 8009966:	6268      	str	r0, [r5, #36]	; 0x24
 8009968:	b920      	cbnz	r0, 8009974 <_Bfree+0x20>
 800996a:	218a      	movs	r1, #138	; 0x8a
 800996c:	4b08      	ldr	r3, [pc, #32]	; (8009990 <_Bfree+0x3c>)
 800996e:	4809      	ldr	r0, [pc, #36]	; (8009994 <_Bfree+0x40>)
 8009970:	f000 feec 	bl	800a74c <__assert_func>
 8009974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009978:	6006      	str	r6, [r0, #0]
 800997a:	60c6      	str	r6, [r0, #12]
 800997c:	b13c      	cbz	r4, 800998e <_Bfree+0x3a>
 800997e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009980:	6862      	ldr	r2, [r4, #4]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009988:	6021      	str	r1, [r4, #0]
 800998a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	0800b6b6 	.word	0x0800b6b6
 8009994:	0800b7b4 	.word	0x0800b7b4

08009998 <__multadd>:
 8009998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999c:	4607      	mov	r7, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	461e      	mov	r6, r3
 80099a2:	2000      	movs	r0, #0
 80099a4:	690d      	ldr	r5, [r1, #16]
 80099a6:	f101 0c14 	add.w	ip, r1, #20
 80099aa:	f8dc 3000 	ldr.w	r3, [ip]
 80099ae:	3001      	adds	r0, #1
 80099b0:	b299      	uxth	r1, r3
 80099b2:	fb02 6101 	mla	r1, r2, r1, r6
 80099b6:	0c1e      	lsrs	r6, r3, #16
 80099b8:	0c0b      	lsrs	r3, r1, #16
 80099ba:	fb02 3306 	mla	r3, r2, r6, r3
 80099be:	b289      	uxth	r1, r1
 80099c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099c4:	4285      	cmp	r5, r0
 80099c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099ca:	f84c 1b04 	str.w	r1, [ip], #4
 80099ce:	dcec      	bgt.n	80099aa <__multadd+0x12>
 80099d0:	b30e      	cbz	r6, 8009a16 <__multadd+0x7e>
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	42ab      	cmp	r3, r5
 80099d6:	dc19      	bgt.n	8009a0c <__multadd+0x74>
 80099d8:	6861      	ldr	r1, [r4, #4]
 80099da:	4638      	mov	r0, r7
 80099dc:	3101      	adds	r1, #1
 80099de:	f7ff ff79 	bl	80098d4 <_Balloc>
 80099e2:	4680      	mov	r8, r0
 80099e4:	b928      	cbnz	r0, 80099f2 <__multadd+0x5a>
 80099e6:	4602      	mov	r2, r0
 80099e8:	21b5      	movs	r1, #181	; 0xb5
 80099ea:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <__multadd+0x84>)
 80099ec:	480c      	ldr	r0, [pc, #48]	; (8009a20 <__multadd+0x88>)
 80099ee:	f000 fead 	bl	800a74c <__assert_func>
 80099f2:	6922      	ldr	r2, [r4, #16]
 80099f4:	f104 010c 	add.w	r1, r4, #12
 80099f8:	3202      	adds	r2, #2
 80099fa:	0092      	lsls	r2, r2, #2
 80099fc:	300c      	adds	r0, #12
 80099fe:	f7ff ff5b 	bl	80098b8 <memcpy>
 8009a02:	4621      	mov	r1, r4
 8009a04:	4638      	mov	r0, r7
 8009a06:	f7ff ffa5 	bl	8009954 <_Bfree>
 8009a0a:	4644      	mov	r4, r8
 8009a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a10:	3501      	adds	r5, #1
 8009a12:	615e      	str	r6, [r3, #20]
 8009a14:	6125      	str	r5, [r4, #16]
 8009a16:	4620      	mov	r0, r4
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1c:	0800b728 	.word	0x0800b728
 8009a20:	0800b7b4 	.word	0x0800b7b4

08009a24 <__s2b>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	4615      	mov	r5, r2
 8009a2a:	2209      	movs	r2, #9
 8009a2c:	461f      	mov	r7, r3
 8009a2e:	3308      	adds	r3, #8
 8009a30:	460c      	mov	r4, r1
 8009a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a36:	4606      	mov	r6, r0
 8009a38:	2201      	movs	r2, #1
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	db09      	blt.n	8009a54 <__s2b+0x30>
 8009a40:	4630      	mov	r0, r6
 8009a42:	f7ff ff47 	bl	80098d4 <_Balloc>
 8009a46:	b940      	cbnz	r0, 8009a5a <__s2b+0x36>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	21ce      	movs	r1, #206	; 0xce
 8009a4c:	4b18      	ldr	r3, [pc, #96]	; (8009ab0 <__s2b+0x8c>)
 8009a4e:	4819      	ldr	r0, [pc, #100]	; (8009ab4 <__s2b+0x90>)
 8009a50:	f000 fe7c 	bl	800a74c <__assert_func>
 8009a54:	0052      	lsls	r2, r2, #1
 8009a56:	3101      	adds	r1, #1
 8009a58:	e7f0      	b.n	8009a3c <__s2b+0x18>
 8009a5a:	9b08      	ldr	r3, [sp, #32]
 8009a5c:	2d09      	cmp	r5, #9
 8009a5e:	6143      	str	r3, [r0, #20]
 8009a60:	f04f 0301 	mov.w	r3, #1
 8009a64:	6103      	str	r3, [r0, #16]
 8009a66:	dd16      	ble.n	8009a96 <__s2b+0x72>
 8009a68:	f104 0909 	add.w	r9, r4, #9
 8009a6c:	46c8      	mov	r8, r9
 8009a6e:	442c      	add	r4, r5
 8009a70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a74:	4601      	mov	r1, r0
 8009a76:	220a      	movs	r2, #10
 8009a78:	4630      	mov	r0, r6
 8009a7a:	3b30      	subs	r3, #48	; 0x30
 8009a7c:	f7ff ff8c 	bl	8009998 <__multadd>
 8009a80:	45a0      	cmp	r8, r4
 8009a82:	d1f5      	bne.n	8009a70 <__s2b+0x4c>
 8009a84:	f1a5 0408 	sub.w	r4, r5, #8
 8009a88:	444c      	add	r4, r9
 8009a8a:	1b2d      	subs	r5, r5, r4
 8009a8c:	1963      	adds	r3, r4, r5
 8009a8e:	42bb      	cmp	r3, r7
 8009a90:	db04      	blt.n	8009a9c <__s2b+0x78>
 8009a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a96:	2509      	movs	r5, #9
 8009a98:	340a      	adds	r4, #10
 8009a9a:	e7f6      	b.n	8009a8a <__s2b+0x66>
 8009a9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	220a      	movs	r2, #10
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	3b30      	subs	r3, #48	; 0x30
 8009aa8:	f7ff ff76 	bl	8009998 <__multadd>
 8009aac:	e7ee      	b.n	8009a8c <__s2b+0x68>
 8009aae:	bf00      	nop
 8009ab0:	0800b728 	.word	0x0800b728
 8009ab4:	0800b7b4 	.word	0x0800b7b4

08009ab8 <__hi0bits>:
 8009ab8:	0c02      	lsrs	r2, r0, #16
 8009aba:	0412      	lsls	r2, r2, #16
 8009abc:	4603      	mov	r3, r0
 8009abe:	b9ca      	cbnz	r2, 8009af4 <__hi0bits+0x3c>
 8009ac0:	0403      	lsls	r3, r0, #16
 8009ac2:	2010      	movs	r0, #16
 8009ac4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009ac8:	bf04      	itt	eq
 8009aca:	021b      	lsleq	r3, r3, #8
 8009acc:	3008      	addeq	r0, #8
 8009ace:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009ad2:	bf04      	itt	eq
 8009ad4:	011b      	lsleq	r3, r3, #4
 8009ad6:	3004      	addeq	r0, #4
 8009ad8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009adc:	bf04      	itt	eq
 8009ade:	009b      	lsleq	r3, r3, #2
 8009ae0:	3002      	addeq	r0, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	db05      	blt.n	8009af2 <__hi0bits+0x3a>
 8009ae6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009aea:	f100 0001 	add.w	r0, r0, #1
 8009aee:	bf08      	it	eq
 8009af0:	2020      	moveq	r0, #32
 8009af2:	4770      	bx	lr
 8009af4:	2000      	movs	r0, #0
 8009af6:	e7e5      	b.n	8009ac4 <__hi0bits+0xc>

08009af8 <__lo0bits>:
 8009af8:	6803      	ldr	r3, [r0, #0]
 8009afa:	4602      	mov	r2, r0
 8009afc:	f013 0007 	ands.w	r0, r3, #7
 8009b00:	d00b      	beq.n	8009b1a <__lo0bits+0x22>
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d421      	bmi.n	8009b4a <__lo0bits+0x52>
 8009b06:	0798      	lsls	r0, r3, #30
 8009b08:	bf49      	itett	mi
 8009b0a:	085b      	lsrmi	r3, r3, #1
 8009b0c:	089b      	lsrpl	r3, r3, #2
 8009b0e:	2001      	movmi	r0, #1
 8009b10:	6013      	strmi	r3, [r2, #0]
 8009b12:	bf5c      	itt	pl
 8009b14:	2002      	movpl	r0, #2
 8009b16:	6013      	strpl	r3, [r2, #0]
 8009b18:	4770      	bx	lr
 8009b1a:	b299      	uxth	r1, r3
 8009b1c:	b909      	cbnz	r1, 8009b22 <__lo0bits+0x2a>
 8009b1e:	2010      	movs	r0, #16
 8009b20:	0c1b      	lsrs	r3, r3, #16
 8009b22:	b2d9      	uxtb	r1, r3
 8009b24:	b909      	cbnz	r1, 8009b2a <__lo0bits+0x32>
 8009b26:	3008      	adds	r0, #8
 8009b28:	0a1b      	lsrs	r3, r3, #8
 8009b2a:	0719      	lsls	r1, r3, #28
 8009b2c:	bf04      	itt	eq
 8009b2e:	091b      	lsreq	r3, r3, #4
 8009b30:	3004      	addeq	r0, #4
 8009b32:	0799      	lsls	r1, r3, #30
 8009b34:	bf04      	itt	eq
 8009b36:	089b      	lsreq	r3, r3, #2
 8009b38:	3002      	addeq	r0, #2
 8009b3a:	07d9      	lsls	r1, r3, #31
 8009b3c:	d403      	bmi.n	8009b46 <__lo0bits+0x4e>
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	f100 0001 	add.w	r0, r0, #1
 8009b44:	d003      	beq.n	8009b4e <__lo0bits+0x56>
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	4770      	bx	lr
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	4770      	bx	lr
 8009b4e:	2020      	movs	r0, #32
 8009b50:	4770      	bx	lr
	...

08009b54 <__i2b>:
 8009b54:	b510      	push	{r4, lr}
 8009b56:	460c      	mov	r4, r1
 8009b58:	2101      	movs	r1, #1
 8009b5a:	f7ff febb 	bl	80098d4 <_Balloc>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	b928      	cbnz	r0, 8009b6e <__i2b+0x1a>
 8009b62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b66:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <__i2b+0x24>)
 8009b68:	4804      	ldr	r0, [pc, #16]	; (8009b7c <__i2b+0x28>)
 8009b6a:	f000 fdef 	bl	800a74c <__assert_func>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	6144      	str	r4, [r0, #20]
 8009b72:	6103      	str	r3, [r0, #16]
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	bf00      	nop
 8009b78:	0800b728 	.word	0x0800b728
 8009b7c:	0800b7b4 	.word	0x0800b7b4

08009b80 <__multiply>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	4691      	mov	r9, r2
 8009b86:	690a      	ldr	r2, [r1, #16]
 8009b88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	bfbe      	ittt	lt
 8009b92:	460b      	movlt	r3, r1
 8009b94:	464c      	movlt	r4, r9
 8009b96:	4699      	movlt	r9, r3
 8009b98:	6927      	ldr	r7, [r4, #16]
 8009b9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b9e:	68a3      	ldr	r3, [r4, #8]
 8009ba0:	6861      	ldr	r1, [r4, #4]
 8009ba2:	eb07 060a 	add.w	r6, r7, sl
 8009ba6:	42b3      	cmp	r3, r6
 8009ba8:	b085      	sub	sp, #20
 8009baa:	bfb8      	it	lt
 8009bac:	3101      	addlt	r1, #1
 8009bae:	f7ff fe91 	bl	80098d4 <_Balloc>
 8009bb2:	b930      	cbnz	r0, 8009bc2 <__multiply+0x42>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	f240 115d 	movw	r1, #349	; 0x15d
 8009bba:	4b43      	ldr	r3, [pc, #268]	; (8009cc8 <__multiply+0x148>)
 8009bbc:	4843      	ldr	r0, [pc, #268]	; (8009ccc <__multiply+0x14c>)
 8009bbe:	f000 fdc5 	bl	800a74c <__assert_func>
 8009bc2:	f100 0514 	add.w	r5, r0, #20
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	2200      	movs	r2, #0
 8009bca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bce:	4543      	cmp	r3, r8
 8009bd0:	d321      	bcc.n	8009c16 <__multiply+0x96>
 8009bd2:	f104 0314 	add.w	r3, r4, #20
 8009bd6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bda:	f109 0314 	add.w	r3, r9, #20
 8009bde:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009be2:	9202      	str	r2, [sp, #8]
 8009be4:	1b3a      	subs	r2, r7, r4
 8009be6:	3a15      	subs	r2, #21
 8009be8:	f022 0203 	bic.w	r2, r2, #3
 8009bec:	3204      	adds	r2, #4
 8009bee:	f104 0115 	add.w	r1, r4, #21
 8009bf2:	428f      	cmp	r7, r1
 8009bf4:	bf38      	it	cc
 8009bf6:	2204      	movcc	r2, #4
 8009bf8:	9201      	str	r2, [sp, #4]
 8009bfa:	9a02      	ldr	r2, [sp, #8]
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d80c      	bhi.n	8009c1c <__multiply+0x9c>
 8009c02:	2e00      	cmp	r6, #0
 8009c04:	dd03      	ble.n	8009c0e <__multiply+0x8e>
 8009c06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d059      	beq.n	8009cc2 <__multiply+0x142>
 8009c0e:	6106      	str	r6, [r0, #16]
 8009c10:	b005      	add	sp, #20
 8009c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c16:	f843 2b04 	str.w	r2, [r3], #4
 8009c1a:	e7d8      	b.n	8009bce <__multiply+0x4e>
 8009c1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c20:	f1ba 0f00 	cmp.w	sl, #0
 8009c24:	d023      	beq.n	8009c6e <__multiply+0xee>
 8009c26:	46a9      	mov	r9, r5
 8009c28:	f04f 0c00 	mov.w	ip, #0
 8009c2c:	f104 0e14 	add.w	lr, r4, #20
 8009c30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c34:	f8d9 1000 	ldr.w	r1, [r9]
 8009c38:	fa1f fb82 	uxth.w	fp, r2
 8009c3c:	b289      	uxth	r1, r1
 8009c3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c42:	4461      	add	r1, ip
 8009c44:	f8d9 c000 	ldr.w	ip, [r9]
 8009c48:	0c12      	lsrs	r2, r2, #16
 8009c4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009c4e:	fb0a c202 	mla	r2, sl, r2, ip
 8009c52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c56:	b289      	uxth	r1, r1
 8009c58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c5c:	4577      	cmp	r7, lr
 8009c5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c62:	f849 1b04 	str.w	r1, [r9], #4
 8009c66:	d8e3      	bhi.n	8009c30 <__multiply+0xb0>
 8009c68:	9a01      	ldr	r2, [sp, #4]
 8009c6a:	f845 c002 	str.w	ip, [r5, r2]
 8009c6e:	9a03      	ldr	r2, [sp, #12]
 8009c70:	3304      	adds	r3, #4
 8009c72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	d020      	beq.n	8009cbe <__multiply+0x13e>
 8009c7c:	46ae      	mov	lr, r5
 8009c7e:	f04f 0a00 	mov.w	sl, #0
 8009c82:	6829      	ldr	r1, [r5, #0]
 8009c84:	f104 0c14 	add.w	ip, r4, #20
 8009c88:	f8bc b000 	ldrh.w	fp, [ip]
 8009c8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c90:	b289      	uxth	r1, r1
 8009c92:	fb09 220b 	mla	r2, r9, fp, r2
 8009c96:	4492      	add	sl, r2
 8009c98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c9c:	f84e 1b04 	str.w	r1, [lr], #4
 8009ca0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ca4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ca8:	0c12      	lsrs	r2, r2, #16
 8009caa:	fb09 1102 	mla	r1, r9, r2, r1
 8009cae:	4567      	cmp	r7, ip
 8009cb0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009cb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cb8:	d8e6      	bhi.n	8009c88 <__multiply+0x108>
 8009cba:	9a01      	ldr	r2, [sp, #4]
 8009cbc:	50a9      	str	r1, [r5, r2]
 8009cbe:	3504      	adds	r5, #4
 8009cc0:	e79b      	b.n	8009bfa <__multiply+0x7a>
 8009cc2:	3e01      	subs	r6, #1
 8009cc4:	e79d      	b.n	8009c02 <__multiply+0x82>
 8009cc6:	bf00      	nop
 8009cc8:	0800b728 	.word	0x0800b728
 8009ccc:	0800b7b4 	.word	0x0800b7b4

08009cd0 <__pow5mult>:
 8009cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd4:	4615      	mov	r5, r2
 8009cd6:	f012 0203 	ands.w	r2, r2, #3
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460f      	mov	r7, r1
 8009cde:	d007      	beq.n	8009cf0 <__pow5mult+0x20>
 8009ce0:	4c25      	ldr	r4, [pc, #148]	; (8009d78 <__pow5mult+0xa8>)
 8009ce2:	3a01      	subs	r2, #1
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cea:	f7ff fe55 	bl	8009998 <__multadd>
 8009cee:	4607      	mov	r7, r0
 8009cf0:	10ad      	asrs	r5, r5, #2
 8009cf2:	d03d      	beq.n	8009d70 <__pow5mult+0xa0>
 8009cf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cf6:	b97c      	cbnz	r4, 8009d18 <__pow5mult+0x48>
 8009cf8:	2010      	movs	r0, #16
 8009cfa:	f7ff fdb5 	bl	8009868 <malloc>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6270      	str	r0, [r6, #36]	; 0x24
 8009d02:	b928      	cbnz	r0, 8009d10 <__pow5mult+0x40>
 8009d04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d08:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <__pow5mult+0xac>)
 8009d0a:	481d      	ldr	r0, [pc, #116]	; (8009d80 <__pow5mult+0xb0>)
 8009d0c:	f000 fd1e 	bl	800a74c <__assert_func>
 8009d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d14:	6004      	str	r4, [r0, #0]
 8009d16:	60c4      	str	r4, [r0, #12]
 8009d18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d20:	b94c      	cbnz	r4, 8009d36 <__pow5mult+0x66>
 8009d22:	f240 2171 	movw	r1, #625	; 0x271
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7ff ff14 	bl	8009b54 <__i2b>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d34:	6003      	str	r3, [r0, #0]
 8009d36:	f04f 0900 	mov.w	r9, #0
 8009d3a:	07eb      	lsls	r3, r5, #31
 8009d3c:	d50a      	bpl.n	8009d54 <__pow5mult+0x84>
 8009d3e:	4639      	mov	r1, r7
 8009d40:	4622      	mov	r2, r4
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff ff1c 	bl	8009b80 <__multiply>
 8009d48:	4680      	mov	r8, r0
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff fe01 	bl	8009954 <_Bfree>
 8009d52:	4647      	mov	r7, r8
 8009d54:	106d      	asrs	r5, r5, #1
 8009d56:	d00b      	beq.n	8009d70 <__pow5mult+0xa0>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	b938      	cbnz	r0, 8009d6c <__pow5mult+0x9c>
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7ff ff0d 	bl	8009b80 <__multiply>
 8009d66:	6020      	str	r0, [r4, #0]
 8009d68:	f8c0 9000 	str.w	r9, [r0]
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	e7e4      	b.n	8009d3a <__pow5mult+0x6a>
 8009d70:	4638      	mov	r0, r7
 8009d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d76:	bf00      	nop
 8009d78:	0800b900 	.word	0x0800b900
 8009d7c:	0800b6b6 	.word	0x0800b6b6
 8009d80:	0800b7b4 	.word	0x0800b7b4

08009d84 <__lshift>:
 8009d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d88:	460c      	mov	r4, r1
 8009d8a:	4607      	mov	r7, r0
 8009d8c:	4691      	mov	r9, r2
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	6849      	ldr	r1, [r1, #4]
 8009d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d96:	68a3      	ldr	r3, [r4, #8]
 8009d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d9c:	f108 0601 	add.w	r6, r8, #1
 8009da0:	42b3      	cmp	r3, r6
 8009da2:	db0b      	blt.n	8009dbc <__lshift+0x38>
 8009da4:	4638      	mov	r0, r7
 8009da6:	f7ff fd95 	bl	80098d4 <_Balloc>
 8009daa:	4605      	mov	r5, r0
 8009dac:	b948      	cbnz	r0, 8009dc2 <__lshift+0x3e>
 8009dae:	4602      	mov	r2, r0
 8009db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009db4:	4b29      	ldr	r3, [pc, #164]	; (8009e5c <__lshift+0xd8>)
 8009db6:	482a      	ldr	r0, [pc, #168]	; (8009e60 <__lshift+0xdc>)
 8009db8:	f000 fcc8 	bl	800a74c <__assert_func>
 8009dbc:	3101      	adds	r1, #1
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	e7ee      	b.n	8009da0 <__lshift+0x1c>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f100 0114 	add.w	r1, r0, #20
 8009dc8:	f100 0210 	add.w	r2, r0, #16
 8009dcc:	4618      	mov	r0, r3
 8009dce:	4553      	cmp	r3, sl
 8009dd0:	db37      	blt.n	8009e42 <__lshift+0xbe>
 8009dd2:	6920      	ldr	r0, [r4, #16]
 8009dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dd8:	f104 0314 	add.w	r3, r4, #20
 8009ddc:	f019 091f 	ands.w	r9, r9, #31
 8009de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009de8:	d02f      	beq.n	8009e4a <__lshift+0xc6>
 8009dea:	468a      	mov	sl, r1
 8009dec:	f04f 0c00 	mov.w	ip, #0
 8009df0:	f1c9 0e20 	rsb	lr, r9, #32
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	fa02 f209 	lsl.w	r2, r2, r9
 8009dfa:	ea42 020c 	orr.w	r2, r2, ip
 8009dfe:	f84a 2b04 	str.w	r2, [sl], #4
 8009e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e06:	4298      	cmp	r0, r3
 8009e08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e0c:	d8f2      	bhi.n	8009df4 <__lshift+0x70>
 8009e0e:	1b03      	subs	r3, r0, r4
 8009e10:	3b15      	subs	r3, #21
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	3304      	adds	r3, #4
 8009e18:	f104 0215 	add.w	r2, r4, #21
 8009e1c:	4290      	cmp	r0, r2
 8009e1e:	bf38      	it	cc
 8009e20:	2304      	movcc	r3, #4
 8009e22:	f841 c003 	str.w	ip, [r1, r3]
 8009e26:	f1bc 0f00 	cmp.w	ip, #0
 8009e2a:	d001      	beq.n	8009e30 <__lshift+0xac>
 8009e2c:	f108 0602 	add.w	r6, r8, #2
 8009e30:	3e01      	subs	r6, #1
 8009e32:	4638      	mov	r0, r7
 8009e34:	4621      	mov	r1, r4
 8009e36:	612e      	str	r6, [r5, #16]
 8009e38:	f7ff fd8c 	bl	8009954 <_Bfree>
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e46:	3301      	adds	r3, #1
 8009e48:	e7c1      	b.n	8009dce <__lshift+0x4a>
 8009e4a:	3904      	subs	r1, #4
 8009e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e50:	4298      	cmp	r0, r3
 8009e52:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e56:	d8f9      	bhi.n	8009e4c <__lshift+0xc8>
 8009e58:	e7ea      	b.n	8009e30 <__lshift+0xac>
 8009e5a:	bf00      	nop
 8009e5c:	0800b728 	.word	0x0800b728
 8009e60:	0800b7b4 	.word	0x0800b7b4

08009e64 <__mcmp>:
 8009e64:	4603      	mov	r3, r0
 8009e66:	690a      	ldr	r2, [r1, #16]
 8009e68:	6900      	ldr	r0, [r0, #16]
 8009e6a:	b530      	push	{r4, r5, lr}
 8009e6c:	1a80      	subs	r0, r0, r2
 8009e6e:	d10d      	bne.n	8009e8c <__mcmp+0x28>
 8009e70:	3314      	adds	r3, #20
 8009e72:	3114      	adds	r1, #20
 8009e74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e84:	4295      	cmp	r5, r2
 8009e86:	d002      	beq.n	8009e8e <__mcmp+0x2a>
 8009e88:	d304      	bcc.n	8009e94 <__mcmp+0x30>
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	bd30      	pop	{r4, r5, pc}
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	d3f4      	bcc.n	8009e7c <__mcmp+0x18>
 8009e92:	e7fb      	b.n	8009e8c <__mcmp+0x28>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	e7f8      	b.n	8009e8c <__mcmp+0x28>
	...

08009e9c <__mdiff>:
 8009e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	f7ff ffdb 	bl	8009e64 <__mcmp>
 8009eae:	1e06      	subs	r6, r0, #0
 8009eb0:	d111      	bne.n	8009ed6 <__mdiff+0x3a>
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	f7ff fd0d 	bl	80098d4 <_Balloc>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	b928      	cbnz	r0, 8009eca <__mdiff+0x2e>
 8009ebe:	f240 2132 	movw	r1, #562	; 0x232
 8009ec2:	4b3a      	ldr	r3, [pc, #232]	; (8009fac <__mdiff+0x110>)
 8009ec4:	483a      	ldr	r0, [pc, #232]	; (8009fb0 <__mdiff+0x114>)
 8009ec6:	f000 fc41 	bl	800a74c <__assert_func>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed6:	bfa4      	itt	ge
 8009ed8:	4623      	movge	r3, r4
 8009eda:	462c      	movge	r4, r5
 8009edc:	4638      	mov	r0, r7
 8009ede:	6861      	ldr	r1, [r4, #4]
 8009ee0:	bfa6      	itte	ge
 8009ee2:	461d      	movge	r5, r3
 8009ee4:	2600      	movge	r6, #0
 8009ee6:	2601      	movlt	r6, #1
 8009ee8:	f7ff fcf4 	bl	80098d4 <_Balloc>
 8009eec:	4602      	mov	r2, r0
 8009eee:	b918      	cbnz	r0, 8009ef8 <__mdiff+0x5c>
 8009ef0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ef4:	4b2d      	ldr	r3, [pc, #180]	; (8009fac <__mdiff+0x110>)
 8009ef6:	e7e5      	b.n	8009ec4 <__mdiff+0x28>
 8009ef8:	f102 0814 	add.w	r8, r2, #20
 8009efc:	46c2      	mov	sl, r8
 8009efe:	f04f 0c00 	mov.w	ip, #0
 8009f02:	6927      	ldr	r7, [r4, #16]
 8009f04:	60c6      	str	r6, [r0, #12]
 8009f06:	692e      	ldr	r6, [r5, #16]
 8009f08:	f104 0014 	add.w	r0, r4, #20
 8009f0c:	f105 0914 	add.w	r9, r5, #20
 8009f10:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009f14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f18:	3410      	adds	r4, #16
 8009f1a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009f1e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f22:	fa1f f18b 	uxth.w	r1, fp
 8009f26:	448c      	add	ip, r1
 8009f28:	b299      	uxth	r1, r3
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	ebac 0101 	sub.w	r1, ip, r1
 8009f30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f34:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f38:	b289      	uxth	r1, r1
 8009f3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009f3e:	454e      	cmp	r6, r9
 8009f40:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f44:	f84a 3b04 	str.w	r3, [sl], #4
 8009f48:	d8e7      	bhi.n	8009f1a <__mdiff+0x7e>
 8009f4a:	1b73      	subs	r3, r6, r5
 8009f4c:	3b15      	subs	r3, #21
 8009f4e:	f023 0303 	bic.w	r3, r3, #3
 8009f52:	3515      	adds	r5, #21
 8009f54:	3304      	adds	r3, #4
 8009f56:	42ae      	cmp	r6, r5
 8009f58:	bf38      	it	cc
 8009f5a:	2304      	movcc	r3, #4
 8009f5c:	4418      	add	r0, r3
 8009f5e:	4443      	add	r3, r8
 8009f60:	461e      	mov	r6, r3
 8009f62:	4605      	mov	r5, r0
 8009f64:	4575      	cmp	r5, lr
 8009f66:	d30e      	bcc.n	8009f86 <__mdiff+0xea>
 8009f68:	f10e 0103 	add.w	r1, lr, #3
 8009f6c:	1a09      	subs	r1, r1, r0
 8009f6e:	f021 0103 	bic.w	r1, r1, #3
 8009f72:	3803      	subs	r0, #3
 8009f74:	4586      	cmp	lr, r0
 8009f76:	bf38      	it	cc
 8009f78:	2100      	movcc	r1, #0
 8009f7a:	4419      	add	r1, r3
 8009f7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009f80:	b18b      	cbz	r3, 8009fa6 <__mdiff+0x10a>
 8009f82:	6117      	str	r7, [r2, #16]
 8009f84:	e7a4      	b.n	8009ed0 <__mdiff+0x34>
 8009f86:	f855 8b04 	ldr.w	r8, [r5], #4
 8009f8a:	fa1f f188 	uxth.w	r1, r8
 8009f8e:	4461      	add	r1, ip
 8009f90:	140c      	asrs	r4, r1, #16
 8009f92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f96:	b289      	uxth	r1, r1
 8009f98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f9c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009fa0:	f846 1b04 	str.w	r1, [r6], #4
 8009fa4:	e7de      	b.n	8009f64 <__mdiff+0xc8>
 8009fa6:	3f01      	subs	r7, #1
 8009fa8:	e7e8      	b.n	8009f7c <__mdiff+0xe0>
 8009faa:	bf00      	nop
 8009fac:	0800b728 	.word	0x0800b728
 8009fb0:	0800b7b4 	.word	0x0800b7b4

08009fb4 <__ulp>:
 8009fb4:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <__ulp+0x48>)
 8009fb6:	400b      	ands	r3, r1
 8009fb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dd02      	ble.n	8009fc6 <__ulp+0x12>
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4770      	bx	lr
 8009fc6:	425b      	negs	r3, r3
 8009fc8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009fcc:	f04f 0000 	mov.w	r0, #0
 8009fd0:	f04f 0100 	mov.w	r1, #0
 8009fd4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fd8:	da04      	bge.n	8009fe4 <__ulp+0x30>
 8009fda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009fde:	fa43 f102 	asr.w	r1, r3, r2
 8009fe2:	4770      	bx	lr
 8009fe4:	f1a2 0314 	sub.w	r3, r2, #20
 8009fe8:	2b1e      	cmp	r3, #30
 8009fea:	bfd6      	itet	le
 8009fec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009ff0:	2301      	movgt	r3, #1
 8009ff2:	fa22 f303 	lsrle.w	r3, r2, r3
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	7ff00000 	.word	0x7ff00000

0800a000 <__b2d>:
 800a000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a004:	6907      	ldr	r7, [r0, #16]
 800a006:	f100 0914 	add.w	r9, r0, #20
 800a00a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a00e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a012:	f1a7 0804 	sub.w	r8, r7, #4
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff fd4e 	bl	8009ab8 <__hi0bits>
 800a01c:	f1c0 0320 	rsb	r3, r0, #32
 800a020:	280a      	cmp	r0, #10
 800a022:	600b      	str	r3, [r1, #0]
 800a024:	491f      	ldr	r1, [pc, #124]	; (800a0a4 <__b2d+0xa4>)
 800a026:	dc17      	bgt.n	800a058 <__b2d+0x58>
 800a028:	45c1      	cmp	r9, r8
 800a02a:	bf28      	it	cs
 800a02c:	2200      	movcs	r2, #0
 800a02e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a032:	fa26 f30c 	lsr.w	r3, r6, ip
 800a036:	bf38      	it	cc
 800a038:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a03c:	ea43 0501 	orr.w	r5, r3, r1
 800a040:	f100 0315 	add.w	r3, r0, #21
 800a044:	fa06 f303 	lsl.w	r3, r6, r3
 800a048:	fa22 f20c 	lsr.w	r2, r2, ip
 800a04c:	ea43 0402 	orr.w	r4, r3, r2
 800a050:	4620      	mov	r0, r4
 800a052:	4629      	mov	r1, r5
 800a054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a058:	45c1      	cmp	r9, r8
 800a05a:	bf2e      	itee	cs
 800a05c:	2200      	movcs	r2, #0
 800a05e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a062:	f1a7 0808 	subcc.w	r8, r7, #8
 800a066:	f1b0 030b 	subs.w	r3, r0, #11
 800a06a:	d016      	beq.n	800a09a <__b2d+0x9a>
 800a06c:	f1c3 0720 	rsb	r7, r3, #32
 800a070:	fa22 f107 	lsr.w	r1, r2, r7
 800a074:	45c8      	cmp	r8, r9
 800a076:	fa06 f603 	lsl.w	r6, r6, r3
 800a07a:	ea46 0601 	orr.w	r6, r6, r1
 800a07e:	bf94      	ite	ls
 800a080:	2100      	movls	r1, #0
 800a082:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a086:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a08a:	fa02 f003 	lsl.w	r0, r2, r3
 800a08e:	40f9      	lsrs	r1, r7
 800a090:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a094:	ea40 0401 	orr.w	r4, r0, r1
 800a098:	e7da      	b.n	800a050 <__b2d+0x50>
 800a09a:	4614      	mov	r4, r2
 800a09c:	ea46 0501 	orr.w	r5, r6, r1
 800a0a0:	e7d6      	b.n	800a050 <__b2d+0x50>
 800a0a2:	bf00      	nop
 800a0a4:	3ff00000 	.word	0x3ff00000

0800a0a8 <__d2b>:
 800a0a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a0b2:	4690      	mov	r8, r2
 800a0b4:	461d      	mov	r5, r3
 800a0b6:	f7ff fc0d 	bl	80098d4 <_Balloc>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	b930      	cbnz	r0, 800a0cc <__d2b+0x24>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	f240 310a 	movw	r1, #778	; 0x30a
 800a0c4:	4b24      	ldr	r3, [pc, #144]	; (800a158 <__d2b+0xb0>)
 800a0c6:	4825      	ldr	r0, [pc, #148]	; (800a15c <__d2b+0xb4>)
 800a0c8:	f000 fb40 	bl	800a74c <__assert_func>
 800a0cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a0d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a0d4:	bb2d      	cbnz	r5, 800a122 <__d2b+0x7a>
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	f1b8 0300 	subs.w	r3, r8, #0
 800a0dc:	d026      	beq.n	800a12c <__d2b+0x84>
 800a0de:	4668      	mov	r0, sp
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	f7ff fd09 	bl	8009af8 <__lo0bits>
 800a0e6:	9900      	ldr	r1, [sp, #0]
 800a0e8:	b1f0      	cbz	r0, 800a128 <__d2b+0x80>
 800a0ea:	9a01      	ldr	r2, [sp, #4]
 800a0ec:	f1c0 0320 	rsb	r3, r0, #32
 800a0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f4:	430b      	orrs	r3, r1
 800a0f6:	40c2      	lsrs	r2, r0
 800a0f8:	6163      	str	r3, [r4, #20]
 800a0fa:	9201      	str	r2, [sp, #4]
 800a0fc:	9b01      	ldr	r3, [sp, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf14      	ite	ne
 800a102:	2102      	movne	r1, #2
 800a104:	2101      	moveq	r1, #1
 800a106:	61a3      	str	r3, [r4, #24]
 800a108:	6121      	str	r1, [r4, #16]
 800a10a:	b1c5      	cbz	r5, 800a13e <__d2b+0x96>
 800a10c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a110:	4405      	add	r5, r0
 800a112:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a116:	603d      	str	r5, [r7, #0]
 800a118:	6030      	str	r0, [r6, #0]
 800a11a:	4620      	mov	r0, r4
 800a11c:	b002      	add	sp, #8
 800a11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a126:	e7d6      	b.n	800a0d6 <__d2b+0x2e>
 800a128:	6161      	str	r1, [r4, #20]
 800a12a:	e7e7      	b.n	800a0fc <__d2b+0x54>
 800a12c:	a801      	add	r0, sp, #4
 800a12e:	f7ff fce3 	bl	8009af8 <__lo0bits>
 800a132:	2101      	movs	r1, #1
 800a134:	9b01      	ldr	r3, [sp, #4]
 800a136:	6121      	str	r1, [r4, #16]
 800a138:	6163      	str	r3, [r4, #20]
 800a13a:	3020      	adds	r0, #32
 800a13c:	e7e5      	b.n	800a10a <__d2b+0x62>
 800a13e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a142:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a146:	6038      	str	r0, [r7, #0]
 800a148:	6918      	ldr	r0, [r3, #16]
 800a14a:	f7ff fcb5 	bl	8009ab8 <__hi0bits>
 800a14e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a152:	6031      	str	r1, [r6, #0]
 800a154:	e7e1      	b.n	800a11a <__d2b+0x72>
 800a156:	bf00      	nop
 800a158:	0800b728 	.word	0x0800b728
 800a15c:	0800b7b4 	.word	0x0800b7b4

0800a160 <__ratio>:
 800a160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	4688      	mov	r8, r1
 800a166:	4669      	mov	r1, sp
 800a168:	4681      	mov	r9, r0
 800a16a:	f7ff ff49 	bl	800a000 <__b2d>
 800a16e:	460f      	mov	r7, r1
 800a170:	4604      	mov	r4, r0
 800a172:	460d      	mov	r5, r1
 800a174:	4640      	mov	r0, r8
 800a176:	a901      	add	r1, sp, #4
 800a178:	f7ff ff42 	bl	800a000 <__b2d>
 800a17c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a180:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a184:	468b      	mov	fp, r1
 800a186:	eba3 0c02 	sub.w	ip, r3, r2
 800a18a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a194:	2b00      	cmp	r3, #0
 800a196:	bfd5      	itete	le
 800a198:	460a      	movle	r2, r1
 800a19a:	462a      	movgt	r2, r5
 800a19c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1a4:	bfd8      	it	le
 800a1a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f7f6 fb31 	bl	8000818 <__aeabi_ddiv>
 800a1b6:	b003      	add	sp, #12
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1bc <__copybits>:
 800a1bc:	3901      	subs	r1, #1
 800a1be:	b570      	push	{r4, r5, r6, lr}
 800a1c0:	1149      	asrs	r1, r1, #5
 800a1c2:	6914      	ldr	r4, [r2, #16]
 800a1c4:	3101      	adds	r1, #1
 800a1c6:	f102 0314 	add.w	r3, r2, #20
 800a1ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1d2:	1f05      	subs	r5, r0, #4
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d30c      	bcc.n	800a1f2 <__copybits+0x36>
 800a1d8:	1aa3      	subs	r3, r4, r2
 800a1da:	3b11      	subs	r3, #17
 800a1dc:	f023 0303 	bic.w	r3, r3, #3
 800a1e0:	3211      	adds	r2, #17
 800a1e2:	42a2      	cmp	r2, r4
 800a1e4:	bf88      	it	hi
 800a1e6:	2300      	movhi	r3, #0
 800a1e8:	4418      	add	r0, r3
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	4288      	cmp	r0, r1
 800a1ee:	d305      	bcc.n	800a1fc <__copybits+0x40>
 800a1f0:	bd70      	pop	{r4, r5, r6, pc}
 800a1f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1fa:	e7eb      	b.n	800a1d4 <__copybits+0x18>
 800a1fc:	f840 3b04 	str.w	r3, [r0], #4
 800a200:	e7f4      	b.n	800a1ec <__copybits+0x30>

0800a202 <__any_on>:
 800a202:	f100 0214 	add.w	r2, r0, #20
 800a206:	6900      	ldr	r0, [r0, #16]
 800a208:	114b      	asrs	r3, r1, #5
 800a20a:	4298      	cmp	r0, r3
 800a20c:	b510      	push	{r4, lr}
 800a20e:	db11      	blt.n	800a234 <__any_on+0x32>
 800a210:	dd0a      	ble.n	800a228 <__any_on+0x26>
 800a212:	f011 011f 	ands.w	r1, r1, #31
 800a216:	d007      	beq.n	800a228 <__any_on+0x26>
 800a218:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a21c:	fa24 f001 	lsr.w	r0, r4, r1
 800a220:	fa00 f101 	lsl.w	r1, r0, r1
 800a224:	428c      	cmp	r4, r1
 800a226:	d10b      	bne.n	800a240 <__any_on+0x3e>
 800a228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d803      	bhi.n	800a238 <__any_on+0x36>
 800a230:	2000      	movs	r0, #0
 800a232:	bd10      	pop	{r4, pc}
 800a234:	4603      	mov	r3, r0
 800a236:	e7f7      	b.n	800a228 <__any_on+0x26>
 800a238:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a23c:	2900      	cmp	r1, #0
 800a23e:	d0f5      	beq.n	800a22c <__any_on+0x2a>
 800a240:	2001      	movs	r0, #1
 800a242:	e7f6      	b.n	800a232 <__any_on+0x30>

0800a244 <_calloc_r>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	fba1 5402 	umull	r5, r4, r1, r2
 800a24a:	b934      	cbnz	r4, 800a25a <_calloc_r+0x16>
 800a24c:	4629      	mov	r1, r5
 800a24e:	f000 f875 	bl	800a33c <_malloc_r>
 800a252:	4606      	mov	r6, r0
 800a254:	b928      	cbnz	r0, 800a262 <_calloc_r+0x1e>
 800a256:	4630      	mov	r0, r6
 800a258:	bd70      	pop	{r4, r5, r6, pc}
 800a25a:	220c      	movs	r2, #12
 800a25c:	2600      	movs	r6, #0
 800a25e:	6002      	str	r2, [r0, #0]
 800a260:	e7f9      	b.n	800a256 <_calloc_r+0x12>
 800a262:	462a      	mov	r2, r5
 800a264:	4621      	mov	r1, r4
 800a266:	f7fc fbf1 	bl	8006a4c <memset>
 800a26a:	e7f4      	b.n	800a256 <_calloc_r+0x12>

0800a26c <_free_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4605      	mov	r5, r0
 800a270:	2900      	cmp	r1, #0
 800a272:	d040      	beq.n	800a2f6 <_free_r+0x8a>
 800a274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a278:	1f0c      	subs	r4, r1, #4
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bfb8      	it	lt
 800a27e:	18e4      	addlt	r4, r4, r3
 800a280:	f000 faae 	bl	800a7e0 <__malloc_lock>
 800a284:	4a1c      	ldr	r2, [pc, #112]	; (800a2f8 <_free_r+0x8c>)
 800a286:	6813      	ldr	r3, [r2, #0]
 800a288:	b933      	cbnz	r3, 800a298 <_free_r+0x2c>
 800a28a:	6063      	str	r3, [r4, #4]
 800a28c:	6014      	str	r4, [r2, #0]
 800a28e:	4628      	mov	r0, r5
 800a290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a294:	f000 baaa 	b.w	800a7ec <__malloc_unlock>
 800a298:	42a3      	cmp	r3, r4
 800a29a:	d908      	bls.n	800a2ae <_free_r+0x42>
 800a29c:	6820      	ldr	r0, [r4, #0]
 800a29e:	1821      	adds	r1, r4, r0
 800a2a0:	428b      	cmp	r3, r1
 800a2a2:	bf01      	itttt	eq
 800a2a4:	6819      	ldreq	r1, [r3, #0]
 800a2a6:	685b      	ldreq	r3, [r3, #4]
 800a2a8:	1809      	addeq	r1, r1, r0
 800a2aa:	6021      	streq	r1, [r4, #0]
 800a2ac:	e7ed      	b.n	800a28a <_free_r+0x1e>
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	b10b      	cbz	r3, 800a2b8 <_free_r+0x4c>
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	d9fa      	bls.n	800a2ae <_free_r+0x42>
 800a2b8:	6811      	ldr	r1, [r2, #0]
 800a2ba:	1850      	adds	r0, r2, r1
 800a2bc:	42a0      	cmp	r0, r4
 800a2be:	d10b      	bne.n	800a2d8 <_free_r+0x6c>
 800a2c0:	6820      	ldr	r0, [r4, #0]
 800a2c2:	4401      	add	r1, r0
 800a2c4:	1850      	adds	r0, r2, r1
 800a2c6:	4283      	cmp	r3, r0
 800a2c8:	6011      	str	r1, [r2, #0]
 800a2ca:	d1e0      	bne.n	800a28e <_free_r+0x22>
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	4401      	add	r1, r0
 800a2d2:	6011      	str	r1, [r2, #0]
 800a2d4:	6053      	str	r3, [r2, #4]
 800a2d6:	e7da      	b.n	800a28e <_free_r+0x22>
 800a2d8:	d902      	bls.n	800a2e0 <_free_r+0x74>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	e7d6      	b.n	800a28e <_free_r+0x22>
 800a2e0:	6820      	ldr	r0, [r4, #0]
 800a2e2:	1821      	adds	r1, r4, r0
 800a2e4:	428b      	cmp	r3, r1
 800a2e6:	bf01      	itttt	eq
 800a2e8:	6819      	ldreq	r1, [r3, #0]
 800a2ea:	685b      	ldreq	r3, [r3, #4]
 800a2ec:	1809      	addeq	r1, r1, r0
 800a2ee:	6021      	streq	r1, [r4, #0]
 800a2f0:	6063      	str	r3, [r4, #4]
 800a2f2:	6054      	str	r4, [r2, #4]
 800a2f4:	e7cb      	b.n	800a28e <_free_r+0x22>
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	20000404 	.word	0x20000404

0800a2fc <sbrk_aligned>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	4e0e      	ldr	r6, [pc, #56]	; (800a338 <sbrk_aligned+0x3c>)
 800a300:	460c      	mov	r4, r1
 800a302:	6831      	ldr	r1, [r6, #0]
 800a304:	4605      	mov	r5, r0
 800a306:	b911      	cbnz	r1, 800a30e <sbrk_aligned+0x12>
 800a308:	f000 f9ee 	bl	800a6e8 <_sbrk_r>
 800a30c:	6030      	str	r0, [r6, #0]
 800a30e:	4621      	mov	r1, r4
 800a310:	4628      	mov	r0, r5
 800a312:	f000 f9e9 	bl	800a6e8 <_sbrk_r>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	d00a      	beq.n	800a330 <sbrk_aligned+0x34>
 800a31a:	1cc4      	adds	r4, r0, #3
 800a31c:	f024 0403 	bic.w	r4, r4, #3
 800a320:	42a0      	cmp	r0, r4
 800a322:	d007      	beq.n	800a334 <sbrk_aligned+0x38>
 800a324:	1a21      	subs	r1, r4, r0
 800a326:	4628      	mov	r0, r5
 800a328:	f000 f9de 	bl	800a6e8 <_sbrk_r>
 800a32c:	3001      	adds	r0, #1
 800a32e:	d101      	bne.n	800a334 <sbrk_aligned+0x38>
 800a330:	f04f 34ff 	mov.w	r4, #4294967295
 800a334:	4620      	mov	r0, r4
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	20000408 	.word	0x20000408

0800a33c <_malloc_r>:
 800a33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a340:	1ccd      	adds	r5, r1, #3
 800a342:	f025 0503 	bic.w	r5, r5, #3
 800a346:	3508      	adds	r5, #8
 800a348:	2d0c      	cmp	r5, #12
 800a34a:	bf38      	it	cc
 800a34c:	250c      	movcc	r5, #12
 800a34e:	2d00      	cmp	r5, #0
 800a350:	4607      	mov	r7, r0
 800a352:	db01      	blt.n	800a358 <_malloc_r+0x1c>
 800a354:	42a9      	cmp	r1, r5
 800a356:	d905      	bls.n	800a364 <_malloc_r+0x28>
 800a358:	230c      	movs	r3, #12
 800a35a:	2600      	movs	r6, #0
 800a35c:	603b      	str	r3, [r7, #0]
 800a35e:	4630      	mov	r0, r6
 800a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a364:	4e2e      	ldr	r6, [pc, #184]	; (800a420 <_malloc_r+0xe4>)
 800a366:	f000 fa3b 	bl	800a7e0 <__malloc_lock>
 800a36a:	6833      	ldr	r3, [r6, #0]
 800a36c:	461c      	mov	r4, r3
 800a36e:	bb34      	cbnz	r4, 800a3be <_malloc_r+0x82>
 800a370:	4629      	mov	r1, r5
 800a372:	4638      	mov	r0, r7
 800a374:	f7ff ffc2 	bl	800a2fc <sbrk_aligned>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	4604      	mov	r4, r0
 800a37c:	d14d      	bne.n	800a41a <_malloc_r+0xde>
 800a37e:	6834      	ldr	r4, [r6, #0]
 800a380:	4626      	mov	r6, r4
 800a382:	2e00      	cmp	r6, #0
 800a384:	d140      	bne.n	800a408 <_malloc_r+0xcc>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	4631      	mov	r1, r6
 800a38a:	4638      	mov	r0, r7
 800a38c:	eb04 0803 	add.w	r8, r4, r3
 800a390:	f000 f9aa 	bl	800a6e8 <_sbrk_r>
 800a394:	4580      	cmp	r8, r0
 800a396:	d13a      	bne.n	800a40e <_malloc_r+0xd2>
 800a398:	6821      	ldr	r1, [r4, #0]
 800a39a:	3503      	adds	r5, #3
 800a39c:	1a6d      	subs	r5, r5, r1
 800a39e:	f025 0503 	bic.w	r5, r5, #3
 800a3a2:	3508      	adds	r5, #8
 800a3a4:	2d0c      	cmp	r5, #12
 800a3a6:	bf38      	it	cc
 800a3a8:	250c      	movcc	r5, #12
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7ff ffa5 	bl	800a2fc <sbrk_aligned>
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	d02b      	beq.n	800a40e <_malloc_r+0xd2>
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	442b      	add	r3, r5
 800a3ba:	6023      	str	r3, [r4, #0]
 800a3bc:	e00e      	b.n	800a3dc <_malloc_r+0xa0>
 800a3be:	6822      	ldr	r2, [r4, #0]
 800a3c0:	1b52      	subs	r2, r2, r5
 800a3c2:	d41e      	bmi.n	800a402 <_malloc_r+0xc6>
 800a3c4:	2a0b      	cmp	r2, #11
 800a3c6:	d916      	bls.n	800a3f6 <_malloc_r+0xba>
 800a3c8:	1961      	adds	r1, r4, r5
 800a3ca:	42a3      	cmp	r3, r4
 800a3cc:	6025      	str	r5, [r4, #0]
 800a3ce:	bf18      	it	ne
 800a3d0:	6059      	strne	r1, [r3, #4]
 800a3d2:	6863      	ldr	r3, [r4, #4]
 800a3d4:	bf08      	it	eq
 800a3d6:	6031      	streq	r1, [r6, #0]
 800a3d8:	5162      	str	r2, [r4, r5]
 800a3da:	604b      	str	r3, [r1, #4]
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f104 060b 	add.w	r6, r4, #11
 800a3e2:	f000 fa03 	bl	800a7ec <__malloc_unlock>
 800a3e6:	f026 0607 	bic.w	r6, r6, #7
 800a3ea:	1d23      	adds	r3, r4, #4
 800a3ec:	1af2      	subs	r2, r6, r3
 800a3ee:	d0b6      	beq.n	800a35e <_malloc_r+0x22>
 800a3f0:	1b9b      	subs	r3, r3, r6
 800a3f2:	50a3      	str	r3, [r4, r2]
 800a3f4:	e7b3      	b.n	800a35e <_malloc_r+0x22>
 800a3f6:	6862      	ldr	r2, [r4, #4]
 800a3f8:	42a3      	cmp	r3, r4
 800a3fa:	bf0c      	ite	eq
 800a3fc:	6032      	streq	r2, [r6, #0]
 800a3fe:	605a      	strne	r2, [r3, #4]
 800a400:	e7ec      	b.n	800a3dc <_malloc_r+0xa0>
 800a402:	4623      	mov	r3, r4
 800a404:	6864      	ldr	r4, [r4, #4]
 800a406:	e7b2      	b.n	800a36e <_malloc_r+0x32>
 800a408:	4634      	mov	r4, r6
 800a40a:	6876      	ldr	r6, [r6, #4]
 800a40c:	e7b9      	b.n	800a382 <_malloc_r+0x46>
 800a40e:	230c      	movs	r3, #12
 800a410:	4638      	mov	r0, r7
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	f000 f9ea 	bl	800a7ec <__malloc_unlock>
 800a418:	e7a1      	b.n	800a35e <_malloc_r+0x22>
 800a41a:	6025      	str	r5, [r4, #0]
 800a41c:	e7de      	b.n	800a3dc <_malloc_r+0xa0>
 800a41e:	bf00      	nop
 800a420:	20000404 	.word	0x20000404

0800a424 <__ssputs_r>:
 800a424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a428:	688e      	ldr	r6, [r1, #8]
 800a42a:	4682      	mov	sl, r0
 800a42c:	429e      	cmp	r6, r3
 800a42e:	460c      	mov	r4, r1
 800a430:	4690      	mov	r8, r2
 800a432:	461f      	mov	r7, r3
 800a434:	d838      	bhi.n	800a4a8 <__ssputs_r+0x84>
 800a436:	898a      	ldrh	r2, [r1, #12]
 800a438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a43c:	d032      	beq.n	800a4a4 <__ssputs_r+0x80>
 800a43e:	6825      	ldr	r5, [r4, #0]
 800a440:	6909      	ldr	r1, [r1, #16]
 800a442:	3301      	adds	r3, #1
 800a444:	eba5 0901 	sub.w	r9, r5, r1
 800a448:	6965      	ldr	r5, [r4, #20]
 800a44a:	444b      	add	r3, r9
 800a44c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a454:	106d      	asrs	r5, r5, #1
 800a456:	429d      	cmp	r5, r3
 800a458:	bf38      	it	cc
 800a45a:	461d      	movcc	r5, r3
 800a45c:	0553      	lsls	r3, r2, #21
 800a45e:	d531      	bpl.n	800a4c4 <__ssputs_r+0xa0>
 800a460:	4629      	mov	r1, r5
 800a462:	f7ff ff6b 	bl	800a33c <_malloc_r>
 800a466:	4606      	mov	r6, r0
 800a468:	b950      	cbnz	r0, 800a480 <__ssputs_r+0x5c>
 800a46a:	230c      	movs	r3, #12
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	f8ca 3000 	str.w	r3, [sl]
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a480:	464a      	mov	r2, r9
 800a482:	6921      	ldr	r1, [r4, #16]
 800a484:	f7ff fa18 	bl	80098b8 <memcpy>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a492:	81a3      	strh	r3, [r4, #12]
 800a494:	6126      	str	r6, [r4, #16]
 800a496:	444e      	add	r6, r9
 800a498:	6026      	str	r6, [r4, #0]
 800a49a:	463e      	mov	r6, r7
 800a49c:	6165      	str	r5, [r4, #20]
 800a49e:	eba5 0509 	sub.w	r5, r5, r9
 800a4a2:	60a5      	str	r5, [r4, #8]
 800a4a4:	42be      	cmp	r6, r7
 800a4a6:	d900      	bls.n	800a4aa <__ssputs_r+0x86>
 800a4a8:	463e      	mov	r6, r7
 800a4aa:	4632      	mov	r2, r6
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	6820      	ldr	r0, [r4, #0]
 800a4b0:	f000 f97c 	bl	800a7ac <memmove>
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	1b9b      	subs	r3, r3, r6
 800a4ba:	60a3      	str	r3, [r4, #8]
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	4433      	add	r3, r6
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	e7db      	b.n	800a47c <__ssputs_r+0x58>
 800a4c4:	462a      	mov	r2, r5
 800a4c6:	f000 f997 	bl	800a7f8 <_realloc_r>
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d1e1      	bne.n	800a494 <__ssputs_r+0x70>
 800a4d0:	4650      	mov	r0, sl
 800a4d2:	6921      	ldr	r1, [r4, #16]
 800a4d4:	f7ff feca 	bl	800a26c <_free_r>
 800a4d8:	e7c7      	b.n	800a46a <__ssputs_r+0x46>
	...

0800a4dc <_svfiprintf_r>:
 800a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	4698      	mov	r8, r3
 800a4e2:	898b      	ldrh	r3, [r1, #12]
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	061b      	lsls	r3, r3, #24
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	b09d      	sub	sp, #116	; 0x74
 800a4ee:	d50e      	bpl.n	800a50e <_svfiprintf_r+0x32>
 800a4f0:	690b      	ldr	r3, [r1, #16]
 800a4f2:	b963      	cbnz	r3, 800a50e <_svfiprintf_r+0x32>
 800a4f4:	2140      	movs	r1, #64	; 0x40
 800a4f6:	f7ff ff21 	bl	800a33c <_malloc_r>
 800a4fa:	6028      	str	r0, [r5, #0]
 800a4fc:	6128      	str	r0, [r5, #16]
 800a4fe:	b920      	cbnz	r0, 800a50a <_svfiprintf_r+0x2e>
 800a500:	230c      	movs	r3, #12
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	e0d1      	b.n	800a6ae <_svfiprintf_r+0x1d2>
 800a50a:	2340      	movs	r3, #64	; 0x40
 800a50c:	616b      	str	r3, [r5, #20]
 800a50e:	2300      	movs	r3, #0
 800a510:	9309      	str	r3, [sp, #36]	; 0x24
 800a512:	2320      	movs	r3, #32
 800a514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a518:	2330      	movs	r3, #48	; 0x30
 800a51a:	f04f 0901 	mov.w	r9, #1
 800a51e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a6c8 <_svfiprintf_r+0x1ec>
 800a526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a52a:	4623      	mov	r3, r4
 800a52c:	469a      	mov	sl, r3
 800a52e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a532:	b10a      	cbz	r2, 800a538 <_svfiprintf_r+0x5c>
 800a534:	2a25      	cmp	r2, #37	; 0x25
 800a536:	d1f9      	bne.n	800a52c <_svfiprintf_r+0x50>
 800a538:	ebba 0b04 	subs.w	fp, sl, r4
 800a53c:	d00b      	beq.n	800a556 <_svfiprintf_r+0x7a>
 800a53e:	465b      	mov	r3, fp
 800a540:	4622      	mov	r2, r4
 800a542:	4629      	mov	r1, r5
 800a544:	4638      	mov	r0, r7
 800a546:	f7ff ff6d 	bl	800a424 <__ssputs_r>
 800a54a:	3001      	adds	r0, #1
 800a54c:	f000 80aa 	beq.w	800a6a4 <_svfiprintf_r+0x1c8>
 800a550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a552:	445a      	add	r2, fp
 800a554:	9209      	str	r2, [sp, #36]	; 0x24
 800a556:	f89a 3000 	ldrb.w	r3, [sl]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f000 80a2 	beq.w	800a6a4 <_svfiprintf_r+0x1c8>
 800a560:	2300      	movs	r3, #0
 800a562:	f04f 32ff 	mov.w	r2, #4294967295
 800a566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a56a:	f10a 0a01 	add.w	sl, sl, #1
 800a56e:	9304      	str	r3, [sp, #16]
 800a570:	9307      	str	r3, [sp, #28]
 800a572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a576:	931a      	str	r3, [sp, #104]	; 0x68
 800a578:	4654      	mov	r4, sl
 800a57a:	2205      	movs	r2, #5
 800a57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a580:	4851      	ldr	r0, [pc, #324]	; (800a6c8 <_svfiprintf_r+0x1ec>)
 800a582:	f7ff f98b 	bl	800989c <memchr>
 800a586:	9a04      	ldr	r2, [sp, #16]
 800a588:	b9d8      	cbnz	r0, 800a5c2 <_svfiprintf_r+0xe6>
 800a58a:	06d0      	lsls	r0, r2, #27
 800a58c:	bf44      	itt	mi
 800a58e:	2320      	movmi	r3, #32
 800a590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a594:	0711      	lsls	r1, r2, #28
 800a596:	bf44      	itt	mi
 800a598:	232b      	movmi	r3, #43	; 0x2b
 800a59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a59e:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a4:	d015      	beq.n	800a5d2 <_svfiprintf_r+0xf6>
 800a5a6:	4654      	mov	r4, sl
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f04f 0c0a 	mov.w	ip, #10
 800a5ae:	9a07      	ldr	r2, [sp, #28]
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5b6:	3b30      	subs	r3, #48	; 0x30
 800a5b8:	2b09      	cmp	r3, #9
 800a5ba:	d94e      	bls.n	800a65a <_svfiprintf_r+0x17e>
 800a5bc:	b1b0      	cbz	r0, 800a5ec <_svfiprintf_r+0x110>
 800a5be:	9207      	str	r2, [sp, #28]
 800a5c0:	e014      	b.n	800a5ec <_svfiprintf_r+0x110>
 800a5c2:	eba0 0308 	sub.w	r3, r0, r8
 800a5c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	46a2      	mov	sl, r4
 800a5ce:	9304      	str	r3, [sp, #16]
 800a5d0:	e7d2      	b.n	800a578 <_svfiprintf_r+0x9c>
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	1d19      	adds	r1, r3, #4
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	9103      	str	r1, [sp, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	bfbb      	ittet	lt
 800a5de:	425b      	neglt	r3, r3
 800a5e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a5e4:	9307      	strge	r3, [sp, #28]
 800a5e6:	9307      	strlt	r3, [sp, #28]
 800a5e8:	bfb8      	it	lt
 800a5ea:	9204      	strlt	r2, [sp, #16]
 800a5ec:	7823      	ldrb	r3, [r4, #0]
 800a5ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a5f0:	d10c      	bne.n	800a60c <_svfiprintf_r+0x130>
 800a5f2:	7863      	ldrb	r3, [r4, #1]
 800a5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a5f6:	d135      	bne.n	800a664 <_svfiprintf_r+0x188>
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	3402      	adds	r4, #2
 800a5fc:	1d1a      	adds	r2, r3, #4
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	9203      	str	r2, [sp, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	bfb8      	it	lt
 800a606:	f04f 33ff 	movlt.w	r3, #4294967295
 800a60a:	9305      	str	r3, [sp, #20]
 800a60c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a6cc <_svfiprintf_r+0x1f0>
 800a610:	2203      	movs	r2, #3
 800a612:	4650      	mov	r0, sl
 800a614:	7821      	ldrb	r1, [r4, #0]
 800a616:	f7ff f941 	bl	800989c <memchr>
 800a61a:	b140      	cbz	r0, 800a62e <_svfiprintf_r+0x152>
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	eba0 000a 	sub.w	r0, r0, sl
 800a622:	fa03 f000 	lsl.w	r0, r3, r0
 800a626:	9b04      	ldr	r3, [sp, #16]
 800a628:	3401      	adds	r4, #1
 800a62a:	4303      	orrs	r3, r0
 800a62c:	9304      	str	r3, [sp, #16]
 800a62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a632:	2206      	movs	r2, #6
 800a634:	4826      	ldr	r0, [pc, #152]	; (800a6d0 <_svfiprintf_r+0x1f4>)
 800a636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a63a:	f7ff f92f 	bl	800989c <memchr>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d038      	beq.n	800a6b4 <_svfiprintf_r+0x1d8>
 800a642:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <_svfiprintf_r+0x1f8>)
 800a644:	bb1b      	cbnz	r3, 800a68e <_svfiprintf_r+0x1b2>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	3307      	adds	r3, #7
 800a64a:	f023 0307 	bic.w	r3, r3, #7
 800a64e:	3308      	adds	r3, #8
 800a650:	9303      	str	r3, [sp, #12]
 800a652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a654:	4433      	add	r3, r6
 800a656:	9309      	str	r3, [sp, #36]	; 0x24
 800a658:	e767      	b.n	800a52a <_svfiprintf_r+0x4e>
 800a65a:	460c      	mov	r4, r1
 800a65c:	2001      	movs	r0, #1
 800a65e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a662:	e7a5      	b.n	800a5b0 <_svfiprintf_r+0xd4>
 800a664:	2300      	movs	r3, #0
 800a666:	f04f 0c0a 	mov.w	ip, #10
 800a66a:	4619      	mov	r1, r3
 800a66c:	3401      	adds	r4, #1
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	4620      	mov	r0, r4
 800a672:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a676:	3a30      	subs	r2, #48	; 0x30
 800a678:	2a09      	cmp	r2, #9
 800a67a:	d903      	bls.n	800a684 <_svfiprintf_r+0x1a8>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0c5      	beq.n	800a60c <_svfiprintf_r+0x130>
 800a680:	9105      	str	r1, [sp, #20]
 800a682:	e7c3      	b.n	800a60c <_svfiprintf_r+0x130>
 800a684:	4604      	mov	r4, r0
 800a686:	2301      	movs	r3, #1
 800a688:	fb0c 2101 	mla	r1, ip, r1, r2
 800a68c:	e7f0      	b.n	800a670 <_svfiprintf_r+0x194>
 800a68e:	ab03      	add	r3, sp, #12
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	462a      	mov	r2, r5
 800a694:	4638      	mov	r0, r7
 800a696:	4b10      	ldr	r3, [pc, #64]	; (800a6d8 <_svfiprintf_r+0x1fc>)
 800a698:	a904      	add	r1, sp, #16
 800a69a:	f7fc fa7d 	bl	8006b98 <_printf_float>
 800a69e:	1c42      	adds	r2, r0, #1
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	d1d6      	bne.n	800a652 <_svfiprintf_r+0x176>
 800a6a4:	89ab      	ldrh	r3, [r5, #12]
 800a6a6:	065b      	lsls	r3, r3, #25
 800a6a8:	f53f af2c 	bmi.w	800a504 <_svfiprintf_r+0x28>
 800a6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ae:	b01d      	add	sp, #116	; 0x74
 800a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b4:	ab03      	add	r3, sp, #12
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <_svfiprintf_r+0x1fc>)
 800a6be:	a904      	add	r1, sp, #16
 800a6c0:	f7fc fd06 	bl	80070d0 <_printf_i>
 800a6c4:	e7eb      	b.n	800a69e <_svfiprintf_r+0x1c2>
 800a6c6:	bf00      	nop
 800a6c8:	0800b90c 	.word	0x0800b90c
 800a6cc:	0800b912 	.word	0x0800b912
 800a6d0:	0800b916 	.word	0x0800b916
 800a6d4:	08006b99 	.word	0x08006b99
 800a6d8:	0800a425 	.word	0x0800a425

0800a6dc <nan>:
 800a6dc:	2000      	movs	r0, #0
 800a6de:	4901      	ldr	r1, [pc, #4]	; (800a6e4 <nan+0x8>)
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	7ff80000 	.word	0x7ff80000

0800a6e8 <_sbrk_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4d05      	ldr	r5, [pc, #20]	; (800a704 <_sbrk_r+0x1c>)
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f7 fcec 	bl	80020d0 <_sbrk>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_sbrk_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_sbrk_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	2000040c 	.word	0x2000040c

0800a708 <strncmp>:
 800a708:	4603      	mov	r3, r0
 800a70a:	b510      	push	{r4, lr}
 800a70c:	b172      	cbz	r2, 800a72c <strncmp+0x24>
 800a70e:	3901      	subs	r1, #1
 800a710:	1884      	adds	r4, r0, r2
 800a712:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a716:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a71a:	4290      	cmp	r0, r2
 800a71c:	d101      	bne.n	800a722 <strncmp+0x1a>
 800a71e:	42a3      	cmp	r3, r4
 800a720:	d101      	bne.n	800a726 <strncmp+0x1e>
 800a722:	1a80      	subs	r0, r0, r2
 800a724:	bd10      	pop	{r4, pc}
 800a726:	2800      	cmp	r0, #0
 800a728:	d1f3      	bne.n	800a712 <strncmp+0xa>
 800a72a:	e7fa      	b.n	800a722 <strncmp+0x1a>
 800a72c:	4610      	mov	r0, r2
 800a72e:	e7f9      	b.n	800a724 <strncmp+0x1c>

0800a730 <__ascii_wctomb>:
 800a730:	4603      	mov	r3, r0
 800a732:	4608      	mov	r0, r1
 800a734:	b141      	cbz	r1, 800a748 <__ascii_wctomb+0x18>
 800a736:	2aff      	cmp	r2, #255	; 0xff
 800a738:	d904      	bls.n	800a744 <__ascii_wctomb+0x14>
 800a73a:	228a      	movs	r2, #138	; 0x8a
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	4770      	bx	lr
 800a744:	2001      	movs	r0, #1
 800a746:	700a      	strb	r2, [r1, #0]
 800a748:	4770      	bx	lr
	...

0800a74c <__assert_func>:
 800a74c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a74e:	4614      	mov	r4, r2
 800a750:	461a      	mov	r2, r3
 800a752:	4b09      	ldr	r3, [pc, #36]	; (800a778 <__assert_func+0x2c>)
 800a754:	4605      	mov	r5, r0
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68d8      	ldr	r0, [r3, #12]
 800a75a:	b14c      	cbz	r4, 800a770 <__assert_func+0x24>
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <__assert_func+0x30>)
 800a75e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a762:	9100      	str	r1, [sp, #0]
 800a764:	462b      	mov	r3, r5
 800a766:	4906      	ldr	r1, [pc, #24]	; (800a780 <__assert_func+0x34>)
 800a768:	f000 f80e 	bl	800a788 <fiprintf>
 800a76c:	f000 fa8a 	bl	800ac84 <abort>
 800a770:	4b04      	ldr	r3, [pc, #16]	; (800a784 <__assert_func+0x38>)
 800a772:	461c      	mov	r4, r3
 800a774:	e7f3      	b.n	800a75e <__assert_func+0x12>
 800a776:	bf00      	nop
 800a778:	2000000c 	.word	0x2000000c
 800a77c:	0800b91d 	.word	0x0800b91d
 800a780:	0800b92a 	.word	0x0800b92a
 800a784:	0800b958 	.word	0x0800b958

0800a788 <fiprintf>:
 800a788:	b40e      	push	{r1, r2, r3}
 800a78a:	b503      	push	{r0, r1, lr}
 800a78c:	4601      	mov	r1, r0
 800a78e:	ab03      	add	r3, sp, #12
 800a790:	4805      	ldr	r0, [pc, #20]	; (800a7a8 <fiprintf+0x20>)
 800a792:	f853 2b04 	ldr.w	r2, [r3], #4
 800a796:	6800      	ldr	r0, [r0, #0]
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	f000 f883 	bl	800a8a4 <_vfiprintf_r>
 800a79e:	b002      	add	sp, #8
 800a7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7a4:	b003      	add	sp, #12
 800a7a6:	4770      	bx	lr
 800a7a8:	2000000c 	.word	0x2000000c

0800a7ac <memmove>:
 800a7ac:	4288      	cmp	r0, r1
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	eb01 0402 	add.w	r4, r1, r2
 800a7b4:	d902      	bls.n	800a7bc <memmove+0x10>
 800a7b6:	4284      	cmp	r4, r0
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	d807      	bhi.n	800a7cc <memmove+0x20>
 800a7bc:	1e43      	subs	r3, r0, #1
 800a7be:	42a1      	cmp	r1, r4
 800a7c0:	d008      	beq.n	800a7d4 <memmove+0x28>
 800a7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7ca:	e7f8      	b.n	800a7be <memmove+0x12>
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	4402      	add	r2, r0
 800a7d0:	428a      	cmp	r2, r1
 800a7d2:	d100      	bne.n	800a7d6 <memmove+0x2a>
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7de:	e7f7      	b.n	800a7d0 <memmove+0x24>

0800a7e0 <__malloc_lock>:
 800a7e0:	4801      	ldr	r0, [pc, #4]	; (800a7e8 <__malloc_lock+0x8>)
 800a7e2:	f000 bc0b 	b.w	800affc <__retarget_lock_acquire_recursive>
 800a7e6:	bf00      	nop
 800a7e8:	20000410 	.word	0x20000410

0800a7ec <__malloc_unlock>:
 800a7ec:	4801      	ldr	r0, [pc, #4]	; (800a7f4 <__malloc_unlock+0x8>)
 800a7ee:	f000 bc06 	b.w	800affe <__retarget_lock_release_recursive>
 800a7f2:	bf00      	nop
 800a7f4:	20000410 	.word	0x20000410

0800a7f8 <_realloc_r>:
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4614      	mov	r4, r2
 800a800:	460e      	mov	r6, r1
 800a802:	b921      	cbnz	r1, 800a80e <_realloc_r+0x16>
 800a804:	4611      	mov	r1, r2
 800a806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	f7ff bd97 	b.w	800a33c <_malloc_r>
 800a80e:	b92a      	cbnz	r2, 800a81c <_realloc_r+0x24>
 800a810:	f7ff fd2c 	bl	800a26c <_free_r>
 800a814:	4625      	mov	r5, r4
 800a816:	4628      	mov	r0, r5
 800a818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81c:	f000 fc56 	bl	800b0cc <_malloc_usable_size_r>
 800a820:	4284      	cmp	r4, r0
 800a822:	4607      	mov	r7, r0
 800a824:	d802      	bhi.n	800a82c <_realloc_r+0x34>
 800a826:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a82a:	d812      	bhi.n	800a852 <_realloc_r+0x5a>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4640      	mov	r0, r8
 800a830:	f7ff fd84 	bl	800a33c <_malloc_r>
 800a834:	4605      	mov	r5, r0
 800a836:	2800      	cmp	r0, #0
 800a838:	d0ed      	beq.n	800a816 <_realloc_r+0x1e>
 800a83a:	42bc      	cmp	r4, r7
 800a83c:	4622      	mov	r2, r4
 800a83e:	4631      	mov	r1, r6
 800a840:	bf28      	it	cs
 800a842:	463a      	movcs	r2, r7
 800a844:	f7ff f838 	bl	80098b8 <memcpy>
 800a848:	4631      	mov	r1, r6
 800a84a:	4640      	mov	r0, r8
 800a84c:	f7ff fd0e 	bl	800a26c <_free_r>
 800a850:	e7e1      	b.n	800a816 <_realloc_r+0x1e>
 800a852:	4635      	mov	r5, r6
 800a854:	e7df      	b.n	800a816 <_realloc_r+0x1e>

0800a856 <__sfputc_r>:
 800a856:	6893      	ldr	r3, [r2, #8]
 800a858:	b410      	push	{r4}
 800a85a:	3b01      	subs	r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	6093      	str	r3, [r2, #8]
 800a860:	da07      	bge.n	800a872 <__sfputc_r+0x1c>
 800a862:	6994      	ldr	r4, [r2, #24]
 800a864:	42a3      	cmp	r3, r4
 800a866:	db01      	blt.n	800a86c <__sfputc_r+0x16>
 800a868:	290a      	cmp	r1, #10
 800a86a:	d102      	bne.n	800a872 <__sfputc_r+0x1c>
 800a86c:	bc10      	pop	{r4}
 800a86e:	f000 b949 	b.w	800ab04 <__swbuf_r>
 800a872:	6813      	ldr	r3, [r2, #0]
 800a874:	1c58      	adds	r0, r3, #1
 800a876:	6010      	str	r0, [r2, #0]
 800a878:	7019      	strb	r1, [r3, #0]
 800a87a:	4608      	mov	r0, r1
 800a87c:	bc10      	pop	{r4}
 800a87e:	4770      	bx	lr

0800a880 <__sfputs_r>:
 800a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a882:	4606      	mov	r6, r0
 800a884:	460f      	mov	r7, r1
 800a886:	4614      	mov	r4, r2
 800a888:	18d5      	adds	r5, r2, r3
 800a88a:	42ac      	cmp	r4, r5
 800a88c:	d101      	bne.n	800a892 <__sfputs_r+0x12>
 800a88e:	2000      	movs	r0, #0
 800a890:	e007      	b.n	800a8a2 <__sfputs_r+0x22>
 800a892:	463a      	mov	r2, r7
 800a894:	4630      	mov	r0, r6
 800a896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89a:	f7ff ffdc 	bl	800a856 <__sfputc_r>
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	d1f3      	bne.n	800a88a <__sfputs_r+0xa>
 800a8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8a4 <_vfiprintf_r>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	4614      	mov	r4, r2
 800a8ac:	4698      	mov	r8, r3
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	b09d      	sub	sp, #116	; 0x74
 800a8b2:	b118      	cbz	r0, 800a8bc <_vfiprintf_r+0x18>
 800a8b4:	6983      	ldr	r3, [r0, #24]
 800a8b6:	b90b      	cbnz	r3, 800a8bc <_vfiprintf_r+0x18>
 800a8b8:	f000 fb02 	bl	800aec0 <__sinit>
 800a8bc:	4b89      	ldr	r3, [pc, #548]	; (800aae4 <_vfiprintf_r+0x240>)
 800a8be:	429d      	cmp	r5, r3
 800a8c0:	d11b      	bne.n	800a8fa <_vfiprintf_r+0x56>
 800a8c2:	6875      	ldr	r5, [r6, #4]
 800a8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c6:	07d9      	lsls	r1, r3, #31
 800a8c8:	d405      	bmi.n	800a8d6 <_vfiprintf_r+0x32>
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	059a      	lsls	r2, r3, #22
 800a8ce:	d402      	bmi.n	800a8d6 <_vfiprintf_r+0x32>
 800a8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d2:	f000 fb93 	bl	800affc <__retarget_lock_acquire_recursive>
 800a8d6:	89ab      	ldrh	r3, [r5, #12]
 800a8d8:	071b      	lsls	r3, r3, #28
 800a8da:	d501      	bpl.n	800a8e0 <_vfiprintf_r+0x3c>
 800a8dc:	692b      	ldr	r3, [r5, #16]
 800a8de:	b9eb      	cbnz	r3, 800a91c <_vfiprintf_r+0x78>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f000 f960 	bl	800aba8 <__swsetup_r>
 800a8e8:	b1c0      	cbz	r0, 800a91c <_vfiprintf_r+0x78>
 800a8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ec:	07dc      	lsls	r4, r3, #31
 800a8ee:	d50e      	bpl.n	800a90e <_vfiprintf_r+0x6a>
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	b01d      	add	sp, #116	; 0x74
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	4b7b      	ldr	r3, [pc, #492]	; (800aae8 <_vfiprintf_r+0x244>)
 800a8fc:	429d      	cmp	r5, r3
 800a8fe:	d101      	bne.n	800a904 <_vfiprintf_r+0x60>
 800a900:	68b5      	ldr	r5, [r6, #8]
 800a902:	e7df      	b.n	800a8c4 <_vfiprintf_r+0x20>
 800a904:	4b79      	ldr	r3, [pc, #484]	; (800aaec <_vfiprintf_r+0x248>)
 800a906:	429d      	cmp	r5, r3
 800a908:	bf08      	it	eq
 800a90a:	68f5      	ldreq	r5, [r6, #12]
 800a90c:	e7da      	b.n	800a8c4 <_vfiprintf_r+0x20>
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	0598      	lsls	r0, r3, #22
 800a912:	d4ed      	bmi.n	800a8f0 <_vfiprintf_r+0x4c>
 800a914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a916:	f000 fb72 	bl	800affe <__retarget_lock_release_recursive>
 800a91a:	e7e9      	b.n	800a8f0 <_vfiprintf_r+0x4c>
 800a91c:	2300      	movs	r3, #0
 800a91e:	9309      	str	r3, [sp, #36]	; 0x24
 800a920:	2320      	movs	r3, #32
 800a922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a926:	2330      	movs	r3, #48	; 0x30
 800a928:	f04f 0901 	mov.w	r9, #1
 800a92c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a930:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aaf0 <_vfiprintf_r+0x24c>
 800a934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a938:	4623      	mov	r3, r4
 800a93a:	469a      	mov	sl, r3
 800a93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a940:	b10a      	cbz	r2, 800a946 <_vfiprintf_r+0xa2>
 800a942:	2a25      	cmp	r2, #37	; 0x25
 800a944:	d1f9      	bne.n	800a93a <_vfiprintf_r+0x96>
 800a946:	ebba 0b04 	subs.w	fp, sl, r4
 800a94a:	d00b      	beq.n	800a964 <_vfiprintf_r+0xc0>
 800a94c:	465b      	mov	r3, fp
 800a94e:	4622      	mov	r2, r4
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f7ff ff94 	bl	800a880 <__sfputs_r>
 800a958:	3001      	adds	r0, #1
 800a95a:	f000 80aa 	beq.w	800aab2 <_vfiprintf_r+0x20e>
 800a95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a960:	445a      	add	r2, fp
 800a962:	9209      	str	r2, [sp, #36]	; 0x24
 800a964:	f89a 3000 	ldrb.w	r3, [sl]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80a2 	beq.w	800aab2 <_vfiprintf_r+0x20e>
 800a96e:	2300      	movs	r3, #0
 800a970:	f04f 32ff 	mov.w	r2, #4294967295
 800a974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a978:	f10a 0a01 	add.w	sl, sl, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a984:	931a      	str	r3, [sp, #104]	; 0x68
 800a986:	4654      	mov	r4, sl
 800a988:	2205      	movs	r2, #5
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	4858      	ldr	r0, [pc, #352]	; (800aaf0 <_vfiprintf_r+0x24c>)
 800a990:	f7fe ff84 	bl	800989c <memchr>
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	b9d8      	cbnz	r0, 800a9d0 <_vfiprintf_r+0x12c>
 800a998:	06d1      	lsls	r1, r2, #27
 800a99a:	bf44      	itt	mi
 800a99c:	2320      	movmi	r3, #32
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a2:	0713      	lsls	r3, r2, #28
 800a9a4:	bf44      	itt	mi
 800a9a6:	232b      	movmi	r3, #43	; 0x2b
 800a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b2:	d015      	beq.n	800a9e0 <_vfiprintf_r+0x13c>
 800a9b4:	4654      	mov	r4, sl
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	f04f 0c0a 	mov.w	ip, #10
 800a9bc:	9a07      	ldr	r2, [sp, #28]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c4:	3b30      	subs	r3, #48	; 0x30
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d94e      	bls.n	800aa68 <_vfiprintf_r+0x1c4>
 800a9ca:	b1b0      	cbz	r0, 800a9fa <_vfiprintf_r+0x156>
 800a9cc:	9207      	str	r2, [sp, #28]
 800a9ce:	e014      	b.n	800a9fa <_vfiprintf_r+0x156>
 800a9d0:	eba0 0308 	sub.w	r3, r0, r8
 800a9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	46a2      	mov	sl, r4
 800a9dc:	9304      	str	r3, [sp, #16]
 800a9de:	e7d2      	b.n	800a986 <_vfiprintf_r+0xe2>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	1d19      	adds	r1, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	9103      	str	r1, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfbb      	ittet	lt
 800a9ec:	425b      	neglt	r3, r3
 800a9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f2:	9307      	strge	r3, [sp, #28]
 800a9f4:	9307      	strlt	r3, [sp, #28]
 800a9f6:	bfb8      	it	lt
 800a9f8:	9204      	strlt	r2, [sp, #16]
 800a9fa:	7823      	ldrb	r3, [r4, #0]
 800a9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fe:	d10c      	bne.n	800aa1a <_vfiprintf_r+0x176>
 800aa00:	7863      	ldrb	r3, [r4, #1]
 800aa02:	2b2a      	cmp	r3, #42	; 0x2a
 800aa04:	d135      	bne.n	800aa72 <_vfiprintf_r+0x1ce>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	3402      	adds	r4, #2
 800aa0a:	1d1a      	adds	r2, r3, #4
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	9203      	str	r2, [sp, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bfb8      	it	lt
 800aa14:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aaf4 <_vfiprintf_r+0x250>
 800aa1e:	2203      	movs	r2, #3
 800aa20:	4650      	mov	r0, sl
 800aa22:	7821      	ldrb	r1, [r4, #0]
 800aa24:	f7fe ff3a 	bl	800989c <memchr>
 800aa28:	b140      	cbz	r0, 800aa3c <_vfiprintf_r+0x198>
 800aa2a:	2340      	movs	r3, #64	; 0x40
 800aa2c:	eba0 000a 	sub.w	r0, r0, sl
 800aa30:	fa03 f000 	lsl.w	r0, r3, r0
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	3401      	adds	r4, #1
 800aa38:	4303      	orrs	r3, r0
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa40:	2206      	movs	r2, #6
 800aa42:	482d      	ldr	r0, [pc, #180]	; (800aaf8 <_vfiprintf_r+0x254>)
 800aa44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa48:	f7fe ff28 	bl	800989c <memchr>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d03f      	beq.n	800aad0 <_vfiprintf_r+0x22c>
 800aa50:	4b2a      	ldr	r3, [pc, #168]	; (800aafc <_vfiprintf_r+0x258>)
 800aa52:	bb1b      	cbnz	r3, 800aa9c <_vfiprintf_r+0x1f8>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	3307      	adds	r3, #7
 800aa58:	f023 0307 	bic.w	r3, r3, #7
 800aa5c:	3308      	adds	r3, #8
 800aa5e:	9303      	str	r3, [sp, #12]
 800aa60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa62:	443b      	add	r3, r7
 800aa64:	9309      	str	r3, [sp, #36]	; 0x24
 800aa66:	e767      	b.n	800a938 <_vfiprintf_r+0x94>
 800aa68:	460c      	mov	r4, r1
 800aa6a:	2001      	movs	r0, #1
 800aa6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa70:	e7a5      	b.n	800a9be <_vfiprintf_r+0x11a>
 800aa72:	2300      	movs	r3, #0
 800aa74:	f04f 0c0a 	mov.w	ip, #10
 800aa78:	4619      	mov	r1, r3
 800aa7a:	3401      	adds	r4, #1
 800aa7c:	9305      	str	r3, [sp, #20]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa84:	3a30      	subs	r2, #48	; 0x30
 800aa86:	2a09      	cmp	r2, #9
 800aa88:	d903      	bls.n	800aa92 <_vfiprintf_r+0x1ee>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0c5      	beq.n	800aa1a <_vfiprintf_r+0x176>
 800aa8e:	9105      	str	r1, [sp, #20]
 800aa90:	e7c3      	b.n	800aa1a <_vfiprintf_r+0x176>
 800aa92:	4604      	mov	r4, r0
 800aa94:	2301      	movs	r3, #1
 800aa96:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9a:	e7f0      	b.n	800aa7e <_vfiprintf_r+0x1da>
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <_vfiprintf_r+0x25c>)
 800aaa6:	a904      	add	r1, sp, #16
 800aaa8:	f7fc f876 	bl	8006b98 <_printf_float>
 800aaac:	4607      	mov	r7, r0
 800aaae:	1c78      	adds	r0, r7, #1
 800aab0:	d1d6      	bne.n	800aa60 <_vfiprintf_r+0x1bc>
 800aab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab4:	07d9      	lsls	r1, r3, #31
 800aab6:	d405      	bmi.n	800aac4 <_vfiprintf_r+0x220>
 800aab8:	89ab      	ldrh	r3, [r5, #12]
 800aaba:	059a      	lsls	r2, r3, #22
 800aabc:	d402      	bmi.n	800aac4 <_vfiprintf_r+0x220>
 800aabe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac0:	f000 fa9d 	bl	800affe <__retarget_lock_release_recursive>
 800aac4:	89ab      	ldrh	r3, [r5, #12]
 800aac6:	065b      	lsls	r3, r3, #25
 800aac8:	f53f af12 	bmi.w	800a8f0 <_vfiprintf_r+0x4c>
 800aacc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aace:	e711      	b.n	800a8f4 <_vfiprintf_r+0x50>
 800aad0:	ab03      	add	r3, sp, #12
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	462a      	mov	r2, r5
 800aad6:	4630      	mov	r0, r6
 800aad8:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <_vfiprintf_r+0x25c>)
 800aada:	a904      	add	r1, sp, #16
 800aadc:	f7fc faf8 	bl	80070d0 <_printf_i>
 800aae0:	e7e4      	b.n	800aaac <_vfiprintf_r+0x208>
 800aae2:	bf00      	nop
 800aae4:	0800b97c 	.word	0x0800b97c
 800aae8:	0800b99c 	.word	0x0800b99c
 800aaec:	0800b95c 	.word	0x0800b95c
 800aaf0:	0800b90c 	.word	0x0800b90c
 800aaf4:	0800b912 	.word	0x0800b912
 800aaf8:	0800b916 	.word	0x0800b916
 800aafc:	08006b99 	.word	0x08006b99
 800ab00:	0800a881 	.word	0x0800a881

0800ab04 <__swbuf_r>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	460e      	mov	r6, r1
 800ab08:	4614      	mov	r4, r2
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	b118      	cbz	r0, 800ab16 <__swbuf_r+0x12>
 800ab0e:	6983      	ldr	r3, [r0, #24]
 800ab10:	b90b      	cbnz	r3, 800ab16 <__swbuf_r+0x12>
 800ab12:	f000 f9d5 	bl	800aec0 <__sinit>
 800ab16:	4b21      	ldr	r3, [pc, #132]	; (800ab9c <__swbuf_r+0x98>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	d12b      	bne.n	800ab74 <__swbuf_r+0x70>
 800ab1c:	686c      	ldr	r4, [r5, #4]
 800ab1e:	69a3      	ldr	r3, [r4, #24]
 800ab20:	60a3      	str	r3, [r4, #8]
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	071a      	lsls	r2, r3, #28
 800ab26:	d52f      	bpl.n	800ab88 <__swbuf_r+0x84>
 800ab28:	6923      	ldr	r3, [r4, #16]
 800ab2a:	b36b      	cbz	r3, 800ab88 <__swbuf_r+0x84>
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	b2f6      	uxtb	r6, r6
 800ab32:	1ac0      	subs	r0, r0, r3
 800ab34:	6963      	ldr	r3, [r4, #20]
 800ab36:	4637      	mov	r7, r6
 800ab38:	4283      	cmp	r3, r0
 800ab3a:	dc04      	bgt.n	800ab46 <__swbuf_r+0x42>
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 f92a 	bl	800ad98 <_fflush_r>
 800ab44:	bb30      	cbnz	r0, 800ab94 <__swbuf_r+0x90>
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	3001      	adds	r0, #1
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	60a3      	str	r3, [r4, #8]
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	6022      	str	r2, [r4, #0]
 800ab54:	701e      	strb	r6, [r3, #0]
 800ab56:	6963      	ldr	r3, [r4, #20]
 800ab58:	4283      	cmp	r3, r0
 800ab5a:	d004      	beq.n	800ab66 <__swbuf_r+0x62>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	07db      	lsls	r3, r3, #31
 800ab60:	d506      	bpl.n	800ab70 <__swbuf_r+0x6c>
 800ab62:	2e0a      	cmp	r6, #10
 800ab64:	d104      	bne.n	800ab70 <__swbuf_r+0x6c>
 800ab66:	4621      	mov	r1, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f000 f915 	bl	800ad98 <_fflush_r>
 800ab6e:	b988      	cbnz	r0, 800ab94 <__swbuf_r+0x90>
 800ab70:	4638      	mov	r0, r7
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab74:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <__swbuf_r+0x9c>)
 800ab76:	429c      	cmp	r4, r3
 800ab78:	d101      	bne.n	800ab7e <__swbuf_r+0x7a>
 800ab7a:	68ac      	ldr	r4, [r5, #8]
 800ab7c:	e7cf      	b.n	800ab1e <__swbuf_r+0x1a>
 800ab7e:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <__swbuf_r+0xa0>)
 800ab80:	429c      	cmp	r4, r3
 800ab82:	bf08      	it	eq
 800ab84:	68ec      	ldreq	r4, [r5, #12]
 800ab86:	e7ca      	b.n	800ab1e <__swbuf_r+0x1a>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f000 f80c 	bl	800aba8 <__swsetup_r>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0cb      	beq.n	800ab2c <__swbuf_r+0x28>
 800ab94:	f04f 37ff 	mov.w	r7, #4294967295
 800ab98:	e7ea      	b.n	800ab70 <__swbuf_r+0x6c>
 800ab9a:	bf00      	nop
 800ab9c:	0800b97c 	.word	0x0800b97c
 800aba0:	0800b99c 	.word	0x0800b99c
 800aba4:	0800b95c 	.word	0x0800b95c

0800aba8 <__swsetup_r>:
 800aba8:	4b32      	ldr	r3, [pc, #200]	; (800ac74 <__swsetup_r+0xcc>)
 800abaa:	b570      	push	{r4, r5, r6, lr}
 800abac:	681d      	ldr	r5, [r3, #0]
 800abae:	4606      	mov	r6, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	b125      	cbz	r5, 800abbe <__swsetup_r+0x16>
 800abb4:	69ab      	ldr	r3, [r5, #24]
 800abb6:	b913      	cbnz	r3, 800abbe <__swsetup_r+0x16>
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 f981 	bl	800aec0 <__sinit>
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <__swsetup_r+0xd0>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	d10f      	bne.n	800abe4 <__swsetup_r+0x3c>
 800abc4:	686c      	ldr	r4, [r5, #4]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abcc:	0719      	lsls	r1, r3, #28
 800abce:	d42c      	bmi.n	800ac2a <__swsetup_r+0x82>
 800abd0:	06dd      	lsls	r5, r3, #27
 800abd2:	d411      	bmi.n	800abf8 <__swsetup_r+0x50>
 800abd4:	2309      	movs	r3, #9
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abdc:	f04f 30ff 	mov.w	r0, #4294967295
 800abe0:	81a3      	strh	r3, [r4, #12]
 800abe2:	e03e      	b.n	800ac62 <__swsetup_r+0xba>
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <__swsetup_r+0xd4>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d101      	bne.n	800abee <__swsetup_r+0x46>
 800abea:	68ac      	ldr	r4, [r5, #8]
 800abec:	e7eb      	b.n	800abc6 <__swsetup_r+0x1e>
 800abee:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__swsetup_r+0xd8>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	bf08      	it	eq
 800abf4:	68ec      	ldreq	r4, [r5, #12]
 800abf6:	e7e6      	b.n	800abc6 <__swsetup_r+0x1e>
 800abf8:	0758      	lsls	r0, r3, #29
 800abfa:	d512      	bpl.n	800ac22 <__swsetup_r+0x7a>
 800abfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfe:	b141      	cbz	r1, 800ac12 <__swsetup_r+0x6a>
 800ac00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac04:	4299      	cmp	r1, r3
 800ac06:	d002      	beq.n	800ac0e <__swsetup_r+0x66>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff fb2f 	bl	800a26c <_free_r>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6363      	str	r3, [r4, #52]	; 0x34
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	f043 0308 	orr.w	r3, r3, #8
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	b94b      	cbnz	r3, 800ac42 <__swsetup_r+0x9a>
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac38:	d003      	beq.n	800ac42 <__swsetup_r+0x9a>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 fa05 	bl	800b04c <__smakebuf_r>
 800ac42:	89a0      	ldrh	r0, [r4, #12]
 800ac44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac48:	f010 0301 	ands.w	r3, r0, #1
 800ac4c:	d00a      	beq.n	800ac64 <__swsetup_r+0xbc>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60a3      	str	r3, [r4, #8]
 800ac52:	6963      	ldr	r3, [r4, #20]
 800ac54:	425b      	negs	r3, r3
 800ac56:	61a3      	str	r3, [r4, #24]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	b943      	cbnz	r3, 800ac6e <__swsetup_r+0xc6>
 800ac5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac60:	d1ba      	bne.n	800abd8 <__swsetup_r+0x30>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0781      	lsls	r1, r0, #30
 800ac66:	bf58      	it	pl
 800ac68:	6963      	ldrpl	r3, [r4, #20]
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	e7f4      	b.n	800ac58 <__swsetup_r+0xb0>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7f7      	b.n	800ac62 <__swsetup_r+0xba>
 800ac72:	bf00      	nop
 800ac74:	2000000c 	.word	0x2000000c
 800ac78:	0800b97c 	.word	0x0800b97c
 800ac7c:	0800b99c 	.word	0x0800b99c
 800ac80:	0800b95c 	.word	0x0800b95c

0800ac84 <abort>:
 800ac84:	2006      	movs	r0, #6
 800ac86:	b508      	push	{r3, lr}
 800ac88:	f000 fa50 	bl	800b12c <raise>
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	f7f7 f9ac 	bl	8001fea <_exit>
	...

0800ac94 <__sflush_r>:
 800ac94:	898a      	ldrh	r2, [r1, #12]
 800ac96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac98:	4605      	mov	r5, r0
 800ac9a:	0710      	lsls	r0, r2, #28
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	d457      	bmi.n	800ad50 <__sflush_r+0xbc>
 800aca0:	684b      	ldr	r3, [r1, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dc04      	bgt.n	800acb0 <__sflush_r+0x1c>
 800aca6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	dc01      	bgt.n	800acb0 <__sflush_r+0x1c>
 800acac:	2000      	movs	r0, #0
 800acae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acb2:	2e00      	cmp	r6, #0
 800acb4:	d0fa      	beq.n	800acac <__sflush_r+0x18>
 800acb6:	2300      	movs	r3, #0
 800acb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acbc:	682f      	ldr	r7, [r5, #0]
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	d032      	beq.n	800ad28 <__sflush_r+0x94>
 800acc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	075a      	lsls	r2, r3, #29
 800acc8:	d505      	bpl.n	800acd6 <__sflush_r+0x42>
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	1ac0      	subs	r0, r0, r3
 800acce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acd0:	b10b      	cbz	r3, 800acd6 <__sflush_r+0x42>
 800acd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acd4:	1ac0      	subs	r0, r0, r3
 800acd6:	2300      	movs	r3, #0
 800acd8:	4602      	mov	r2, r0
 800acda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acdc:	4628      	mov	r0, r5
 800acde:	6a21      	ldr	r1, [r4, #32]
 800ace0:	47b0      	blx	r6
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	d106      	bne.n	800acf6 <__sflush_r+0x62>
 800ace8:	6829      	ldr	r1, [r5, #0]
 800acea:	291d      	cmp	r1, #29
 800acec:	d82c      	bhi.n	800ad48 <__sflush_r+0xb4>
 800acee:	4a29      	ldr	r2, [pc, #164]	; (800ad94 <__sflush_r+0x100>)
 800acf0:	40ca      	lsrs	r2, r1
 800acf2:	07d6      	lsls	r6, r2, #31
 800acf4:	d528      	bpl.n	800ad48 <__sflush_r+0xb4>
 800acf6:	2200      	movs	r2, #0
 800acf8:	6062      	str	r2, [r4, #4]
 800acfa:	6922      	ldr	r2, [r4, #16]
 800acfc:	04d9      	lsls	r1, r3, #19
 800acfe:	6022      	str	r2, [r4, #0]
 800ad00:	d504      	bpl.n	800ad0c <__sflush_r+0x78>
 800ad02:	1c42      	adds	r2, r0, #1
 800ad04:	d101      	bne.n	800ad0a <__sflush_r+0x76>
 800ad06:	682b      	ldr	r3, [r5, #0]
 800ad08:	b903      	cbnz	r3, 800ad0c <__sflush_r+0x78>
 800ad0a:	6560      	str	r0, [r4, #84]	; 0x54
 800ad0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad0e:	602f      	str	r7, [r5, #0]
 800ad10:	2900      	cmp	r1, #0
 800ad12:	d0cb      	beq.n	800acac <__sflush_r+0x18>
 800ad14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	d002      	beq.n	800ad22 <__sflush_r+0x8e>
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f7ff faa5 	bl	800a26c <_free_r>
 800ad22:	2000      	movs	r0, #0
 800ad24:	6360      	str	r0, [r4, #52]	; 0x34
 800ad26:	e7c2      	b.n	800acae <__sflush_r+0x1a>
 800ad28:	6a21      	ldr	r1, [r4, #32]
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b0      	blx	r6
 800ad30:	1c41      	adds	r1, r0, #1
 800ad32:	d1c7      	bne.n	800acc4 <__sflush_r+0x30>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0c4      	beq.n	800acc4 <__sflush_r+0x30>
 800ad3a:	2b1d      	cmp	r3, #29
 800ad3c:	d001      	beq.n	800ad42 <__sflush_r+0xae>
 800ad3e:	2b16      	cmp	r3, #22
 800ad40:	d101      	bne.n	800ad46 <__sflush_r+0xb2>
 800ad42:	602f      	str	r7, [r5, #0]
 800ad44:	e7b2      	b.n	800acac <__sflush_r+0x18>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	e7ae      	b.n	800acae <__sflush_r+0x1a>
 800ad50:	690f      	ldr	r7, [r1, #16]
 800ad52:	2f00      	cmp	r7, #0
 800ad54:	d0aa      	beq.n	800acac <__sflush_r+0x18>
 800ad56:	0793      	lsls	r3, r2, #30
 800ad58:	bf18      	it	ne
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	680e      	ldr	r6, [r1, #0]
 800ad5e:	bf08      	it	eq
 800ad60:	694b      	ldreq	r3, [r1, #20]
 800ad62:	1bf6      	subs	r6, r6, r7
 800ad64:	600f      	str	r7, [r1, #0]
 800ad66:	608b      	str	r3, [r1, #8]
 800ad68:	2e00      	cmp	r6, #0
 800ad6a:	dd9f      	ble.n	800acac <__sflush_r+0x18>
 800ad6c:	4633      	mov	r3, r6
 800ad6e:	463a      	mov	r2, r7
 800ad70:	4628      	mov	r0, r5
 800ad72:	6a21      	ldr	r1, [r4, #32]
 800ad74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ad78:	47e0      	blx	ip
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	dc06      	bgt.n	800ad8c <__sflush_r+0xf8>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	e790      	b.n	800acae <__sflush_r+0x1a>
 800ad8c:	4407      	add	r7, r0
 800ad8e:	1a36      	subs	r6, r6, r0
 800ad90:	e7ea      	b.n	800ad68 <__sflush_r+0xd4>
 800ad92:	bf00      	nop
 800ad94:	20400001 	.word	0x20400001

0800ad98 <_fflush_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	690b      	ldr	r3, [r1, #16]
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	b913      	cbnz	r3, 800ada8 <_fflush_r+0x10>
 800ada2:	2500      	movs	r5, #0
 800ada4:	4628      	mov	r0, r5
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	b118      	cbz	r0, 800adb2 <_fflush_r+0x1a>
 800adaa:	6983      	ldr	r3, [r0, #24]
 800adac:	b90b      	cbnz	r3, 800adb2 <_fflush_r+0x1a>
 800adae:	f000 f887 	bl	800aec0 <__sinit>
 800adb2:	4b14      	ldr	r3, [pc, #80]	; (800ae04 <_fflush_r+0x6c>)
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d11b      	bne.n	800adf0 <_fflush_r+0x58>
 800adb8:	686c      	ldr	r4, [r5, #4]
 800adba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0ef      	beq.n	800ada2 <_fflush_r+0xa>
 800adc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adc4:	07d0      	lsls	r0, r2, #31
 800adc6:	d404      	bmi.n	800add2 <_fflush_r+0x3a>
 800adc8:	0599      	lsls	r1, r3, #22
 800adca:	d402      	bmi.n	800add2 <_fflush_r+0x3a>
 800adcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adce:	f000 f915 	bl	800affc <__retarget_lock_acquire_recursive>
 800add2:	4628      	mov	r0, r5
 800add4:	4621      	mov	r1, r4
 800add6:	f7ff ff5d 	bl	800ac94 <__sflush_r>
 800adda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800addc:	4605      	mov	r5, r0
 800adde:	07da      	lsls	r2, r3, #31
 800ade0:	d4e0      	bmi.n	800ada4 <_fflush_r+0xc>
 800ade2:	89a3      	ldrh	r3, [r4, #12]
 800ade4:	059b      	lsls	r3, r3, #22
 800ade6:	d4dd      	bmi.n	800ada4 <_fflush_r+0xc>
 800ade8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adea:	f000 f908 	bl	800affe <__retarget_lock_release_recursive>
 800adee:	e7d9      	b.n	800ada4 <_fflush_r+0xc>
 800adf0:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <_fflush_r+0x70>)
 800adf2:	429c      	cmp	r4, r3
 800adf4:	d101      	bne.n	800adfa <_fflush_r+0x62>
 800adf6:	68ac      	ldr	r4, [r5, #8]
 800adf8:	e7df      	b.n	800adba <_fflush_r+0x22>
 800adfa:	4b04      	ldr	r3, [pc, #16]	; (800ae0c <_fflush_r+0x74>)
 800adfc:	429c      	cmp	r4, r3
 800adfe:	bf08      	it	eq
 800ae00:	68ec      	ldreq	r4, [r5, #12]
 800ae02:	e7da      	b.n	800adba <_fflush_r+0x22>
 800ae04:	0800b97c 	.word	0x0800b97c
 800ae08:	0800b99c 	.word	0x0800b99c
 800ae0c:	0800b95c 	.word	0x0800b95c

0800ae10 <std>:
 800ae10:	2300      	movs	r3, #0
 800ae12:	b510      	push	{r4, lr}
 800ae14:	4604      	mov	r4, r0
 800ae16:	e9c0 3300 	strd	r3, r3, [r0]
 800ae1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae1e:	6083      	str	r3, [r0, #8]
 800ae20:	8181      	strh	r1, [r0, #12]
 800ae22:	6643      	str	r3, [r0, #100]	; 0x64
 800ae24:	81c2      	strh	r2, [r0, #14]
 800ae26:	6183      	str	r3, [r0, #24]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	305c      	adds	r0, #92	; 0x5c
 800ae2e:	f7fb fe0d 	bl	8006a4c <memset>
 800ae32:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <std+0x38>)
 800ae34:	6224      	str	r4, [r4, #32]
 800ae36:	6263      	str	r3, [r4, #36]	; 0x24
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <std+0x3c>)
 800ae3a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <std+0x40>)
 800ae3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae40:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <std+0x44>)
 800ae42:	6323      	str	r3, [r4, #48]	; 0x30
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	bf00      	nop
 800ae48:	0800b165 	.word	0x0800b165
 800ae4c:	0800b187 	.word	0x0800b187
 800ae50:	0800b1bf 	.word	0x0800b1bf
 800ae54:	0800b1e3 	.word	0x0800b1e3

0800ae58 <_cleanup_r>:
 800ae58:	4901      	ldr	r1, [pc, #4]	; (800ae60 <_cleanup_r+0x8>)
 800ae5a:	f000 b8af 	b.w	800afbc <_fwalk_reent>
 800ae5e:	bf00      	nop
 800ae60:	0800ad99 	.word	0x0800ad99

0800ae64 <__sfmoreglue>:
 800ae64:	2268      	movs	r2, #104	; 0x68
 800ae66:	b570      	push	{r4, r5, r6, lr}
 800ae68:	1e4d      	subs	r5, r1, #1
 800ae6a:	4355      	muls	r5, r2
 800ae6c:	460e      	mov	r6, r1
 800ae6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae72:	f7ff fa63 	bl	800a33c <_malloc_r>
 800ae76:	4604      	mov	r4, r0
 800ae78:	b140      	cbz	r0, 800ae8c <__sfmoreglue+0x28>
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ae80:	300c      	adds	r0, #12
 800ae82:	60a0      	str	r0, [r4, #8]
 800ae84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae88:	f7fb fde0 	bl	8006a4c <memset>
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}

0800ae90 <__sfp_lock_acquire>:
 800ae90:	4801      	ldr	r0, [pc, #4]	; (800ae98 <__sfp_lock_acquire+0x8>)
 800ae92:	f000 b8b3 	b.w	800affc <__retarget_lock_acquire_recursive>
 800ae96:	bf00      	nop
 800ae98:	20000411 	.word	0x20000411

0800ae9c <__sfp_lock_release>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	; (800aea4 <__sfp_lock_release+0x8>)
 800ae9e:	f000 b8ae 	b.w	800affe <__retarget_lock_release_recursive>
 800aea2:	bf00      	nop
 800aea4:	20000411 	.word	0x20000411

0800aea8 <__sinit_lock_acquire>:
 800aea8:	4801      	ldr	r0, [pc, #4]	; (800aeb0 <__sinit_lock_acquire+0x8>)
 800aeaa:	f000 b8a7 	b.w	800affc <__retarget_lock_acquire_recursive>
 800aeae:	bf00      	nop
 800aeb0:	20000412 	.word	0x20000412

0800aeb4 <__sinit_lock_release>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__sinit_lock_release+0x8>)
 800aeb6:	f000 b8a2 	b.w	800affe <__retarget_lock_release_recursive>
 800aeba:	bf00      	nop
 800aebc:	20000412 	.word	0x20000412

0800aec0 <__sinit>:
 800aec0:	b510      	push	{r4, lr}
 800aec2:	4604      	mov	r4, r0
 800aec4:	f7ff fff0 	bl	800aea8 <__sinit_lock_acquire>
 800aec8:	69a3      	ldr	r3, [r4, #24]
 800aeca:	b11b      	cbz	r3, 800aed4 <__sinit+0x14>
 800aecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed0:	f7ff bff0 	b.w	800aeb4 <__sinit_lock_release>
 800aed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aed8:	6523      	str	r3, [r4, #80]	; 0x50
 800aeda:	4b13      	ldr	r3, [pc, #76]	; (800af28 <__sinit+0x68>)
 800aedc:	4a13      	ldr	r2, [pc, #76]	; (800af2c <__sinit+0x6c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	bf08      	it	eq
 800aee6:	2301      	moveq	r3, #1
 800aee8:	4620      	mov	r0, r4
 800aeea:	bf08      	it	eq
 800aeec:	61a3      	streq	r3, [r4, #24]
 800aeee:	f000 f81f 	bl	800af30 <__sfp>
 800aef2:	6060      	str	r0, [r4, #4]
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 f81b 	bl	800af30 <__sfp>
 800aefa:	60a0      	str	r0, [r4, #8]
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 f817 	bl	800af30 <__sfp>
 800af02:	2200      	movs	r2, #0
 800af04:	2104      	movs	r1, #4
 800af06:	60e0      	str	r0, [r4, #12]
 800af08:	6860      	ldr	r0, [r4, #4]
 800af0a:	f7ff ff81 	bl	800ae10 <std>
 800af0e:	2201      	movs	r2, #1
 800af10:	2109      	movs	r1, #9
 800af12:	68a0      	ldr	r0, [r4, #8]
 800af14:	f7ff ff7c 	bl	800ae10 <std>
 800af18:	2202      	movs	r2, #2
 800af1a:	2112      	movs	r1, #18
 800af1c:	68e0      	ldr	r0, [r4, #12]
 800af1e:	f7ff ff77 	bl	800ae10 <std>
 800af22:	2301      	movs	r3, #1
 800af24:	61a3      	str	r3, [r4, #24]
 800af26:	e7d1      	b.n	800aecc <__sinit+0xc>
 800af28:	0800b518 	.word	0x0800b518
 800af2c:	0800ae59 	.word	0x0800ae59

0800af30 <__sfp>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	4607      	mov	r7, r0
 800af34:	f7ff ffac 	bl	800ae90 <__sfp_lock_acquire>
 800af38:	4b1e      	ldr	r3, [pc, #120]	; (800afb4 <__sfp+0x84>)
 800af3a:	681e      	ldr	r6, [r3, #0]
 800af3c:	69b3      	ldr	r3, [r6, #24]
 800af3e:	b913      	cbnz	r3, 800af46 <__sfp+0x16>
 800af40:	4630      	mov	r0, r6
 800af42:	f7ff ffbd 	bl	800aec0 <__sinit>
 800af46:	3648      	adds	r6, #72	; 0x48
 800af48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	d503      	bpl.n	800af58 <__sfp+0x28>
 800af50:	6833      	ldr	r3, [r6, #0]
 800af52:	b30b      	cbz	r3, 800af98 <__sfp+0x68>
 800af54:	6836      	ldr	r6, [r6, #0]
 800af56:	e7f7      	b.n	800af48 <__sfp+0x18>
 800af58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af5c:	b9d5      	cbnz	r5, 800af94 <__sfp+0x64>
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <__sfp+0x88>)
 800af60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af64:	60e3      	str	r3, [r4, #12]
 800af66:	6665      	str	r5, [r4, #100]	; 0x64
 800af68:	f000 f847 	bl	800affa <__retarget_lock_init_recursive>
 800af6c:	f7ff ff96 	bl	800ae9c <__sfp_lock_release>
 800af70:	2208      	movs	r2, #8
 800af72:	4629      	mov	r1, r5
 800af74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af7c:	6025      	str	r5, [r4, #0]
 800af7e:	61a5      	str	r5, [r4, #24]
 800af80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af84:	f7fb fd62 	bl	8006a4c <memset>
 800af88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af90:	4620      	mov	r0, r4
 800af92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af94:	3468      	adds	r4, #104	; 0x68
 800af96:	e7d9      	b.n	800af4c <__sfp+0x1c>
 800af98:	2104      	movs	r1, #4
 800af9a:	4638      	mov	r0, r7
 800af9c:	f7ff ff62 	bl	800ae64 <__sfmoreglue>
 800afa0:	4604      	mov	r4, r0
 800afa2:	6030      	str	r0, [r6, #0]
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d1d5      	bne.n	800af54 <__sfp+0x24>
 800afa8:	f7ff ff78 	bl	800ae9c <__sfp_lock_release>
 800afac:	230c      	movs	r3, #12
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	e7ee      	b.n	800af90 <__sfp+0x60>
 800afb2:	bf00      	nop
 800afb4:	0800b518 	.word	0x0800b518
 800afb8:	ffff0001 	.word	0xffff0001

0800afbc <_fwalk_reent>:
 800afbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	4606      	mov	r6, r0
 800afc2:	4688      	mov	r8, r1
 800afc4:	2700      	movs	r7, #0
 800afc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afce:	f1b9 0901 	subs.w	r9, r9, #1
 800afd2:	d505      	bpl.n	800afe0 <_fwalk_reent+0x24>
 800afd4:	6824      	ldr	r4, [r4, #0]
 800afd6:	2c00      	cmp	r4, #0
 800afd8:	d1f7      	bne.n	800afca <_fwalk_reent+0xe>
 800afda:	4638      	mov	r0, r7
 800afdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe0:	89ab      	ldrh	r3, [r5, #12]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d907      	bls.n	800aff6 <_fwalk_reent+0x3a>
 800afe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afea:	3301      	adds	r3, #1
 800afec:	d003      	beq.n	800aff6 <_fwalk_reent+0x3a>
 800afee:	4629      	mov	r1, r5
 800aff0:	4630      	mov	r0, r6
 800aff2:	47c0      	blx	r8
 800aff4:	4307      	orrs	r7, r0
 800aff6:	3568      	adds	r5, #104	; 0x68
 800aff8:	e7e9      	b.n	800afce <_fwalk_reent+0x12>

0800affa <__retarget_lock_init_recursive>:
 800affa:	4770      	bx	lr

0800affc <__retarget_lock_acquire_recursive>:
 800affc:	4770      	bx	lr

0800affe <__retarget_lock_release_recursive>:
 800affe:	4770      	bx	lr

0800b000 <__swhatbuf_r>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	460e      	mov	r6, r1
 800b004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b008:	4614      	mov	r4, r2
 800b00a:	2900      	cmp	r1, #0
 800b00c:	461d      	mov	r5, r3
 800b00e:	b096      	sub	sp, #88	; 0x58
 800b010:	da08      	bge.n	800b024 <__swhatbuf_r+0x24>
 800b012:	2200      	movs	r2, #0
 800b014:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b018:	602a      	str	r2, [r5, #0]
 800b01a:	061a      	lsls	r2, r3, #24
 800b01c:	d410      	bmi.n	800b040 <__swhatbuf_r+0x40>
 800b01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b022:	e00e      	b.n	800b042 <__swhatbuf_r+0x42>
 800b024:	466a      	mov	r2, sp
 800b026:	f000 f903 	bl	800b230 <_fstat_r>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	dbf1      	blt.n	800b012 <__swhatbuf_r+0x12>
 800b02e:	9a01      	ldr	r2, [sp, #4]
 800b030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b038:	425a      	negs	r2, r3
 800b03a:	415a      	adcs	r2, r3
 800b03c:	602a      	str	r2, [r5, #0]
 800b03e:	e7ee      	b.n	800b01e <__swhatbuf_r+0x1e>
 800b040:	2340      	movs	r3, #64	; 0x40
 800b042:	2000      	movs	r0, #0
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	b016      	add	sp, #88	; 0x58
 800b048:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b04c <__smakebuf_r>:
 800b04c:	898b      	ldrh	r3, [r1, #12]
 800b04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b050:	079d      	lsls	r5, r3, #30
 800b052:	4606      	mov	r6, r0
 800b054:	460c      	mov	r4, r1
 800b056:	d507      	bpl.n	800b068 <__smakebuf_r+0x1c>
 800b058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	6123      	str	r3, [r4, #16]
 800b060:	2301      	movs	r3, #1
 800b062:	6163      	str	r3, [r4, #20]
 800b064:	b002      	add	sp, #8
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	466a      	mov	r2, sp
 800b06a:	ab01      	add	r3, sp, #4
 800b06c:	f7ff ffc8 	bl	800b000 <__swhatbuf_r>
 800b070:	9900      	ldr	r1, [sp, #0]
 800b072:	4605      	mov	r5, r0
 800b074:	4630      	mov	r0, r6
 800b076:	f7ff f961 	bl	800a33c <_malloc_r>
 800b07a:	b948      	cbnz	r0, 800b090 <__smakebuf_r+0x44>
 800b07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b080:	059a      	lsls	r2, r3, #22
 800b082:	d4ef      	bmi.n	800b064 <__smakebuf_r+0x18>
 800b084:	f023 0303 	bic.w	r3, r3, #3
 800b088:	f043 0302 	orr.w	r3, r3, #2
 800b08c:	81a3      	strh	r3, [r4, #12]
 800b08e:	e7e3      	b.n	800b058 <__smakebuf_r+0xc>
 800b090:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <__smakebuf_r+0x7c>)
 800b092:	62b3      	str	r3, [r6, #40]	; 0x28
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	6020      	str	r0, [r4, #0]
 800b098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	9b00      	ldr	r3, [sp, #0]
 800b0a0:	6120      	str	r0, [r4, #16]
 800b0a2:	6163      	str	r3, [r4, #20]
 800b0a4:	9b01      	ldr	r3, [sp, #4]
 800b0a6:	b15b      	cbz	r3, 800b0c0 <__smakebuf_r+0x74>
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ae:	f000 f8d1 	bl	800b254 <_isatty_r>
 800b0b2:	b128      	cbz	r0, 800b0c0 <__smakebuf_r+0x74>
 800b0b4:	89a3      	ldrh	r3, [r4, #12]
 800b0b6:	f023 0303 	bic.w	r3, r3, #3
 800b0ba:	f043 0301 	orr.w	r3, r3, #1
 800b0be:	81a3      	strh	r3, [r4, #12]
 800b0c0:	89a0      	ldrh	r0, [r4, #12]
 800b0c2:	4305      	orrs	r5, r0
 800b0c4:	81a5      	strh	r5, [r4, #12]
 800b0c6:	e7cd      	b.n	800b064 <__smakebuf_r+0x18>
 800b0c8:	0800ae59 	.word	0x0800ae59

0800b0cc <_malloc_usable_size_r>:
 800b0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d0:	1f18      	subs	r0, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	bfbc      	itt	lt
 800b0d6:	580b      	ldrlt	r3, [r1, r0]
 800b0d8:	18c0      	addlt	r0, r0, r3
 800b0da:	4770      	bx	lr

0800b0dc <_raise_r>:
 800b0dc:	291f      	cmp	r1, #31
 800b0de:	b538      	push	{r3, r4, r5, lr}
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	460d      	mov	r5, r1
 800b0e4:	d904      	bls.n	800b0f0 <_raise_r+0x14>
 800b0e6:	2316      	movs	r3, #22
 800b0e8:	6003      	str	r3, [r0, #0]
 800b0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0f2:	b112      	cbz	r2, 800b0fa <_raise_r+0x1e>
 800b0f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0f8:	b94b      	cbnz	r3, 800b10e <_raise_r+0x32>
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f830 	bl	800b160 <_getpid_r>
 800b100:	462a      	mov	r2, r5
 800b102:	4601      	mov	r1, r0
 800b104:	4620      	mov	r0, r4
 800b106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b10a:	f000 b817 	b.w	800b13c <_kill_r>
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d00a      	beq.n	800b128 <_raise_r+0x4c>
 800b112:	1c59      	adds	r1, r3, #1
 800b114:	d103      	bne.n	800b11e <_raise_r+0x42>
 800b116:	2316      	movs	r3, #22
 800b118:	6003      	str	r3, [r0, #0]
 800b11a:	2001      	movs	r0, #1
 800b11c:	e7e7      	b.n	800b0ee <_raise_r+0x12>
 800b11e:	2400      	movs	r4, #0
 800b120:	4628      	mov	r0, r5
 800b122:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b126:	4798      	blx	r3
 800b128:	2000      	movs	r0, #0
 800b12a:	e7e0      	b.n	800b0ee <_raise_r+0x12>

0800b12c <raise>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <raise+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f7ff bfd3 	b.w	800b0dc <_raise_r>
 800b136:	bf00      	nop
 800b138:	2000000c 	.word	0x2000000c

0800b13c <_kill_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	2300      	movs	r3, #0
 800b140:	4d06      	ldr	r5, [pc, #24]	; (800b15c <_kill_r+0x20>)
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	4611      	mov	r1, r2
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	f7f6 ff3e 	bl	8001fca <_kill>
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	d102      	bne.n	800b158 <_kill_r+0x1c>
 800b152:	682b      	ldr	r3, [r5, #0]
 800b154:	b103      	cbz	r3, 800b158 <_kill_r+0x1c>
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	bf00      	nop
 800b15c:	2000040c 	.word	0x2000040c

0800b160 <_getpid_r>:
 800b160:	f7f6 bf2c 	b.w	8001fbc <_getpid>

0800b164 <__sread>:
 800b164:	b510      	push	{r4, lr}
 800b166:	460c      	mov	r4, r1
 800b168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b16c:	f000 f894 	bl	800b298 <_read_r>
 800b170:	2800      	cmp	r0, #0
 800b172:	bfab      	itete	ge
 800b174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b176:	89a3      	ldrhlt	r3, [r4, #12]
 800b178:	181b      	addge	r3, r3, r0
 800b17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b17e:	bfac      	ite	ge
 800b180:	6563      	strge	r3, [r4, #84]	; 0x54
 800b182:	81a3      	strhlt	r3, [r4, #12]
 800b184:	bd10      	pop	{r4, pc}

0800b186 <__swrite>:
 800b186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18a:	461f      	mov	r7, r3
 800b18c:	898b      	ldrh	r3, [r1, #12]
 800b18e:	4605      	mov	r5, r0
 800b190:	05db      	lsls	r3, r3, #23
 800b192:	460c      	mov	r4, r1
 800b194:	4616      	mov	r6, r2
 800b196:	d505      	bpl.n	800b1a4 <__swrite+0x1e>
 800b198:	2302      	movs	r3, #2
 800b19a:	2200      	movs	r2, #0
 800b19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a0:	f000 f868 	bl	800b274 <_lseek_r>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	4632      	mov	r2, r6
 800b1a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ba:	f000 b817 	b.w	800b1ec <_write_r>

0800b1be <__sseek>:
 800b1be:	b510      	push	{r4, lr}
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c6:	f000 f855 	bl	800b274 <_lseek_r>
 800b1ca:	1c43      	adds	r3, r0, #1
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	bf15      	itete	ne
 800b1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1da:	81a3      	strheq	r3, [r4, #12]
 800b1dc:	bf18      	it	ne
 800b1de:	81a3      	strhne	r3, [r4, #12]
 800b1e0:	bd10      	pop	{r4, pc}

0800b1e2 <__sclose>:
 800b1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e6:	f000 b813 	b.w	800b210 <_close_r>
	...

0800b1ec <_write_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	4d05      	ldr	r5, [pc, #20]	; (800b20c <_write_r+0x20>)
 800b1f8:	602a      	str	r2, [r5, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f7f6 ff1c 	bl	8002038 <_write>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d102      	bne.n	800b20a <_write_r+0x1e>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	b103      	cbz	r3, 800b20a <_write_r+0x1e>
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	2000040c 	.word	0x2000040c

0800b210 <_close_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	2300      	movs	r3, #0
 800b214:	4d05      	ldr	r5, [pc, #20]	; (800b22c <_close_r+0x1c>)
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	f7f6 ff28 	bl	8002070 <_close>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_close_r+0x1a>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_close_r+0x1a>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	2000040c 	.word	0x2000040c

0800b230 <_fstat_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	2300      	movs	r3, #0
 800b234:	4d06      	ldr	r5, [pc, #24]	; (800b250 <_fstat_r+0x20>)
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	4611      	mov	r1, r2
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	f7f6 ff22 	bl	8002086 <_fstat>
 800b242:	1c43      	adds	r3, r0, #1
 800b244:	d102      	bne.n	800b24c <_fstat_r+0x1c>
 800b246:	682b      	ldr	r3, [r5, #0]
 800b248:	b103      	cbz	r3, 800b24c <_fstat_r+0x1c>
 800b24a:	6023      	str	r3, [r4, #0]
 800b24c:	bd38      	pop	{r3, r4, r5, pc}
 800b24e:	bf00      	nop
 800b250:	2000040c 	.word	0x2000040c

0800b254 <_isatty_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	2300      	movs	r3, #0
 800b258:	4d05      	ldr	r5, [pc, #20]	; (800b270 <_isatty_r+0x1c>)
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	602b      	str	r3, [r5, #0]
 800b260:	f7f6 ff20 	bl	80020a4 <_isatty>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_isatty_r+0x1a>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_isatty_r+0x1a>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	2000040c 	.word	0x2000040c

0800b274 <_lseek_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	4611      	mov	r1, r2
 800b27c:	2200      	movs	r2, #0
 800b27e:	4d05      	ldr	r5, [pc, #20]	; (800b294 <_lseek_r+0x20>)
 800b280:	602a      	str	r2, [r5, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	f7f6 ff18 	bl	80020b8 <_lseek>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_lseek_r+0x1e>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_lseek_r+0x1e>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	2000040c 	.word	0x2000040c

0800b298 <_read_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	4611      	mov	r1, r2
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4d05      	ldr	r5, [pc, #20]	; (800b2b8 <_read_r+0x20>)
 800b2a4:	602a      	str	r2, [r5, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f7f6 fea9 	bl	8001ffe <_read>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_read_r+0x1e>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_read_r+0x1e>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	2000040c 	.word	0x2000040c

0800b2bc <_init>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	bf00      	nop
 800b2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c2:	bc08      	pop	{r3}
 800b2c4:	469e      	mov	lr, r3
 800b2c6:	4770      	bx	lr

0800b2c8 <_fini>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	bf00      	nop
 800b2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ce:	bc08      	pop	{r3}
 800b2d0:	469e      	mov	lr, r3
 800b2d2:	4770      	bx	lr
