
LeftCANChipTestBigFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007734  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a8  080079a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b0  080079b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080079b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  080079c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080079c4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e7d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003046  00000000  00000000  00032eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00035ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00036fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002104e  00000000  00000000  00037f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015421  00000000  00000000  00058f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000baa4d  00000000  00000000  0006e37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128dcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  00128e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08007904 	.word	0x08007904

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08007904 	.word	0x08007904

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2f>:
 80009d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009dc:	bf24      	itt	cs
 80009de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009e6:	d90d      	bls.n	8000a04 <__aeabi_d2f+0x30>
 80009e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009fc:	bf08      	it	eq
 80009fe:	f020 0001 	biceq.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a08:	d121      	bne.n	8000a4e <__aeabi_d2f+0x7a>
 8000a0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a0e:	bfbc      	itt	lt
 8000a10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a14:	4770      	bxlt	lr
 8000a16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a1e:	f1c2 0218 	rsb	r2, r2, #24
 8000a22:	f1c2 0c20 	rsb	ip, r2, #32
 8000a26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a2e:	bf18      	it	ne
 8000a30:	f040 0001 	orrne.w	r0, r0, #1
 8000a34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a40:	ea40 000c 	orr.w	r0, r0, ip
 8000a44:	fa23 f302 	lsr.w	r3, r3, r2
 8000a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a4c:	e7cc      	b.n	80009e8 <__aeabi_d2f+0x14>
 8000a4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a52:	d107      	bne.n	8000a64 <__aeabi_d2f+0x90>
 8000a54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a58:	bf1e      	ittt	ne
 8000a5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a62:	4770      	bxne	lr
 8000a64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_frsub>:
 8000a74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	e002      	b.n	8000a80 <__addsf3>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fsub>:
 8000a7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a80 <__addsf3>:
 8000a80:	0042      	lsls	r2, r0, #1
 8000a82:	bf1f      	itttt	ne
 8000a84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a88:	ea92 0f03 	teqne	r2, r3
 8000a8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a94:	d06a      	beq.n	8000b6c <__addsf3+0xec>
 8000a96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a9e:	bfc1      	itttt	gt
 8000aa0:	18d2      	addgt	r2, r2, r3
 8000aa2:	4041      	eorgt	r1, r0
 8000aa4:	4048      	eorgt	r0, r1
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	bfb8      	it	lt
 8000aaa:	425b      	neglt	r3, r3
 8000aac:	2b19      	cmp	r3, #25
 8000aae:	bf88      	it	hi
 8000ab0:	4770      	bxhi	lr
 8000ab2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4249      	negne	r1, r1
 8000ad2:	ea92 0f03 	teq	r2, r3
 8000ad6:	d03f      	beq.n	8000b58 <__addsf3+0xd8>
 8000ad8:	f1a2 0201 	sub.w	r2, r2, #1
 8000adc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae0:	eb10 000c 	adds.w	r0, r0, ip
 8000ae4:	f1c3 0320 	rsb	r3, r3, #32
 8000ae8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__addsf3+0x78>
 8000af2:	4249      	negs	r1, r1
 8000af4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000afc:	d313      	bcc.n	8000b26 <__addsf3+0xa6>
 8000afe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b02:	d306      	bcc.n	8000b12 <__addsf3+0x92>
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0a:	f102 0201 	add.w	r2, r2, #1
 8000b0e:	2afe      	cmp	r2, #254	; 0xfe
 8000b10:	d251      	bcs.n	8000bb6 <__addsf3+0x136>
 8000b12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1a:	bf08      	it	eq
 8000b1c:	f020 0001 	biceq.w	r0, r0, #1
 8000b20:	ea40 0003 	orr.w	r0, r0, r3
 8000b24:	4770      	bx	lr
 8000b26:	0049      	lsls	r1, r1, #1
 8000b28:	eb40 0000 	adc.w	r0, r0, r0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b34:	d2ed      	bcs.n	8000b12 <__addsf3+0x92>
 8000b36:	fab0 fc80 	clz	ip, r0
 8000b3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b46:	bfaa      	itet	ge
 8000b48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b4c:	4252      	neglt	r2, r2
 8000b4e:	4318      	orrge	r0, r3
 8000b50:	bfbc      	itt	lt
 8000b52:	40d0      	lsrlt	r0, r2
 8000b54:	4318      	orrlt	r0, r3
 8000b56:	4770      	bx	lr
 8000b58:	f092 0f00 	teq	r2, #0
 8000b5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b60:	bf06      	itte	eq
 8000b62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b66:	3201      	addeq	r2, #1
 8000b68:	3b01      	subne	r3, #1
 8000b6a:	e7b5      	b.n	8000ad8 <__addsf3+0x58>
 8000b6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7a:	d021      	beq.n	8000bc0 <__addsf3+0x140>
 8000b7c:	ea92 0f03 	teq	r2, r3
 8000b80:	d004      	beq.n	8000b8c <__addsf3+0x10c>
 8000b82:	f092 0f00 	teq	r2, #0
 8000b86:	bf08      	it	eq
 8000b88:	4608      	moveq	r0, r1
 8000b8a:	4770      	bx	lr
 8000b8c:	ea90 0f01 	teq	r0, r1
 8000b90:	bf1c      	itt	ne
 8000b92:	2000      	movne	r0, #0
 8000b94:	4770      	bxne	lr
 8000b96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9a:	d104      	bne.n	8000ba6 <__addsf3+0x126>
 8000b9c:	0040      	lsls	r0, r0, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	4770      	bx	lr
 8000ba6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000baa:	bf3c      	itt	cc
 8000bac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bxcc	lr
 8000bb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	4770      	bx	lr
 8000bc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc4:	bf16      	itet	ne
 8000bc6:	4608      	movne	r0, r1
 8000bc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bcc:	4601      	movne	r1, r0
 8000bce:	0242      	lsls	r2, r0, #9
 8000bd0:	bf06      	itte	eq
 8000bd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bd6:	ea90 0f01 	teqeq	r0, r1
 8000bda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_ui2f>:
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e004      	b.n	8000bf0 <__aeabi_i2f+0x8>
 8000be6:	bf00      	nop

08000be8 <__aeabi_i2f>:
 8000be8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bec:	bf48      	it	mi
 8000bee:	4240      	negmi	r0, r0
 8000bf0:	ea5f 0c00 	movs.w	ip, r0
 8000bf4:	bf08      	it	eq
 8000bf6:	4770      	bxeq	lr
 8000bf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	e01c      	b.n	8000c3e <__aeabi_l2f+0x2a>

08000c04 <__aeabi_ul2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e00a      	b.n	8000c28 <__aeabi_l2f+0x14>
 8000c12:	bf00      	nop

08000c14 <__aeabi_l2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__aeabi_l2f+0x14>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	ea5f 0c01 	movs.w	ip, r1
 8000c2c:	bf02      	ittt	eq
 8000c2e:	4684      	moveq	ip, r0
 8000c30:	4601      	moveq	r1, r0
 8000c32:	2000      	moveq	r0, #0
 8000c34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c38:	bf08      	it	eq
 8000c3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c42:	fabc f28c 	clz	r2, ip
 8000c46:	3a08      	subs	r2, #8
 8000c48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c4c:	db10      	blt.n	8000c70 <__aeabi_l2f+0x5c>
 8000c4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c52:	4463      	add	r3, ip
 8000c54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f102 0220 	add.w	r2, r2, #32
 8000c74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c80:	fa21 f202 	lsr.w	r2, r1, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fmul>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d06f      	beq.n	8000d88 <__aeabi_fmul+0xf8>
 8000ca8:	441a      	add	r2, r3
 8000caa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cae:	0240      	lsls	r0, r0, #9
 8000cb0:	bf18      	it	ne
 8000cb2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cb6:	d01e      	beq.n	8000cf6 <__aeabi_fmul+0x66>
 8000cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ccc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd0:	bf3e      	ittt	cc
 8000cd2:	0049      	lslcc	r1, r1, #1
 8000cd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd8:	005b      	lslcc	r3, r3, #1
 8000cda:	ea40 0001 	orr.w	r0, r0, r1
 8000cde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce2:	2afd      	cmp	r2, #253	; 0xfd
 8000ce4:	d81d      	bhi.n	8000d22 <__aeabi_fmul+0x92>
 8000ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	4770      	bx	lr
 8000cf6:	f090 0f00 	teq	r0, #0
 8000cfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cfe:	bf08      	it	eq
 8000d00:	0249      	lsleq	r1, r1, #9
 8000d02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0a:	3a7f      	subs	r2, #127	; 0x7f
 8000d0c:	bfc2      	ittt	gt
 8000d0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d16:	4770      	bxgt	lr
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	3a01      	subs	r2, #1
 8000d22:	dc5d      	bgt.n	8000de0 <__aeabi_fmul+0x150>
 8000d24:	f112 0f19 	cmn.w	r2, #25
 8000d28:	bfdc      	itt	le
 8000d2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d2e:	4770      	bxle	lr
 8000d30:	f1c2 0200 	rsb	r2, r2, #0
 8000d34:	0041      	lsls	r1, r0, #1
 8000d36:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3a:	f1c2 0220 	rsb	r2, r2, #32
 8000d3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d46:	f140 0000 	adc.w	r0, r0, #0
 8000d4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d4e:	bf08      	it	eq
 8000d50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d54:	4770      	bx	lr
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0040      	lsleq	r0, r0, #1
 8000d62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d66:	3a01      	subeq	r2, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xce>
 8000d6a:	ea40 000c 	orr.w	r0, r0, ip
 8000d6e:	f093 0f00 	teq	r3, #0
 8000d72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0049      	lsleq	r1, r1, #1
 8000d7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d7e:	3b01      	subeq	r3, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fmul+0xe6>
 8000d82:	ea41 010c 	orr.w	r1, r1, ip
 8000d86:	e78f      	b.n	8000ca8 <__aeabi_fmul+0x18>
 8000d88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d8c:	ea92 0f0c 	teq	r2, ip
 8000d90:	bf18      	it	ne
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d00a      	beq.n	8000dae <__aeabi_fmul+0x11e>
 8000d98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d9c:	bf18      	it	ne
 8000d9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	d1d8      	bne.n	8000d56 <__aeabi_fmul+0xc6>
 8000da4:	ea80 0001 	eor.w	r0, r0, r1
 8000da8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	bf17      	itett	ne
 8000db4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db8:	4608      	moveq	r0, r1
 8000dba:	f091 0f00 	teqne	r1, #0
 8000dbe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc2:	d014      	beq.n	8000dee <__aeabi_fmul+0x15e>
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	d101      	bne.n	8000dce <__aeabi_fmul+0x13e>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d10f      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000dce:	ea93 0f0c 	teq	r3, ip
 8000dd2:	d103      	bne.n	8000ddc <__aeabi_fmul+0x14c>
 8000dd4:	024b      	lsls	r3, r1, #9
 8000dd6:	bf18      	it	ne
 8000dd8:	4608      	movne	r0, r1
 8000dda:	d108      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dec:	4770      	bx	lr
 8000dee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000df6:	4770      	bx	lr

08000df8 <__aeabi_fdiv>:
 8000df8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e00:	bf1e      	ittt	ne
 8000e02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e06:	ea92 0f0c 	teqne	r2, ip
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d069      	beq.n	8000ee4 <__aeabi_fdiv+0xec>
 8000e10:	eba2 0203 	sub.w	r2, r2, r3
 8000e14:	ea80 0c01 	eor.w	ip, r0, r1
 8000e18:	0249      	lsls	r1, r1, #9
 8000e1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e1e:	d037      	beq.n	8000e90 <__aeabi_fdiv+0x98>
 8000e20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e30:	428b      	cmp	r3, r1
 8000e32:	bf38      	it	cc
 8000e34:	005b      	lslcc	r3, r3, #1
 8000e36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	bf24      	itt	cs
 8000e42:	1a5b      	subcs	r3, r3, r1
 8000e44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e4c:	bf24      	itt	cs
 8000e4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5a:	bf24      	itt	cs
 8000e5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e68:	bf24      	itt	cs
 8000e6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7a:	d1e0      	bne.n	8000e3e <__aeabi_fdiv+0x46>
 8000e7c:	2afd      	cmp	r2, #253	; 0xfd
 8000e7e:	f63f af50 	bhi.w	8000d22 <__aeabi_fmul+0x92>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e98:	327f      	adds	r2, #127	; 0x7f
 8000e9a:	bfc2      	ittt	gt
 8000e9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea4:	4770      	bxgt	lr
 8000ea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	3a01      	subs	r2, #1
 8000eb0:	e737      	b.n	8000d22 <__aeabi_fmul+0x92>
 8000eb2:	f092 0f00 	teq	r2, #0
 8000eb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0040      	lsleq	r0, r0, #1
 8000ebe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec2:	3a01      	subeq	r2, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xc2>
 8000ec6:	ea40 000c 	orr.w	r0, r0, ip
 8000eca:	f093 0f00 	teq	r3, #0
 8000ece:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0049      	lsleq	r1, r1, #1
 8000ed6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eda:	3b01      	subeq	r3, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fdiv+0xda>
 8000ede:	ea41 010c 	orr.w	r1, r1, ip
 8000ee2:	e795      	b.n	8000e10 <__aeabi_fdiv+0x18>
 8000ee4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d108      	bne.n	8000f00 <__aeabi_fdiv+0x108>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	f47f af7d 	bne.w	8000dee <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	f47f af70 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e776      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	d104      	bne.n	8000f10 <__aeabi_fdiv+0x118>
 8000f06:	024b      	lsls	r3, r1, #9
 8000f08:	f43f af4c 	beq.w	8000da4 <__aeabi_fmul+0x114>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e76e      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f14:	bf18      	it	ne
 8000f16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	d1ca      	bne.n	8000eb2 <__aeabi_fdiv+0xba>
 8000f1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f20:	f47f af5c 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000f24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f28:	f47f af3c 	bne.w	8000da4 <__aeabi_fmul+0x114>
 8000f2c:	e75f      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f2e:	bf00      	nop

08000f30 <__gesf2>:
 8000f30:	f04f 3cff 	mov.w	ip, #4294967295
 8000f34:	e006      	b.n	8000f44 <__cmpsf2+0x4>
 8000f36:	bf00      	nop

08000f38 <__lesf2>:
 8000f38:	f04f 0c01 	mov.w	ip, #1
 8000f3c:	e002      	b.n	8000f44 <__cmpsf2+0x4>
 8000f3e:	bf00      	nop

08000f40 <__cmpsf2>:
 8000f40:	f04f 0c01 	mov.w	ip, #1
 8000f44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f54:	bf18      	it	ne
 8000f56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5a:	d011      	beq.n	8000f80 <__cmpsf2+0x40>
 8000f5c:	b001      	add	sp, #4
 8000f5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f62:	bf18      	it	ne
 8000f64:	ea90 0f01 	teqne	r0, r1
 8000f68:	bf58      	it	pl
 8000f6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f6e:	bf88      	it	hi
 8000f70:	17c8      	asrhi	r0, r1, #31
 8000f72:	bf38      	it	cc
 8000f74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f78:	bf18      	it	ne
 8000f7a:	f040 0001 	orrne.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f84:	d102      	bne.n	8000f8c <__cmpsf2+0x4c>
 8000f86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8a:	d105      	bne.n	8000f98 <__cmpsf2+0x58>
 8000f8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f90:	d1e4      	bne.n	8000f5c <__cmpsf2+0x1c>
 8000f92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f96:	d0e1      	beq.n	8000f5c <__cmpsf2+0x1c>
 8000f98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_cfrcmple>:
 8000fa0:	4684      	mov	ip, r0
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4661      	mov	r1, ip
 8000fa6:	e7ff      	b.n	8000fa8 <__aeabi_cfcmpeq>

08000fa8 <__aeabi_cfcmpeq>:
 8000fa8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000faa:	f7ff ffc9 	bl	8000f40 <__cmpsf2>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	bf48      	it	mi
 8000fb2:	f110 0f00 	cmnmi.w	r0, #0
 8000fb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fb8 <__aeabi_fcmpeq>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff fff4 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fc0:	bf0c      	ite	eq
 8000fc2:	2001      	moveq	r0, #1
 8000fc4:	2000      	movne	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmplt>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffea 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fd4:	bf34      	ite	cc
 8000fd6:	2001      	movcc	r0, #1
 8000fd8:	2000      	movcs	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmple>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffe0 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fe8:	bf94      	ite	ls
 8000fea:	2001      	movls	r0, #1
 8000fec:	2000      	movhi	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmpge>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffd2 	bl	8000fa0 <__aeabi_cfrcmple>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpgt>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffc8 	bl	8000fa0 <__aeabi_cfrcmple>
 8001010:	bf34      	ite	cc
 8001012:	2001      	movcc	r0, #1
 8001014:	2000      	movcs	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <__aeabi_uldivmod>:
 8001068:	b953      	cbnz	r3, 8001080 <__aeabi_uldivmod+0x18>
 800106a:	b94a      	cbnz	r2, 8001080 <__aeabi_uldivmod+0x18>
 800106c:	2900      	cmp	r1, #0
 800106e:	bf08      	it	eq
 8001070:	2800      	cmpeq	r0, #0
 8001072:	bf1c      	itt	ne
 8001074:	f04f 31ff 	movne.w	r1, #4294967295
 8001078:	f04f 30ff 	movne.w	r0, #4294967295
 800107c:	f000 b976 	b.w	800136c <__aeabi_idiv0>
 8001080:	f1ad 0c08 	sub.w	ip, sp, #8
 8001084:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001088:	f000 f806 	bl	8001098 <__udivmoddi4>
 800108c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <__udivmoddi4>:
 8001098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800109c:	9e08      	ldr	r6, [sp, #32]
 800109e:	460d      	mov	r5, r1
 80010a0:	4604      	mov	r4, r0
 80010a2:	4688      	mov	r8, r1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d14d      	bne.n	8001144 <__udivmoddi4+0xac>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	4694      	mov	ip, r2
 80010ac:	d968      	bls.n	8001180 <__udivmoddi4+0xe8>
 80010ae:	fab2 f282 	clz	r2, r2
 80010b2:	b152      	cbz	r2, 80010ca <__udivmoddi4+0x32>
 80010b4:	fa01 f302 	lsl.w	r3, r1, r2
 80010b8:	f1c2 0120 	rsb	r1, r2, #32
 80010bc:	fa20 f101 	lsr.w	r1, r0, r1
 80010c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010c4:	ea41 0803 	orr.w	r8, r1, r3
 80010c8:	4094      	lsls	r4, r2
 80010ca:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010ce:	fbb8 f7f1 	udiv	r7, r8, r1
 80010d2:	fa1f fe8c 	uxth.w	lr, ip
 80010d6:	fb01 8817 	mls	r8, r1, r7, r8
 80010da:	fb07 f00e 	mul.w	r0, r7, lr
 80010de:	0c23      	lsrs	r3, r4, #16
 80010e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010e4:	4298      	cmp	r0, r3
 80010e6:	d90a      	bls.n	80010fe <__udivmoddi4+0x66>
 80010e8:	eb1c 0303 	adds.w	r3, ip, r3
 80010ec:	f107 35ff 	add.w	r5, r7, #4294967295
 80010f0:	f080 811e 	bcs.w	8001330 <__udivmoddi4+0x298>
 80010f4:	4298      	cmp	r0, r3
 80010f6:	f240 811b 	bls.w	8001330 <__udivmoddi4+0x298>
 80010fa:	3f02      	subs	r7, #2
 80010fc:	4463      	add	r3, ip
 80010fe:	1a1b      	subs	r3, r3, r0
 8001100:	fbb3 f0f1 	udiv	r0, r3, r1
 8001104:	fb01 3310 	mls	r3, r1, r0, r3
 8001108:	fb00 fe0e 	mul.w	lr, r0, lr
 800110c:	b2a4      	uxth	r4, r4
 800110e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001112:	45a6      	cmp	lr, r4
 8001114:	d90a      	bls.n	800112c <__udivmoddi4+0x94>
 8001116:	eb1c 0404 	adds.w	r4, ip, r4
 800111a:	f100 33ff 	add.w	r3, r0, #4294967295
 800111e:	f080 8109 	bcs.w	8001334 <__udivmoddi4+0x29c>
 8001122:	45a6      	cmp	lr, r4
 8001124:	f240 8106 	bls.w	8001334 <__udivmoddi4+0x29c>
 8001128:	4464      	add	r4, ip
 800112a:	3802      	subs	r0, #2
 800112c:	2100      	movs	r1, #0
 800112e:	eba4 040e 	sub.w	r4, r4, lr
 8001132:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001136:	b11e      	cbz	r6, 8001140 <__udivmoddi4+0xa8>
 8001138:	2300      	movs	r3, #0
 800113a:	40d4      	lsrs	r4, r2
 800113c:	e9c6 4300 	strd	r4, r3, [r6]
 8001140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001144:	428b      	cmp	r3, r1
 8001146:	d908      	bls.n	800115a <__udivmoddi4+0xc2>
 8001148:	2e00      	cmp	r6, #0
 800114a:	f000 80ee 	beq.w	800132a <__udivmoddi4+0x292>
 800114e:	2100      	movs	r1, #0
 8001150:	e9c6 0500 	strd	r0, r5, [r6]
 8001154:	4608      	mov	r0, r1
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	fab3 f183 	clz	r1, r3
 800115e:	2900      	cmp	r1, #0
 8001160:	d14a      	bne.n	80011f8 <__udivmoddi4+0x160>
 8001162:	42ab      	cmp	r3, r5
 8001164:	d302      	bcc.n	800116c <__udivmoddi4+0xd4>
 8001166:	4282      	cmp	r2, r0
 8001168:	f200 80fc 	bhi.w	8001364 <__udivmoddi4+0x2cc>
 800116c:	1a84      	subs	r4, r0, r2
 800116e:	eb65 0303 	sbc.w	r3, r5, r3
 8001172:	2001      	movs	r0, #1
 8001174:	4698      	mov	r8, r3
 8001176:	2e00      	cmp	r6, #0
 8001178:	d0e2      	beq.n	8001140 <__udivmoddi4+0xa8>
 800117a:	e9c6 4800 	strd	r4, r8, [r6]
 800117e:	e7df      	b.n	8001140 <__udivmoddi4+0xa8>
 8001180:	b902      	cbnz	r2, 8001184 <__udivmoddi4+0xec>
 8001182:	deff      	udf	#255	; 0xff
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	2a00      	cmp	r2, #0
 800118a:	f040 8091 	bne.w	80012b0 <__udivmoddi4+0x218>
 800118e:	eba1 000c 	sub.w	r0, r1, ip
 8001192:	2101      	movs	r1, #1
 8001194:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001198:	fa1f fe8c 	uxth.w	lr, ip
 800119c:	fbb0 f3f7 	udiv	r3, r0, r7
 80011a0:	fb07 0013 	mls	r0, r7, r3, r0
 80011a4:	0c25      	lsrs	r5, r4, #16
 80011a6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011aa:	fb0e f003 	mul.w	r0, lr, r3
 80011ae:	42a8      	cmp	r0, r5
 80011b0:	d908      	bls.n	80011c4 <__udivmoddi4+0x12c>
 80011b2:	eb1c 0505 	adds.w	r5, ip, r5
 80011b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80011ba:	d202      	bcs.n	80011c2 <__udivmoddi4+0x12a>
 80011bc:	42a8      	cmp	r0, r5
 80011be:	f200 80ce 	bhi.w	800135e <__udivmoddi4+0x2c6>
 80011c2:	4643      	mov	r3, r8
 80011c4:	1a2d      	subs	r5, r5, r0
 80011c6:	fbb5 f0f7 	udiv	r0, r5, r7
 80011ca:	fb07 5510 	mls	r5, r7, r0, r5
 80011ce:	fb0e fe00 	mul.w	lr, lr, r0
 80011d2:	b2a4      	uxth	r4, r4
 80011d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011d8:	45a6      	cmp	lr, r4
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0x156>
 80011dc:	eb1c 0404 	adds.w	r4, ip, r4
 80011e0:	f100 35ff 	add.w	r5, r0, #4294967295
 80011e4:	d202      	bcs.n	80011ec <__udivmoddi4+0x154>
 80011e6:	45a6      	cmp	lr, r4
 80011e8:	f200 80b6 	bhi.w	8001358 <__udivmoddi4+0x2c0>
 80011ec:	4628      	mov	r0, r5
 80011ee:	eba4 040e 	sub.w	r4, r4, lr
 80011f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011f6:	e79e      	b.n	8001136 <__udivmoddi4+0x9e>
 80011f8:	f1c1 0720 	rsb	r7, r1, #32
 80011fc:	408b      	lsls	r3, r1
 80011fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8001202:	ea4c 0c03 	orr.w	ip, ip, r3
 8001206:	fa25 fa07 	lsr.w	sl, r5, r7
 800120a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800120e:	fbba f8f9 	udiv	r8, sl, r9
 8001212:	fa20 f307 	lsr.w	r3, r0, r7
 8001216:	fb09 aa18 	mls	sl, r9, r8, sl
 800121a:	408d      	lsls	r5, r1
 800121c:	fa1f fe8c 	uxth.w	lr, ip
 8001220:	431d      	orrs	r5, r3
 8001222:	fa00 f301 	lsl.w	r3, r0, r1
 8001226:	fb08 f00e 	mul.w	r0, r8, lr
 800122a:	0c2c      	lsrs	r4, r5, #16
 800122c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001230:	42a0      	cmp	r0, r4
 8001232:	fa02 f201 	lsl.w	r2, r2, r1
 8001236:	d90b      	bls.n	8001250 <__udivmoddi4+0x1b8>
 8001238:	eb1c 0404 	adds.w	r4, ip, r4
 800123c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001240:	f080 8088 	bcs.w	8001354 <__udivmoddi4+0x2bc>
 8001244:	42a0      	cmp	r0, r4
 8001246:	f240 8085 	bls.w	8001354 <__udivmoddi4+0x2bc>
 800124a:	f1a8 0802 	sub.w	r8, r8, #2
 800124e:	4464      	add	r4, ip
 8001250:	1a24      	subs	r4, r4, r0
 8001252:	fbb4 f0f9 	udiv	r0, r4, r9
 8001256:	fb09 4410 	mls	r4, r9, r0, r4
 800125a:	fb00 fe0e 	mul.w	lr, r0, lr
 800125e:	b2ad      	uxth	r5, r5
 8001260:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001264:	45a6      	cmp	lr, r4
 8001266:	d908      	bls.n	800127a <__udivmoddi4+0x1e2>
 8001268:	eb1c 0404 	adds.w	r4, ip, r4
 800126c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001270:	d26c      	bcs.n	800134c <__udivmoddi4+0x2b4>
 8001272:	45a6      	cmp	lr, r4
 8001274:	d96a      	bls.n	800134c <__udivmoddi4+0x2b4>
 8001276:	3802      	subs	r0, #2
 8001278:	4464      	add	r4, ip
 800127a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800127e:	fba0 9502 	umull	r9, r5, r0, r2
 8001282:	eba4 040e 	sub.w	r4, r4, lr
 8001286:	42ac      	cmp	r4, r5
 8001288:	46c8      	mov	r8, r9
 800128a:	46ae      	mov	lr, r5
 800128c:	d356      	bcc.n	800133c <__udivmoddi4+0x2a4>
 800128e:	d053      	beq.n	8001338 <__udivmoddi4+0x2a0>
 8001290:	2e00      	cmp	r6, #0
 8001292:	d069      	beq.n	8001368 <__udivmoddi4+0x2d0>
 8001294:	ebb3 0208 	subs.w	r2, r3, r8
 8001298:	eb64 040e 	sbc.w	r4, r4, lr
 800129c:	fa22 f301 	lsr.w	r3, r2, r1
 80012a0:	fa04 f707 	lsl.w	r7, r4, r7
 80012a4:	431f      	orrs	r7, r3
 80012a6:	40cc      	lsrs	r4, r1
 80012a8:	e9c6 7400 	strd	r7, r4, [r6]
 80012ac:	2100      	movs	r1, #0
 80012ae:	e747      	b.n	8001140 <__udivmoddi4+0xa8>
 80012b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80012b4:	f1c2 0120 	rsb	r1, r2, #32
 80012b8:	fa25 f301 	lsr.w	r3, r5, r1
 80012bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c0:	fa20 f101 	lsr.w	r1, r0, r1
 80012c4:	4095      	lsls	r5, r2
 80012c6:	430d      	orrs	r5, r1
 80012c8:	fbb3 f1f7 	udiv	r1, r3, r7
 80012cc:	fb07 3311 	mls	r3, r7, r1, r3
 80012d0:	fa1f fe8c 	uxth.w	lr, ip
 80012d4:	0c28      	lsrs	r0, r5, #16
 80012d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012da:	fb01 f30e 	mul.w	r3, r1, lr
 80012de:	4283      	cmp	r3, r0
 80012e0:	fa04 f402 	lsl.w	r4, r4, r2
 80012e4:	d908      	bls.n	80012f8 <__udivmoddi4+0x260>
 80012e6:	eb1c 0000 	adds.w	r0, ip, r0
 80012ea:	f101 38ff 	add.w	r8, r1, #4294967295
 80012ee:	d22f      	bcs.n	8001350 <__udivmoddi4+0x2b8>
 80012f0:	4283      	cmp	r3, r0
 80012f2:	d92d      	bls.n	8001350 <__udivmoddi4+0x2b8>
 80012f4:	3902      	subs	r1, #2
 80012f6:	4460      	add	r0, ip
 80012f8:	1ac0      	subs	r0, r0, r3
 80012fa:	fbb0 f3f7 	udiv	r3, r0, r7
 80012fe:	fb07 0013 	mls	r0, r7, r3, r0
 8001302:	b2ad      	uxth	r5, r5
 8001304:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001308:	fb03 f00e 	mul.w	r0, r3, lr
 800130c:	42a8      	cmp	r0, r5
 800130e:	d908      	bls.n	8001322 <__udivmoddi4+0x28a>
 8001310:	eb1c 0505 	adds.w	r5, ip, r5
 8001314:	f103 38ff 	add.w	r8, r3, #4294967295
 8001318:	d216      	bcs.n	8001348 <__udivmoddi4+0x2b0>
 800131a:	42a8      	cmp	r0, r5
 800131c:	d914      	bls.n	8001348 <__udivmoddi4+0x2b0>
 800131e:	3b02      	subs	r3, #2
 8001320:	4465      	add	r5, ip
 8001322:	1a28      	subs	r0, r5, r0
 8001324:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001328:	e738      	b.n	800119c <__udivmoddi4+0x104>
 800132a:	4631      	mov	r1, r6
 800132c:	4630      	mov	r0, r6
 800132e:	e707      	b.n	8001140 <__udivmoddi4+0xa8>
 8001330:	462f      	mov	r7, r5
 8001332:	e6e4      	b.n	80010fe <__udivmoddi4+0x66>
 8001334:	4618      	mov	r0, r3
 8001336:	e6f9      	b.n	800112c <__udivmoddi4+0x94>
 8001338:	454b      	cmp	r3, r9
 800133a:	d2a9      	bcs.n	8001290 <__udivmoddi4+0x1f8>
 800133c:	ebb9 0802 	subs.w	r8, r9, r2
 8001340:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001344:	3801      	subs	r0, #1
 8001346:	e7a3      	b.n	8001290 <__udivmoddi4+0x1f8>
 8001348:	4643      	mov	r3, r8
 800134a:	e7ea      	b.n	8001322 <__udivmoddi4+0x28a>
 800134c:	4628      	mov	r0, r5
 800134e:	e794      	b.n	800127a <__udivmoddi4+0x1e2>
 8001350:	4641      	mov	r1, r8
 8001352:	e7d1      	b.n	80012f8 <__udivmoddi4+0x260>
 8001354:	46d0      	mov	r8, sl
 8001356:	e77b      	b.n	8001250 <__udivmoddi4+0x1b8>
 8001358:	4464      	add	r4, ip
 800135a:	3802      	subs	r0, #2
 800135c:	e747      	b.n	80011ee <__udivmoddi4+0x156>
 800135e:	3b02      	subs	r3, #2
 8001360:	4465      	add	r5, ip
 8001362:	e72f      	b.n	80011c4 <__udivmoddi4+0x12c>
 8001364:	4608      	mov	r0, r1
 8001366:	e706      	b.n	8001176 <__udivmoddi4+0xde>
 8001368:	4631      	mov	r1, r6
 800136a:	e6e9      	b.n	8001140 <__udivmoddi4+0xa8>

0800136c <__aeabi_idiv0>:
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM7)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d103      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_GPIO_TogglePin(GPIOC, LED3_Pin);
 8001382:	2108      	movs	r1, #8
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001386:	f004 f8dd 	bl	8005544 <HAL_GPIO_TogglePin>
  }
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40001400 	.word	0x40001400
 8001398:	40011000 	.word	0x40011000

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a0:	b0da      	sub	sp, #360	; 0x168
 80013a2:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f001 fcf0 	bl	8002d88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 f9fc 	bl	80017a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f000 fbcc 	bl	8001b48 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b0:	f000 fba4 	bl	8001afc <MX_DMA_Init>
  MX_ADC1_Init();
 80013b4:	f000 fa4c 	bl	8001850 <MX_ADC1_Init>
  MX_CAN1_Init();
 80013b8:	f000 fa74 	bl	80018a4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80013bc:	f000 fb76 	bl	8001aac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80013c0:	f000 fb4a 	bl	8001a58 <MX_USART1_UART_Init>
  MX_CAN2_Init();
 80013c4:	f000 faa4 	bl	8001910 <MX_CAN2_Init>
  MX_TIM6_Init();
 80013c8:	f000 fad8 	bl	800197c <MX_TIM6_Init>
  MX_TIM7_Init();
 80013cc:	f000 fb0c 	bl	80019e8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(gUartConnRequest != 'A') // Waits for CAN1 CAN2 reqest
 80013d0:	e004      	b.n	80013dc <main+0x40>
  {
    // Keeps on receiving Uart bytes if the request was not received:
    HAL_UART_Receive_DMA(&huart1, &gUartConnRequest, 1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	49bc      	ldr	r1, [pc, #752]	; (80016c8 <main+0x32c>)
 80013d6:	48bd      	ldr	r0, [pc, #756]	; (80016cc <main+0x330>)
 80013d8:	f005 fcb1 	bl	8006d3e <HAL_UART_Receive_DMA>
  while(gUartConnRequest != 'A') // Waits for CAN1 CAN2 reqest
 80013dc:	4bba      	ldr	r3, [pc, #744]	; (80016c8 <main+0x32c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b41      	cmp	r3, #65	; 0x41
 80013e2:	d1f6      	bne.n	80013d2 <main+0x36>
  }

  AdcChannels_t   adcChannel[TOTAL_ADC_CH] = {0};
 80013e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013e8:	22dc      	movs	r2, #220	; 0xdc
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 fa2f 	bl	8007850 <memset>
  for(int chNum=0; chNum<5; chNum++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80013f8:	e03a      	b.n	8001470 <main+0xd4>
  {
    adcChannel[chNum] = inits_adcChannelInit(chNum,adcChannel[chNum]);
 80013fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013fe:	fa5f fe83 	uxtb.w	lr, r3
 8001402:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001406:	222c      	movs	r2, #44	; 0x2c
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001410:	443b      	add	r3, r7
 8001412:	f1a3 08e4 	sub.w	r8, r3, #228	; 0xe4
 8001416:	46bc      	mov	ip, r7
 8001418:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800141c:	222c      	movs	r2, #44	; 0x2c
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001426:	443b      	add	r3, r7
 8001428:	f1a3 06e4 	sub.w	r6, r3, #228	; 0xe4
 800142c:	466d      	mov	r5, sp
 800142e:	f106 0408 	add.w	r4, r6, #8
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	602b      	str	r3, [r5, #0]
 800143e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001442:	4671      	mov	r1, lr
 8001444:	4660      	mov	r0, ip
 8001446:	f000 ff81 	bl	800234c <inits_adcChannelInit>
 800144a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800144e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001452:	4644      	mov	r4, r8
 8001454:	461d      	mov	r5, r3
 8001456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for(int chNum=0; chNum<5; chNum++)
 8001466:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800146a:	3301      	adds	r3, #1
 800146c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001470:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001474:	2b04      	cmp	r3, #4
 8001476:	ddc0      	ble.n	80013fa <main+0x5e>
  }
  adc_sendAdcData(adcChannel, &huart1, &hadc1, 1);
 8001478:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800147c:	2301      	movs	r3, #1
 800147e:	4a94      	ldr	r2, [pc, #592]	; (80016d0 <main+0x334>)
 8001480:	4992      	ldr	r1, [pc, #584]	; (80016cc <main+0x330>)
 8001482:	f001 f8ad 	bl	80025e0 <adc_sendAdcData>

  // STRUCTS:
  CanCommunication_t can[TOTAL_CAN_CONNECTIONS] = {0};
 8001486:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800148a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800148e:	4618      	mov	r0, r3
 8001490:	2320      	movs	r3, #32
 8001492:	461a      	mov	r2, r3
 8001494:	2100      	movs	r1, #0
 8001496:	f006 f9db 	bl	8007850 <memset>
  LinCommunication_t lin                        = {0};
 800149a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800149e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014a2:	461a      	mov	r2, r3
 80014a4:	2300      	movs	r3, #0
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	6053      	str	r3, [r2, #4]
  // ENUMS:
  MainStates_e  mainStates;
  Connections_e connections;

  // Adds connection data for each adc channel:
  can[0] = inits_canInit(&hcan1, can[0]);
 80014aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80014ae:	f5a3 7682 	sub.w	r6, r3, #260	; 0x104
 80014b2:	463c      	mov	r4, r7
 80014b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80014b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014bc:	466d      	mov	r5, sp
 80014be:	f103 0208 	add.w	r2, r3, #8
 80014c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ca:	cb0c      	ldmia	r3, {r2, r3}
 80014cc:	4981      	ldr	r1, [pc, #516]	; (80016d4 <main+0x338>)
 80014ce:	4620      	mov	r0, r4
 80014d0:	f001 fb60 	bl	8002b94 <inits_canInit>
 80014d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80014d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014dc:	4634      	mov	r4, r6
 80014de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can[1] = inits_canInit(&hcan2, can[1]);
 80014e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80014e8:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 80014ec:	463d      	mov	r5, r7
 80014ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80014f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014f6:	466e      	mov	r6, sp
 80014f8:	f103 0218 	add.w	r2, r3, #24
 80014fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001500:	e886 0003 	stmia.w	r6, {r0, r1}
 8001504:	3310      	adds	r3, #16
 8001506:	cb0c      	ldmia	r3, {r2, r3}
 8001508:	4973      	ldr	r1, [pc, #460]	; (80016d8 <main+0x33c>)
 800150a:	4628      	mov	r0, r5
 800150c:	f001 fb42 	bl	8002b94 <inits_canInit>
 8001510:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001514:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001518:	3410      	adds	r4, #16
 800151a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  lin    = inits_linInit(lin);
 8001520:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001524:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8001528:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800152c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001530:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001534:	f001 fb6c 	bl	8002c10 <inits_linInit>

  // COUNTERS:
  uint8_t testCounter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
  uint8_t connTested = 0; // Connection number in an array
 800153e:	2300      	movs	r3, #0
 8001540:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138

  while(1) // Repeats the test twice
  {
    connTested  = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
    mainStates  = MainStates_GET_UART_CONNECTION_REQUESTS;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    connections = Connections_CAN; // Resets the connection to CAN, before checking LIN:
 8001550:	2300      	movs	r3, #0
 8001552:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
    while(connTested < TOTAL_CONNECTIONS)
 8001556:	e0e6      	b.n	8001726 <main+0x38a>
    {
      switch(mainStates)
 8001558:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800155c:	2b02      	cmp	r3, #2
 800155e:	f000 808a 	beq.w	8001676 <main+0x2da>
 8001562:	2b02      	cmp	r3, #2
 8001564:	f300 80df 	bgt.w	8001726 <main+0x38a>
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <main+0x1d6>
 800156c:	2b01      	cmp	r3, #1
 800156e:	d031      	beq.n	80015d4 <main+0x238>
 8001570:	e0d9      	b.n	8001726 <main+0x38a>
      {
          case MainStates_GET_UART_CONNECTION_REQUESTS:
            switch(connections)
 8001572:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <main+0x1ee>
 800157a:	2b01      	cmp	r3, #1
 800157c:	d019      	beq.n	80015b2 <main+0x216>
 800157e:	e022      	b.n	80015c6 <main+0x22a>
            {
              case Connections_CAN:
                while(gUartConnRequest != can[connTested].uartRx) // Waits for CAN1 CAN2 reqest
                {
                  // Keeps on receiving Uart bytes if the request was not received:
                  HAL_UART_Receive_DMA(&huart1, &gUartConnRequest, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	4951      	ldr	r1, [pc, #324]	; (80016c8 <main+0x32c>)
 8001584:	4851      	ldr	r0, [pc, #324]	; (80016cc <main+0x330>)
 8001586:	f005 fbda 	bl	8006d3e <HAL_UART_Receive_DMA>
                while(gUartConnRequest != can[connTested].uartRx) // Waits for CAN1 CAN2 reqest
 800158a:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800158e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001592:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	3305      	adds	r3, #5
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <main+0x32c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d1ec      	bne.n	8001580 <main+0x1e4>
                }
                break;
 80015a6:	e00e      	b.n	80015c6 <main+0x22a>
              case Connections_LIN:
                while(gUartConnRequest != lin.uartRx) // Waits for LIN reqest
                {
                  // Keeps on receiving Uart bytes if the request was not received:
                  HAL_UART_Receive_DMA(&huart1, &gUartConnRequest, 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	4947      	ldr	r1, [pc, #284]	; (80016c8 <main+0x32c>)
 80015ac:	4847      	ldr	r0, [pc, #284]	; (80016cc <main+0x330>)
 80015ae:	f005 fbc6 	bl	8006d3e <HAL_UART_Receive_DMA>
                while(gUartConnRequest != lin.uartRx) // Waits for LIN reqest
 80015b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <main+0x32c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1f1      	bne.n	80015a8 <main+0x20c>
                }
                break;
 80015c4:	bf00      	nop
            }
            gUartConnRequest = RESET_VALUE;                  // Resets the received value request:
 80015c6:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <main+0x32c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
            mainStates = MainStates_CHECK_CONNECTION_STATUS; // Goes to the next state
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
            break;
 80015d2:	e0a8      	b.n	8001726 <main+0x38a>
          case MainStates_CHECK_CONNECTION_STATUS:
            switch(connections) // Transmits data from requested connection
 80015d4:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <main+0x246>
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d03b      	beq.n	8001658 <main+0x2bc>
 80015e0:	e045      	b.n	800166e <main+0x2d2>
            {
              case Connections_CAN:
                // Sends can message:
                canTx_sendMsg(can[connTested].canId, can[connTested].canMsg, can[connTested].pCan);
 80015e2:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80015e6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80015ea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80015f8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80015fc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	7819      	ldrb	r1, [r3, #0]
 8001608:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800160c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001610:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	330c      	adds	r3, #12
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	f001 fa8d 	bl	8002b3c <canTx_sendMsg>
                // Checks status of connection by checking the received mesage from the filter
                can[connTested].bIsConnected = canRx_isCanOk(can[connTested].canMsg);
 8001622:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8001626:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800162a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	3304      	adds	r3, #4
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f897 4138 	ldrb.w	r4, [r7, #312]	; 0x138
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fa10 	bl	8002a60 <canRx_isCanOk>
 8001640:	4603      	mov	r3, r0
 8001642:	4619      	mov	r1, r3
 8001644:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001648:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800164c:	0123      	lsls	r3, r4, #4
 800164e:	4413      	add	r3, r2
 8001650:	3308      	adds	r3, #8
 8001652:	460a      	mov	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
                break;
 8001656:	e00a      	b.n	800166e <main+0x2d2>
              case Connections_LIN:
                lin.bIsConnected = uartRx_isLinOk(&huart2); // Checked received messages from LIN connection
 8001658:	4820      	ldr	r0, [pc, #128]	; (80016dc <main+0x340>)
 800165a:	f001 fb25 	bl	8002ca8 <uartRx_isLinOk>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001666:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800166a:	70da      	strb	r2, [r3, #3]
                break;
 800166c:	bf00      	nop
            }
            mainStates = MainStates_SEND_CONNECTION_STATUS; // Goes to the next state
 800166e:	2302      	movs	r3, #2
 8001670:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
            break;
 8001674:	e057      	b.n	8001726 <main+0x38a>

          case MainStates_SEND_CONNECTION_STATUS:
            // Sends a status message
            switch(connections)
 8001676:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <main+0x2e8>
 800167e:	2b01      	cmp	r3, #1
 8001680:	d02e      	beq.n	80016e0 <main+0x344>
 8001682:	e040      	b.n	8001706 <main+0x36a>
            {
            case Connections_CAN:
              // Send CAN1 or CAN2 connection status byte (Good or Bad)
              uart_sendStatus(can[connTested].bIsConnected, can[connTested].uartTxMsgOk, can[connTested].uartTxMsgError, &huart1);
 8001684:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8001688:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800168c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	3308      	adds	r3, #8
 8001696:	7818      	ldrb	r0, [r3, #0]
 8001698:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800169c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80016a0:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	4413      	add	r3, r2
 80016a8:	3306      	adds	r3, #6
 80016aa:	7819      	ldrb	r1, [r3, #0]
 80016ac:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80016b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80016b4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	3307      	adds	r3, #7
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <main+0x330>)
 80016c2:	f001 fb1d 	bl	8002d00 <uart_sendStatus>
              break;
 80016c6:	e01e      	b.n	8001706 <main+0x36a>
 80016c8:	2000024c 	.word	0x2000024c
 80016cc:	20000138 	.word	0x20000138
 80016d0:	20000028 	.word	0x20000028
 80016d4:	20000058 	.word	0x20000058
 80016d8:	20000080 	.word	0x20000080
 80016dc:	2000017c 	.word	0x2000017c

            case Connections_LIN:
              // Send LIN connection status byte (Good or Bad)
              uart_sendStatus(lin.bIsConnected, lin.uartTxMsgOk, lin.uartTxMsgError,&huart1);
 80016e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016e8:	78d8      	ldrb	r0, [r3, #3]
 80016ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016f2:	7859      	ldrb	r1, [r3, #1]
 80016f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016fc:	789a      	ldrb	r2, [r3, #2]
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <main+0x3f0>)
 8001700:	f001 fafe 	bl	8002d00 <uart_sendStatus>
              break;
 8001704:	bf00      	nop
            }
            connTested++;  // Increments a variable, that checks the next connection
 8001706:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800170a:	3301      	adds	r3, #1
 800170c:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
            if(connTested == TOTAL_CAN_CONNECTIONS) // Switches to LIN, once all CAN modules have been tested:
 8001710:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8001714:	2b02      	cmp	r3, #2
 8001716:	d102      	bne.n	800171e <main+0x382>
            {
              connections = Connections_LIN; // Selelects the LIN enum variable
 8001718:	2301      	movs	r3, #1
 800171a:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
            }
            mainStates = MainStates_GET_UART_CONNECTION_REQUESTS; // Goes to the first state:
 800171e:	2300      	movs	r3, #0
 8001720:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
            break;
 8001724:	bf00      	nop
    while(connTested < TOTAL_CONNECTIONS)
 8001726:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800172a:	2b02      	cmp	r3, #2
 800172c:	f67f af14 	bls.w	8001558 <main+0x1bc>
          }
        }
        testCounter++;
 8001730:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001734:	3301      	adds	r3, #1
 8001736:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
        if(testCounter == 2)
 800173a:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800173e:	2b02      	cmp	r3, #2
 8001740:	d000      	beq.n	8001744 <main+0x3a8>
    connTested  = 0;
 8001742:	e6ff      	b.n	8001544 <main+0x1a8>
        {
          break;
 8001744:	bf00      	nop
        }
   }
   while(gUartConnRequest != 'R'){}
 8001746:	bf00      	nop
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <main+0x3f4>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b52      	cmp	r3, #82	; 0x52
 800174e:	d1fb      	bne.n	8001748 <main+0x3ac>
   adc_sendAdcData(adcChannel, &huart1, &hadc1, 2);
 8001750:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001754:	2302      	movs	r3, #2
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <main+0x3f8>)
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <main+0x3f0>)
 800175a:	f000 ff41 	bl	80025e0 <adc_sendAdcData>

   HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, 1);
 800175e:	2201      	movs	r2, #1
 8001760:	2106      	movs	r1, #6
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <main+0x3fc>)
 8001764:	f003 fed6 	bl	8005514 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, RELAY_DRIVETRAIN_Pin | RELAY_IGN_Pin, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	f640 0102 	movw	r1, #2050	; 0x802
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <main+0x400>)
 8001770:	f003 fed0 	bl	8005514 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, RELAY_12V_Pin, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2110      	movs	r1, #16
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <main+0x404>)
 800177a:	f003 fecb 	bl	8005514 <HAL_GPIO_WritePin>
 800177e:	2300      	movs	r3, #0
/* USER CODE END WHILE */
/* USER CODE BEGIN 3 */
/* USER CODE END 3 */
}
 8001780:	4618      	mov	r0, r3
 8001782:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001786:	46bd      	mov	sp, r7
 8001788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800178c:	20000138 	.word	0x20000138
 8001790:	2000024c 	.word	0x2000024c
 8001794:	20000028 	.word	0x20000028
 8001798:	40011000 	.word	0x40011000
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	40010800 	.word	0x40010800

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b09c      	sub	sp, #112	; 0x70
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ae:	2238      	movs	r2, #56	; 0x38
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f006 f84c 	bl	8007850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2220      	movs	r2, #32
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f006 f83e 	bl	8007850 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017de:	2300      	movs	r3, #0
 80017e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fee6 	bl	80055bc <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80017f6:	f000 fa3f 	bl	8001c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017fe:	2301      	movs	r3, #1
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f004 f9e7 	bl	8005be8 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001820:	f000 fa2a 	bl	8001c78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001824:	2302      	movs	r3, #2
 8001826:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f004 fbf2 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800183a:	f000 fa1d 	bl	8001c78 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <SystemClock_Config+0xa8>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3770      	adds	r7, #112	; 0x70
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	42420070 	.word	0x42420070

08001850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /* USER CODE BEGIN ADC1_Init 2 */
  hadc1.Instance = ADC1;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_ADC1_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_ADC1_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_ADC1_Init+0x4c>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_ADC1_Init+0x4c>)
 8001864:	2201      	movs	r2, #1
 8001866:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_ADC1_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_ADC1_Init+0x4c>)
 8001870:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_ADC1_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_ADC1_Init+0x4c>)
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <MX_ADC1_Init+0x4c>)
 8001884:	f001 fb06 	bl	8002e94 <HAL_ADC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 800188e:	f000 f9f3 	bl	8001c78 <Error_Handler>
  }
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001892:	4802      	ldr	r0, [pc, #8]	; (800189c <MX_ADC1_Init+0x4c>)
 8001894:	f002 f82c 	bl	80038f0 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000028 	.word	0x20000028
 80018a0:	40012400 	.word	0x40012400

080018a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_CAN1_Init+0x64>)
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <MX_CAN1_Init+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <MX_CAN1_Init+0x64>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_CAN1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <MX_CAN1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_CAN1_Init+0x64>)
 80018c2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80018c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_CAN1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_CAN1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_CAN1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_CAN1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_CAN1_Init+0x64>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_CAN1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_CAN1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_CAN1_Init+0x64>)
 80018f4:	f002 f8b1 	bl	8003a5a <HAL_CAN_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018fe:	f000 f9bb 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000058 	.word	0x20000058
 800190c:	40006400 	.word	0x40006400

08001910 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_CAN2_Init+0x64>)
 8001916:	4a18      	ldr	r2, [pc, #96]	; (8001978 <MX_CAN2_Init+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_CAN2_Init+0x64>)
 800191c:	2202      	movs	r2, #2
 800191e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_CAN2_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_CAN2_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_CAN2_Init+0x64>)
 800192e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001932:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_CAN2_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_CAN2_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_CAN2_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_CAN2_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_CAN2_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_CAN2_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_CAN2_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_CAN2_Init+0x64>)
 8001960:	f002 f87b 	bl	8003a5a <HAL_CAN_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800196a:	f000 f985 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000080 	.word	0x20000080
 8001978:	40006800 	.word	0x40006800

0800197c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_TIM6_Init+0x64>)
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <MX_TIM6_Init+0x68>)
 800198e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11999;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_TIM6_Init+0x64>)
 8001992:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001996:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_TIM6_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019a0:	2232      	movs	r2, #50	; 0x32
 80019a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019ac:	f004 fdc8 	bl	8006540 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80019b6:	f000 f95f 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019c8:	f004 fffc 	bl	80069c4 <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80019d2:	f000 f951 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200000a8 	.word	0x200000a8
 80019e4:	40001000 	.word	0x40001000

080019e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_TIM7_Init+0x68>)
 80019f8:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <MX_TIM7_Init+0x6c>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 12000;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_TIM7_Init+0x68>)
 80019fe:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001a02:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_TIM7_Init+0x68>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_TIM7_Init+0x68>)
 8001a0c:	2264      	movs	r2, #100	; 0x64
 8001a0e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_TIM7_Init+0x68>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a16:	480e      	ldr	r0, [pc, #56]	; (8001a50 <MX_TIM7_Init+0x68>)
 8001a18:	f004 fd92 	bl	8006540 <HAL_TIM_Base_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a22:	f000 f929 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM7_Init+0x68>)
 8001a34:	f004 ffc6 	bl	80069c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a3e:	f000 f91b 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM7_Init+0x68>)
 8001a44:	f004 fdcc 	bl	80065e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200000f0 	.word	0x200000f0
 8001a54:	40001400 	.word	0x40001400

08001a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <MX_USART1_UART_Init+0x50>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_USART1_UART_Init+0x4c>)
 8001a90:	f005 f810 	bl	8006ab4 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a9a:	f000 f8ed 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000138 	.word	0x20000138
 8001aa8:	40013800 	.word	0x40013800

08001aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001ab2:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001ab8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8001adc:	2120      	movs	r1, #32
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_USART2_UART_Init+0x48>)
 8001ae0:	f005 f835 	bl	8006b4e <HAL_LIN_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART2_UART_Init+0x42>
  {
    Error_Handler();
 8001aea:	f000 f8c5 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000017c 	.word	0x2000017c
 8001af8:	40004400 	.word	0x40004400

08001afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_DMA_Init+0x48>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <MX_DMA_Init+0x48>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6153      	str	r3, [r2, #20]
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <MX_DMA_Init+0x48>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f002 febb 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b24:	200f      	movs	r0, #15
 8001b26:	f002 fed4 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2010      	movs	r0, #16
 8001b30:	f002 feb3 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b34:	2010      	movs	r0, #16
 8001b36:	f002 fecc 	bl	80048d2 <HAL_NVIC_EnableIRQ>

}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <MX_GPIO_Init+0x11c>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	210e      	movs	r1, #14
 8001bc0:	4829      	ldr	r0, [pc, #164]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001bc2:	f003 fca7 	bl	8005514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_12V_GPIO_Port, RELAY_12V_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2110      	movs	r1, #16
 8001bca:	4828      	ldr	r0, [pc, #160]	; (8001c6c <MX_GPIO_Init+0x124>)
 8001bcc:	f003 fca2 	bl	8005514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_DRIVETRAIN_Pin|RELAY_IGN_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f640 0102 	movw	r1, #2050	; 0x802
 8001bd6:	4826      	ldr	r0, [pc, #152]	; (8001c70 <MX_GPIO_Init+0x128>)
 8001bd8:	f003 fc9c 	bl	8005514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001bdc:	230e      	movs	r3, #14
 8001bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	481d      	ldr	r0, [pc, #116]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001bf4:	f003 fb0a 	bl	800520c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_12V_Pin */
  GPIO_InitStruct.Pin = RELAY_12V_Pin;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_12V_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4817      	ldr	r0, [pc, #92]	; (8001c6c <MX_GPIO_Init+0x124>)
 8001c10:	f003 fafc 	bl	800520c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_GPIO_Init+0x12c>)
 8001c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4811      	ldr	r0, [pc, #68]	; (8001c6c <MX_GPIO_Init+0x124>)
 8001c28:	f003 faf0 	bl	800520c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_DRIVETRAIN_Pin RELAY_IGN_Pin */
  GPIO_InitStruct.Pin = RELAY_DRIVETRAIN_Pin|RELAY_IGN_Pin;
 8001c2c:	f640 0302 	movw	r3, #2050	; 0x802
 8001c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <MX_GPIO_Init+0x128>)
 8001c46:	f003 fae1 	bl	800520c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2017      	movs	r0, #23
 8001c50:	f002 fe23 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c54:	2017      	movs	r0, #23
 8001c56:	f002 fe3c 	bl	80048d2 <HAL_NVIC_EnableIRQ>

}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40010800 	.word	0x40010800
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	10310000 	.word	0x10310000

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin, 1);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4801      	ldr	r0, [pc, #4]	; (8001c88 <Error_Handler+0x10>)
 8001c82:	f003 fc47 	bl	8005514 <HAL_GPIO_WritePin>
  while(1);
 8001c86:	e7fe      	b.n	8001c86 <Error_Handler+0xe>
 8001c88:	40011000 	.word	0x40011000

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6193      	str	r3, [r2, #24]
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_MspInit+0x60>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_MspInit+0x60>)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000

08001cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <HAL_ADC_MspInit+0xd4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d155      	bne.n	8001dbc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a2c      	ldr	r2, [pc, #176]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_ADC_MspInit+0xd8>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_SENSOR_Pin;
 8001d70:	2320      	movs	r3, #32
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d74:	2303      	movs	r3, #3
 8001d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4813      	ldr	r0, [pc, #76]	; (8001dcc <HAL_ADC_MspInit+0xdc>)
 8001d80:	f003 fa44 	bl	800520c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_DT_14_Pin;
 8001d84:	2320      	movs	r3, #32
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_DT_14_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	4619      	mov	r1, r3
 8001d92:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <HAL_ADC_MspInit+0xe0>)
 8001d94:	f003 fa3a 	bl	800520c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_DT_23_Pin;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_DT_23_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4619      	mov	r1, r3
 8001da6:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <HAL_ADC_MspInit+0xe4>)
 8001da8:	f003 fa30 	bl	800520c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	2012      	movs	r0, #18
 8001db2:	f002 fd72 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001db6:	2012      	movs	r0, #18
 8001db8:	f002 fd8b 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40012400 	.word	0x40012400
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40010c00 	.word	0x40010c00

08001dd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a68      	ldr	r2, [pc, #416]	; (8001f94 <HAL_CAN_MspInit+0x1bc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d165      	bne.n	8001ec4 <HAL_CAN_MspInit+0xec>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001df8:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_CAN_MspInit+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a66      	ldr	r2, [pc, #408]	; (8001f98 <HAL_CAN_MspInit+0x1c0>)
 8001e00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_CAN_MspInit+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10b      	bne.n	8001e22 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e0a:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a63      	ldr	r2, [pc, #396]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e14:	61d3      	str	r3, [r2, #28]
 8001e16:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6193      	str	r3, [r2, #24]
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4854      	ldr	r0, [pc, #336]	; (8001fa0 <HAL_CAN_MspInit+0x1c8>)
 8001e50:	f003 f9dc 	bl	800520c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	484d      	ldr	r0, [pc, #308]	; (8001fa0 <HAL_CAN_MspInit+0x1c8>)
 8001e6a:	f003 f9cf 	bl	800520c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_CAN_MspInit+0x1cc>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8c:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <HAL_CAN_MspInit+0x1cc>)
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2013      	movs	r0, #19
 8001e98:	f002 fcff 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001e9c:	2013      	movs	r0, #19
 8001e9e:	f002 fd18 	bl	80048d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2014      	movs	r0, #20
 8001ea8:	f002 fcf7 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001eac:	2014      	movs	r0, #20
 8001eae:	f002 fd10 	bl	80048d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2016      	movs	r0, #22
 8001eb8:	f002 fcef 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001ebc:	2016      	movs	r0, #22
 8001ebe:	f002 fd08 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001ec2:	e063      	b.n	8001f8c <HAL_CAN_MspInit+0x1b4>
  else if(hcan->Instance==CAN2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a37      	ldr	r2, [pc, #220]	; (8001fa8 <HAL_CAN_MspInit+0x1d0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d15e      	bne.n	8001f8c <HAL_CAN_MspInit+0x1b4>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a32      	ldr	r2, [pc, #200]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_CAN_MspInit+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <HAL_CAN_MspInit+0x1c0>)
 8001eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_CAN_MspInit+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10b      	bne.n	8001f10 <HAL_CAN_MspInit+0x138>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f02:	61d3      	str	r3, [r2, #28]
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_CAN_MspInit+0x1c4>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4818      	ldr	r0, [pc, #96]	; (8001fa0 <HAL_CAN_MspInit+0x1c8>)
 8001f3e:	f003 f965 	bl	800520c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <HAL_CAN_MspInit+0x1c8>)
 8001f58:	f003 f958 	bl	800520c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	203f      	movs	r0, #63	; 0x3f
 8001f62:	f002 fc9a 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001f66:	203f      	movs	r0, #63	; 0x3f
 8001f68:	f002 fcb3 	bl	80048d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2041      	movs	r0, #65	; 0x41
 8001f72:	f002 fc92 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001f76:	2041      	movs	r0, #65	; 0x41
 8001f78:	f002 fcab 	bl	80048d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2042      	movs	r0, #66	; 0x42
 8001f82:	f002 fc8a 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8001f86:	2042      	movs	r0, #66	; 0x42
 8001f88:	f002 fca3 	bl	80048d2 <HAL_NVIC_EnableIRQ>
}
 8001f8c:	bf00      	nop
 8001f8e:	3730      	adds	r7, #48	; 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40006400 	.word	0x40006400
 8001f98:	2000025c 	.word	0x2000025c
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40006800 	.word	0x40006800

08001fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a16      	ldr	r2, [pc, #88]	; (8002014 <HAL_TIM_Base_MspInit+0x68>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_TIM_Base_MspInit+0x6c>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <HAL_TIM_Base_MspInit+0x6c>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_TIM_Base_MspInit+0x6c>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001fd6:	e018      	b.n	800200a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_TIM_Base_MspInit+0x70>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d113      	bne.n	800200a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0x6c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_TIM_Base_MspInit+0x6c>)
 8001fe8:	f043 0320 	orr.w	r3, r3, #32
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_TIM_Base_MspInit+0x6c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2037      	movs	r0, #55	; 0x37
 8002000:	f002 fc4b 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002004:	2037      	movs	r0, #55	; 0x37
 8002006:	f002 fc64 	bl	80048d2 <HAL_NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40001000 	.word	0x40001000
 8002018:	40021000 	.word	0x40021000
 800201c:	40001400 	.word	0x40001400

08002020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <HAL_UART_MspInit+0x1b0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d160      	bne.n	8002102 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a63      	ldr	r2, [pc, #396]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 8002046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a5d      	ldr	r2, [pc, #372]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4619      	mov	r1, r3
 8002084:	4854      	ldr	r0, [pc, #336]	; (80021d8 <HAL_UART_MspInit+0x1b8>)
 8002086:	f003 f8c1 	bl	800520c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0318 	add.w	r3, r7, #24
 800209c:	4619      	mov	r1, r3
 800209e:	484e      	ldr	r0, [pc, #312]	; (80021d8 <HAL_UART_MspInit+0x1b8>)
 80020a0:	f003 f8b4 	bl	800520c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020a4:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020a6:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_UART_MspInit+0x1c0>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020bc:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c2:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020c8:	4b44      	ldr	r3, [pc, #272]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020ce:	4b43      	ldr	r3, [pc, #268]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020d4:	4841      	ldr	r0, [pc, #260]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020d6:	f002 fc17 	bl	8004908 <HAL_DMA_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80020e0:	f7ff fdca 	bl	8001c78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3d      	ldr	r2, [pc, #244]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
 80020ea:	4a3c      	ldr	r2, [pc, #240]	; (80021dc <HAL_UART_MspInit+0x1bc>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	2025      	movs	r0, #37	; 0x25
 80020f6:	f002 fbd0 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020fa:	2025      	movs	r0, #37	; 0x25
 80020fc:	f002 fbe9 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002100:	e062      	b.n	80021c8 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a37      	ldr	r2, [pc, #220]	; (80021e4 <HAL_UART_MspInit+0x1c4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d15d      	bne.n	80021c8 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 8002112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_UART_MspInit+0x1b4>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800213c:	2304      	movs	r3, #4
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	4619      	mov	r1, r3
 800214e:	4822      	ldr	r0, [pc, #136]	; (80021d8 <HAL_UART_MspInit+0x1b8>)
 8002150:	f003 f85c 	bl	800520c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002154:	2308      	movs	r3, #8
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	4619      	mov	r1, r3
 8002166:	481c      	ldr	r0, [pc, #112]	; (80021d8 <HAL_UART_MspInit+0x1b8>)
 8002168:	f003 f850 	bl	800520c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 800216e:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <HAL_UART_MspInit+0x1cc>)
 8002170:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800219c:	4812      	ldr	r0, [pc, #72]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 800219e:	f002 fbb3 	bl	8004908 <HAL_DMA_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80021a8:	f7ff fd66 	bl	8001c78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
 80021b2:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <HAL_UART_MspInit+0x1c8>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	2026      	movs	r0, #38	; 0x26
 80021be:	f002 fb6c 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021c2:	2026      	movs	r0, #38	; 0x26
 80021c4:	f002 fb85 	bl	80048d2 <HAL_NVIC_EnableIRQ>
}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40013800 	.word	0x40013800
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010800 	.word	0x40010800
 80021dc:	200001c0 	.word	0x200001c0
 80021e0:	40020058 	.word	0x40020058
 80021e4:	40004400 	.word	0x40004400
 80021e8:	20000204 	.word	0x20000204
 80021ec:	4002006c 	.word	0x4002006c

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <NMI_Handler+0x4>

080021f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <MemManage_Handler+0x4>

08002202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <UsageFault_Handler+0x4>

0800220e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002236:	f000 fded 	bl	8002e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA1_Channel5_IRQHandler+0x10>)
 8002246:	f002 fd77 	bl	8004d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200001c0 	.word	0x200001c0

08002254 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <DMA1_Channel6_IRQHandler+0x10>)
 800225a:	f002 fd6d 	bl	8004d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000204 	.word	0x20000204

08002268 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <ADC1_2_IRQHandler+0x10>)
 800226e:	f001 f8d5 	bl	800341c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000028 	.word	0x20000028

0800227c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <CAN1_TX_IRQHandler+0x10>)
 8002282:	f002 f819 	bl	80042b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000058 	.word	0x20000058

08002290 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <CAN1_RX0_IRQHandler+0x10>)
 8002296:	f002 f80f 	bl	80042b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000058 	.word	0x20000058

080022a4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <CAN1_SCE_IRQHandler+0x10>)
 80022aa:	f002 f805 	bl	80042b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000058 	.word	0x20000058

080022b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80022bc:	2080      	movs	r0, #128	; 0x80
 80022be:	f003 f95b 	bl	8005578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <USART1_IRQHandler+0x10>)
 80022ce:	f004 fd67 	bl	8006da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000138 	.word	0x20000138

080022dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <USART2_IRQHandler+0x10>)
 80022e2:	f004 fd5d 	bl	8006da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000017c 	.word	0x2000017c

080022f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <TIM7_IRQHandler+0x10>)
 80022f6:	f004 f9cd 	bl	8006694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200000f0 	.word	0x200000f0

08002304 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <CAN2_TX_IRQHandler+0x10>)
 800230a:	f001 ffd5 	bl	80042b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000080 	.word	0x20000080

08002318 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <CAN2_RX1_IRQHandler+0x10>)
 800231e:	f001 ffcb 	bl	80042b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000080 	.word	0x20000080

0800232c <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <CAN2_SCE_IRQHandler+0x10>)
 8002332:	f001 ffc1 	bl	80042b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000080 	.word	0x20000080

08002340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <inits_adcChannelInit>:
static void adc_VoltageToString(float rawValue, char strValue[ADC_LENGTH_STR], int decimalNumCount);
AdcChannels_t inits_adcChannelInit(uint8_t channelId, AdcChannels_t adcChannel);
//----------------

AdcChannels_t inits_adcChannelInit(uint8_t channelId, AdcChannels_t adcChannel)
{
 800234c:	b082      	sub	sp, #8
 800234e:	b4b0      	push	{r4, r5, r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	f107 0018 	add.w	r0, r7, #24
 800235a:	e880 000c 	stmia.w	r0, {r2, r3}
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
  if(channelId == ADC_CURRENT_LOAD)
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <inits_adcChannelInit+0x28>
  {
    adcChannel.minValue = CURRENT_LOAD_MIN;
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
    adcChannel.maxValue = CURRENT_LOAD_MAX;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <inits_adcChannelInit+0x94>)
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
 8002372:	e020      	b.n	80023b6 <inits_adcChannelInit+0x6a>
  }
  else if(channelId == ADC_CURRENT_STANDBY)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d105      	bne.n	8002386 <inits_adcChannelInit+0x3a>
  {
    adcChannel.minValue = -1;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <inits_adcChannelInit+0x98>)
 800237c:	63fb      	str	r3, [r7, #60]	; 0x3c
    adcChannel.maxValue = 1;
 800237e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
 8002384:	e017      	b.n	80023b6 <inits_adcChannelInit+0x6a>
  }
  else if(channelId == ADC_CURRENT_LOAD_REPEAT)
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d105      	bne.n	8002398 <inits_adcChannelInit+0x4c>
  {
    adcChannel.minValue = CURRENT_LOAD_AGAIN_MIN;
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
    adcChannel.maxValue = CURRENT_LOAD_AGAIN_MAX;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <inits_adcChannelInit+0x94>)
 8002394:	643b      	str	r3, [r7, #64]	; 0x40
 8002396:	e00e      	b.n	80023b6 <inits_adcChannelInit+0x6a>
  }
  else if(channelId == ADC_DT23)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d104      	bne.n	80023a8 <inits_adcChannelInit+0x5c>
  {
    adcChannel.minValue = VOLTAGE_DT23_MIN;
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <inits_adcChannelInit+0x9c>)
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    adcChannel.maxValue = VOLTAGE_DT23_MAX;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <inits_adcChannelInit+0xa0>)
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
 80023a6:	e006      	b.n	80023b6 <inits_adcChannelInit+0x6a>
  }
  else if(channelId == ADC_DT14)
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d103      	bne.n	80023b6 <inits_adcChannelInit+0x6a>
  {
    adcChannel.minValue = VOLTAGE_DT14_MIN;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <inits_adcChannelInit+0xa4>)
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    adcChannel.maxValue = VOLTAGE_DT14_MAX;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <inits_adcChannelInit+0xa8>)
 80023b4:	643b      	str	r3, [r7, #64]	; 0x40
  }
  adcChannel.id = channelId;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	763b      	strb	r3, [r7, #24]
  return adcChannel;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	461d      	mov	r5, r3
 80023be:	f107 0418 	add.w	r4, r7, #24
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bcb0      	pop	{r4, r5, r7}
 80023da:	b002      	add	sp, #8
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	3ecccccd 	.word	0x3ecccccd
 80023e4:	bf800000 	.word	0xbf800000
 80023e8:	40366666 	.word	0x40366666
 80023ec:	40433333 	.word	0x40433333
 80023f0:	402d70a4 	.word	0x402d70a4
 80023f4:	4033d70a 	.word	0x4033d70a

080023f8 <adc_select>:

static void adc_select(ADC_HandleTypeDef *hAdc1, uint8_t adcChannel)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
  if(adcChannel == ADC_CURRENT_LOAD || adcChannel == ADC_CURRENT_STANDBY || adcChannel == ADC_CURRENT_LOAD_REPEAT)
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <adc_select+0x2a>
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d002      	beq.n	8002422 <adc_select+0x2a>
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d102      	bne.n	8002428 <adc_select+0x30>
  {
    sConfig.Channel = ADC_CHANNEL_5;
 8002422:	2305      	movs	r3, #5
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e00a      	b.n	800243e <adc_select+0x46>
  }
  else if(adcChannel == ADC_DT23)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d102      	bne.n	8002434 <adc_select+0x3c>
  {
    sConfig.Channel = ADC_CHANNEL_8;
 800242e:	2308      	movs	r3, #8
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e004      	b.n	800243e <adc_select+0x46>
  }
  else if(adcChannel == ADC_DT14)
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d101      	bne.n	800243e <adc_select+0x46>
  {
    sConfig.Channel = ADC_CHANNEL_15;
 800243a:	230f      	movs	r3, #15
 800243c:	60fb      	str	r3, [r7, #12]
  }
  sConfig.Rank         = ADC_REGULAR_RANK_1;
 800243e:	2301      	movs	r3, #1
 8002440:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002442:	2307      	movs	r3, #7
 8002444:	617b      	str	r3, [r7, #20]
  if(HAL_ADC_ConfigChannel(hAdc1, &sConfig) != HAL_OK)
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f001 f8bb 	bl	80035c8 <HAL_ADC_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <adc_select+0x64>
  {
    Error_Handler();
 8002458:	f7ff fc0e 	bl	8001c78 <Error_Handler>
  }
}
 800245c:	bf00      	nop
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <adc_getDecimalValue>:

static uint32_t adc_getDecimalValue(ADC_HandleTypeDef *hAdc1, uint8_t adcChannel)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  uint32_t adcMeasuredVoltage;

  adc_select(hAdc1,adcChannel);
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	4619      	mov	r1, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffbf 	bl	80023f8 <adc_select>
  HAL_ADC_Start(hAdc1);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fde2 	bl	8003044 <HAL_ADC_Start>

  // Make a function for measuring these thingies:
  if(HAL_ADC_PollForConversion(hAdc1, 100) == HAL_OK)
 8002480:	2164      	movs	r1, #100	; 0x64
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 feb8 	bl	80031f8 <HAL_ADC_PollForConversion>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <adc_getDecimalValue+0x38>
  {
     // Gets the Value:
    adcMeasuredVoltage = HAL_ADC_GetValue(hAdc1);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 ffb8 	bl	8003404 <HAL_ADC_GetValue>
 8002494:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(hAdc1);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fe82 	bl	80031a0 <HAL_ADC_Stop>
  }
  return (uint32_t)adcMeasuredVoltage;
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <adc_VoltageToString>:

static void adc_VoltageToString(float rawValue, char strValue[ADC_LENGTH_STR], int decimalNumCount)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b092      	sub	sp, #72	; 0x48
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  float multiplier  = 1.0;
 80024b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024b8:	647b      	str	r3, [r7, #68]	; 0x44
  int   digitNumLen = decimalNumCount+1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3301      	adds	r3, #1
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
  int   valueInt;
  // Ex: 1.234 is turned into "1234"
  // Ex: 0.234 is turned into "234"
  char  strDecimals[20] = {0};
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]

  // Ex: 1234 is turned  into "1234"
  // Ex: 234 is turned   into "0234"
  char  strFull[ADC_LENGTH_STR] = {0};
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	809a      	strh	r2, [r3, #4]

  for(uint8_t i = 0;  i < decimalNumCount; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80024e6:	e00a      	b.n	80024fe <adc_VoltageToString+0x56>
  {
      multiplier*=10.0;
 80024e8:	493b      	ldr	r1, [pc, #236]	; (80025d8 <adc_VoltageToString+0x130>)
 80024ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80024ec:	f7fe fbd0 	bl	8000c90 <__aeabi_fmul>
 80024f0:	4603      	mov	r3, r0
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
  for(uint8_t i = 0;  i < decimalNumCount; i++)
 80024f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80024f8:	3301      	adds	r3, #1
 80024fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80024fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	dcef      	bgt.n	80024e8 <adc_VoltageToString+0x40>
  }
  rawValue  *=  multiplier;
 8002508:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7fe fbc0 	bl	8000c90 <__aeabi_fmul>
 8002510:	4603      	mov	r3, r0
 8002512:	60fb      	str	r3, [r7, #12]
  valueInt   =  (int)rawValue;
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7fe fd81 	bl	800101c <__aeabi_f2iz>
 800251a:	4603      	mov	r3, r0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
  // Make the int value into a string:
  itoa(valueInt, strDecimals, 10);
 800251e:	f107 0320 	add.w	r3, r7, #32
 8002522:	220a      	movs	r2, #10
 8002524:	4619      	mov	r1, r3
 8002526:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002528:	f005 f990 	bl	800784c <itoa>

  // Add zeros to front of the string, if the value is too small:
  if(digitNumLen-strlen(strDecimals) > 0)
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd fe79 	bl	8000228 <strlen>
 8002536:	4602      	mov	r2, r0
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	429a      	cmp	r2, r3
 800253c:	d023      	beq.n	8002586 <adc_VoltageToString+0xde>
  {
    for(uint8_t i = 0; i < digitNumLen-strlen(strDecimals); i++)
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8002544:	e013      	b.n	800256e <adc_VoltageToString+0xc6>
    {
      strcat(strFull,"0");
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd fe6c 	bl	8000228 <strlen>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4413      	add	r3, r2
 800255a:	4920      	ldr	r1, [pc, #128]	; (80025dc <adc_VoltageToString+0x134>)
 800255c:	461a      	mov	r2, r3
 800255e:	460b      	mov	r3, r1
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	8013      	strh	r3, [r2, #0]
    for(uint8_t i = 0; i < digitNumLen-strlen(strDecimals); i++)
 8002564:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002568:	3301      	adds	r3, #1
 800256a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800256e:	f897 4042 	ldrb.w	r4, [r7, #66]	; 0x42
 8002572:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8002574:	f107 0320 	add.w	r3, r7, #32
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fe55 	bl	8000228 <strlen>
 800257e:	4603      	mov	r3, r0
 8002580:	1aeb      	subs	r3, r5, r3
 8002582:	429c      	cmp	r4, r3
 8002584:	d3df      	bcc.n	8002546 <adc_VoltageToString+0x9e>
    }
  }

  // Combine the values of the integer string and the added zeros on the front:
  // If the value is too small.
  strcat(strFull,strDecimals);
 8002586:	f107 0220 	add.w	r2, r7, #32
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f005 f965 	bl	8007860 <strcat>
  strValue[0] = strFull[0];
 8002596:	7d3a      	ldrb	r2, [r7, #20]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	701a      	strb	r2, [r3, #0]
  strValue[1] = '.';
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	3301      	adds	r3, #1
 80025a0:	222e      	movs	r2, #46	; 0x2e
 80025a2:	701a      	strb	r2, [r3, #0]

  for(int i=1; i<digitNumLen; i++)
 80025a4:	2301      	movs	r3, #1
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a8:	e00c      	b.n	80025c4 <adc_VoltageToString+0x11c>
  {
    strValue[i+1] = strFull[i];
 80025aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ac:	3301      	adds	r3, #1
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	f107 0114 	add.w	r1, r7, #20
 80025b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b8:	440a      	add	r2, r1
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	701a      	strb	r2, [r3, #0]
  for(int i=1; i<digitNumLen; i++)
 80025be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c0:	3301      	adds	r3, #1
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbee      	blt.n	80025aa <adc_VoltageToString+0x102>
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3748      	adds	r7, #72	; 0x48
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdb0      	pop	{r4, r5, r7, pc}
 80025d6:	bf00      	nop
 80025d8:	41200000 	.word	0x41200000
 80025dc:	0800791c 	.word	0x0800791c

080025e0 <adc_sendAdcData>:


bool adc_sendAdcData(AdcChannels_t adcChannel[5], UART_HandleTypeDef *hUart1, ADC_HandleTypeDef *hAdc1, uint8_t testStage)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	70fb      	strb	r3, [r7, #3]
  uint8_t lastTestedConn;
  uint8_t totalConn;
  char    strTotalAdcValue[20] = {0};
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  bool    bCurrentOk = true;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  if(testStage == 1)
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <adc_sendAdcData+0x3a>
  {
    lastTestedConn = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    totalConn = 2;
 8002612:	2302      	movs	r3, #2
 8002614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002618:	e008      	b.n	800262c <adc_sendAdcData+0x4c>
  }
  else if(testStage == 2)
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d105      	bne.n	800262c <adc_sendAdcData+0x4c>
  {
    lastTestedConn = 2;
 8002620:	2302      	movs	r3, #2
 8002622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    totalConn = 3;
 8002626:	2303      	movs	r3, #3
 8002628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  for(uint8_t chNum = lastTestedConn; chNum < totalConn+lastTestedConn; chNum++)
 800262c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002630:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002634:	e180      	b.n	8002938 <adc_sendAdcData+0x358>
  {
    // memset
    memset(adcChannel[chNum].valueString, 0, sizeof(adcChannel[chNum].valueString));
 8002636:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800263a:	222c      	movs	r2, #44	; 0x2c
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	3310      	adds	r3, #16
 8002646:	2214      	movs	r2, #20
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f005 f900 	bl	8007850 <memset>
    memset(strTotalAdcValue, 0, sizeof(strTotalAdcValue));
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	2214      	movs	r2, #20
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f005 f8f9 	bl	8007850 <memset>

    if(chNum == 0)  // If it is a current sensor pin tested
 800265e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <adc_sendAdcData+0x9a>
    {
      HAL_Delay(500);
 8002666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800266a:	f000 fbef 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, RELAY_12V_Pin, 1); // Turns on a source voltage relay
 800266e:	2201      	movs	r2, #1
 8002670:	2110      	movs	r1, #16
 8002672:	48bd      	ldr	r0, [pc, #756]	; (8002968 <adc_sendAdcData+0x388>)
 8002674:	f002 ff4e 	bl	8005514 <HAL_GPIO_WritePin>
 8002678:	e01b      	b.n	80026b2 <adc_sendAdcData+0xd2>
    }
    else if(chNum == 1 && bCurrentOk)
 800267a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10a      	bne.n	8002698 <adc_sendAdcData+0xb8>
 8002682:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <adc_sendAdcData+0xb8>
    {
      HAL_GPIO_WritePin(GPIOB, RELAY_IGN_Pin, 1); // Turns On Ignition relay for quad CAN Filter
 800268a:	2201      	movs	r2, #1
 800268c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002690:	48b6      	ldr	r0, [pc, #728]	; (800296c <adc_sendAdcData+0x38c>)
 8002692:	f002 ff3f 	bl	8005514 <HAL_GPIO_WritePin>
 8002696:	e00c      	b.n	80026b2 <adc_sendAdcData+0xd2>
    }
    else if(chNum == 2 && bCurrentOk)
 8002698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800269c:	2b02      	cmp	r3, #2
 800269e:	d108      	bne.n	80026b2 <adc_sendAdcData+0xd2>
 80026a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <adc_sendAdcData+0xd2>
    {
      HAL_GPIO_WritePin(GPIOB, RELAY_DRIVETRAIN_Pin, 1); // Turns On Ignition relay for quad CAN Filter
 80026a8:	2201      	movs	r2, #1
 80026aa:	2102      	movs	r1, #2
 80026ac:	48af      	ldr	r0, [pc, #700]	; (800296c <adc_sendAdcData+0x38c>)
 80026ae:	f002 ff31 	bl	8005514 <HAL_GPIO_WritePin>
    }

    // Gets adc value as an integer
    adcChannel[chNum].valueDecimal = adc_getDecimalValue(hAdc1, adcChannel[chNum].id);
 80026b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026b6:	222c      	movs	r2, #44	; 0x2c
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	7819      	ldrb	r1, [r3, #0]
 80026c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026c6:	222c      	movs	r2, #44	; 0x2c
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	18d4      	adds	r4, r2, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fec7 	bl	8002464 <adc_getDecimalValue>
 80026d6:	4603      	mov	r3, r0
 80026d8:	6063      	str	r3, [r4, #4]
    if(chNum == 0 || chNum == 2 || chNum == 1)
 80026da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <adc_sendAdcData+0x112>
 80026e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d003      	beq.n	80026f2 <adc_sendAdcData+0x112>
 80026ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d138      	bne.n	8002764 <adc_sendAdcData+0x184>
    {
      adcChannel[chNum].valueVolts = (3.3 - (((float) adcChannel[chNum].valueDecimal / (float) 4095) * 3.3))/0.5;
 80026f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026f6:	222c      	movs	r2, #44	; 0x2c
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fa6c 	bl	8000be0 <__aeabi_ui2f>
 8002708:	4603      	mov	r3, r0
 800270a:	4999      	ldr	r1, [pc, #612]	; (8002970 <adc_sendAdcData+0x390>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fb73 	bl	8000df8 <__aeabi_fdiv>
 8002712:	4603      	mov	r3, r0
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fef3 	bl	8000500 <__aeabi_f2d>
 800271a:	a38f      	add	r3, pc, #572	; (adr r3, 8002958 <adc_sendAdcData+0x378>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fd ff46 	bl	80005b0 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	a18b      	add	r1, pc, #556	; (adr r1, 8002958 <adc_sendAdcData+0x378>)
 800272a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800272e:	f7fd fd87 	bl	8000240 <__aeabi_dsub>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	4b8d      	ldr	r3, [pc, #564]	; (8002974 <adc_sendAdcData+0x394>)
 8002740:	f7fe f860 	bl	8000804 <__aeabi_ddiv>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002750:	222c      	movs	r2, #44	; 0x2c
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	18d4      	adds	r4, r2, r3
 800275a:	f7fe f93b 	bl	80009d4 <__aeabi_d2f>
 800275e:	4603      	mov	r3, r0
 8002760:	60a3      	str	r3, [r4, #8]
 8002762:	e030      	b.n	80027c6 <adc_sendAdcData+0x1e6>
    }
    else
    {
      adcChannel[chNum].valueVolts = (((float) adcChannel[chNum].valueDecimal / (float) 4095) * 3.3)*(29.7/4.7);
 8002764:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002768:	222c      	movs	r2, #44	; 0x2c
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fa33 	bl	8000be0 <__aeabi_ui2f>
 800277a:	4603      	mov	r3, r0
 800277c:	497c      	ldr	r1, [pc, #496]	; (8002970 <adc_sendAdcData+0x390>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb3a 	bl	8000df8 <__aeabi_fdiv>
 8002784:	4603      	mov	r3, r0
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd feba 	bl	8000500 <__aeabi_f2d>
 800278c:	a372      	add	r3, pc, #456	; (adr r3, 8002958 <adc_sendAdcData+0x378>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fd ff0d 	bl	80005b0 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	a370      	add	r3, pc, #448	; (adr r3, 8002960 <adc_sendAdcData+0x380>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd ff04 	bl	80005b0 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027b4:	222c      	movs	r2, #44	; 0x2c
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	18d4      	adds	r4, r2, r3
 80027be:	f7fe f909 	bl	80009d4 <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	60a3      	str	r3, [r4, #8]
    }
    if(adcChannel[chNum].valueVolts < 0)
 80027c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027ca:	222c      	movs	r2, #44	; 0x2c
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fbf6 	bl	8000fcc <__aeabi_fcmplt>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d011      	beq.n	800280a <adc_sendAdcData+0x22a>
    {
      adcChannel[chNum].valueVolts *= -1;
 80027e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027ea:	222c      	movs	r2, #44	; 0x2c
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	440b      	add	r3, r1
 8002804:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8002808:	609a      	str	r2, [r3, #8]
    }

    // If the currents from the adc channels are exceeded
    if(adcChannel[chNum].valueVolts < -1 || adcChannel[chNum].valueVolts > 20)
 800280a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800280e:	222c      	movs	r2, #44	; 0x2c
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4957      	ldr	r1, [pc, #348]	; (8002978 <adc_sendAdcData+0x398>)
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fbd5 	bl	8000fcc <__aeabi_fcmplt>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10e      	bne.n	8002846 <adc_sendAdcData+0x266>
 8002828:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800282c:	222c      	movs	r2, #44	; 0x2c
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4950      	ldr	r1, [pc, #320]	; (800297c <adc_sendAdcData+0x39c>)
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fbe4 	bl	8001008 <__aeabi_fcmpgt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d026      	beq.n	8002894 <adc_sendAdcData+0x2b4>
    {
      bCurrentOk = false;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      HAL_GPIO_WritePin(GPIOA, RELAY_12V_Pin, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2110      	movs	r1, #16
 8002850:	4845      	ldr	r0, [pc, #276]	; (8002968 <adc_sendAdcData+0x388>)
 8002852:	f002 fe5f 	bl	8005514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, RELAY_IGN_Pin, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800285c:	4843      	ldr	r0, [pc, #268]	; (800296c <adc_sendAdcData+0x38c>)
 800285e:	f002 fe59 	bl	8005514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, RELAY_DRIVETRAIN_Pin, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2102      	movs	r1, #2
 8002866:	4841      	ldr	r0, [pc, #260]	; (800296c <adc_sendAdcData+0x38c>)
 8002868:	f002 fe54 	bl	8005514 <HAL_GPIO_WritePin>
      strcat(adcChannel[chNum].valueString, "F");
 800286c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002870:	222c      	movs	r2, #44	; 0x2c
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	f103 0410 	add.w	r4, r3, #16
 800287e:	4620      	mov	r0, r4
 8002880:	f7fd fcd2 	bl	8000228 <strlen>
 8002884:	4603      	mov	r3, r0
 8002886:	4423      	add	r3, r4
 8002888:	493d      	ldr	r1, [pc, #244]	; (8002980 <adc_sendAdcData+0x3a0>)
 800288a:	461a      	mov	r2, r3
 800288c:	460b      	mov	r3, r1
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	8013      	strh	r3, [r2, #0]
 8002892:	e012      	b.n	80028ba <adc_sendAdcData+0x2da>
    }
    else
    {
      strcat(adcChannel[chNum].valueString, "P");
 8002894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002898:	222c      	movs	r2, #44	; 0x2c
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	f103 0410 	add.w	r4, r3, #16
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7fd fcbe 	bl	8000228 <strlen>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4423      	add	r3, r4
 80028b0:	4934      	ldr	r1, [pc, #208]	; (8002984 <adc_sendAdcData+0x3a4>)
 80028b2:	461a      	mov	r2, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	8013      	strh	r3, [r2, #0]
    }

    // Converts a value into a string
    adc_VoltageToString(adcChannel[chNum].valueVolts, strTotalAdcValue, 5);
 80028ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028be:	222c      	movs	r2, #44	; 0x2c
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f107 0110 	add.w	r1, r7, #16
 80028ce:	2205      	movs	r2, #5
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fde9 	bl	80024a8 <adc_VoltageToString>
    strcat(adcChannel[chNum].valueString, strTotalAdcValue);
 80028d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028da:	222c      	movs	r2, #44	; 0x2c
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	3310      	adds	r3, #16
 80028e6:	f107 0210 	add.w	r2, r7, #16
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 ffb7 	bl	8007860 <strcat>

    HAL_UART_Transmit(hUart1, (uint8_t*)adcChannel[chNum].valueString, 8, 50);
 80028f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028f6:	222c      	movs	r2, #44	; 0x2c
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	f103 0110 	add.w	r1, r3, #16
 8002904:	2332      	movs	r3, #50	; 0x32
 8002906:	2208      	movs	r2, #8
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	f004 f986 	bl	8006c1a <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(GPIOC, LED1_Pin|LED2_Pin);
 800290e:	2106      	movs	r1, #6
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <adc_sendAdcData+0x3a8>)
 8002912:	f002 fe17 	bl	8005544 <HAL_GPIO_TogglePin>

    if(!bCurrentOk)
 8002916:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800291a:	f083 0301 	eor.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <adc_sendAdcData+0x348>
    {
      return false;
 8002924:	2300      	movs	r3, #0
 8002926:	e012      	b.n	800294e <adc_sendAdcData+0x36e>
    }
    HAL_Delay(10);
 8002928:	200a      	movs	r0, #10
 800292a:	f000 fa8f 	bl	8002e4c <HAL_Delay>
  for(uint8_t chNum = lastTestedConn; chNum < totalConn+lastTestedConn; chNum++)
 800292e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002932:	3301      	adds	r3, #1
 8002934:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002938:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800293c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002944:	440b      	add	r3, r1
 8002946:	429a      	cmp	r2, r3
 8002948:	f6ff ae75 	blt.w	8002636 <adc_sendAdcData+0x56>
   }
  return true;
 800294c:	2301      	movs	r3, #1
 }
 800294e:	4618      	mov	r0, r3
 8002950:	372c      	adds	r7, #44	; 0x2c
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	bf00      	nop
 8002958:	66666666 	.word	0x66666666
 800295c:	400a6666 	.word	0x400a6666
 8002960:	fa8d9df5 	.word	0xfa8d9df5
 8002964:	401946ce 	.word	0x401946ce
 8002968:	40010800 	.word	0x40010800
 800296c:	40010c00 	.word	0x40010c00
 8002970:	457ff000 	.word	0x457ff000
 8002974:	3fe00000 	.word	0x3fe00000
 8002978:	bf800000 	.word	0xbf800000
 800297c:	41a00000 	.word	0x41a00000
 8002980:	08007920 	.word	0x08007920
 8002984:	08007924 	.word	0x08007924
 8002988:	40011000 	.word	0x40011000

0800298c <canConfig_filterConfig>:
void canConfig_filterConfig(CAN_HandleTypeDef *hCan);
static void canConfig_startCans(CAN_HandleTypeDef *hCan, uint32_t fifoIrq);

//----------------
void canConfig_filterConfig(CAN_HandleTypeDef *hCan) // Configuring the CAN1 Filter
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08e      	sub	sp, #56	; 0x38
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  CAN_FilterTypeDef canFilterInit = {0}; // Empty the memory
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	2228      	movs	r2, #40	; 0x28
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f004 ff57 	bl	8007850 <memset>
  uint32_t          fifoIrq;

  // Both CAN1 and CAN2 Configs
  canFilterInit.FilterActivation     = ENABLE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  canFilterInit.FilterIdHigh         = 0x0000;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  canFilterInit.FilterIdLow          = 0x0000;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  canFilterInit.FilterMaskIdHigh     = 0x0000;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  canFilterInit.FilterMaskIdLow      = 0x0000;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  canFilterInit.FilterMode           = CAN_FILTERMODE_IDMASK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  canFilterInit.FilterScale          = CAN_FILTERSCALE_32BIT;
 80029ba:	2301      	movs	r3, #1
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28

  // CAN 1 Filter Configs
  if(hCan -> Instance == CAN1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <canConfig_filterConfig+0x90>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <canConfig_filterConfig+0x4e>
  {
    canFilterInit.FilterBank           = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	623b      	str	r3, [r7, #32]
    canFilterInit.SlaveStartFilterBank = 14; // 14 each banks
 80029cc:	230e      	movs	r3, #14
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
    canFilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    fifoIrq                            = CAN_IT_RX_FIFO0_MSG_PENDING;
 80029d4:	2302      	movs	r3, #2
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
 80029d8:	e00c      	b.n	80029f4 <canConfig_filterConfig+0x68>
  }

  // CAN 2 Filter Configs
  else if(hCan -> Instance == CAN2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <canConfig_filterConfig+0x94>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d107      	bne.n	80029f4 <canConfig_filterConfig+0x68>
  {
    canFilterInit.FilterBank           = 15;
 80029e4:	230f      	movs	r3, #15
 80029e6:	623b      	str	r3, [r7, #32]
    canFilterInit.SlaveStartFilterBank = 14; // 14 each banks
 80029e8:	230e      	movs	r3, #14
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
    canFilterInit.FilterFIFOAssignment = CAN_RX_FIFO1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
    fifoIrq                            = CAN_IT_RX_FIFO1_MSG_PENDING;
 80029f0:	2310      	movs	r3, #16
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if(HAL_CAN_ConfigFilter(hCan, &canFilterInit) != HAL_OK)
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f001 f928 	bl	8003c50 <HAL_CAN_ConfigFilter>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <canConfig_filterConfig+0x7e>
  {
    Error_Handler();
 8002a06:	f7ff f937 	bl	8001c78 <Error_Handler>
  }

  canConfig_startCans(hCan, fifoIrq);
 8002a0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f809 	bl	8002a24 <canConfig_startCans>
}
 8002a12:	bf00      	nop
 8002a14:	3738      	adds	r7, #56	; 0x38
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40006400 	.word	0x40006400
 8002a20:	40006800 	.word	0x40006800

08002a24 <canConfig_startCans>:

static void canConfig_startCans(CAN_HandleTypeDef *hCan, uint32_t fifoIrq)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  if(HAL_CAN_ActivateNotification(hCan, CAN_IT_TX_MAILBOX_EMPTY | fifoIrq) != HAL_OK)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f001 fc19 	bl	800426e <HAL_CAN_ActivateNotification>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <canConfig_startCans+0x22>
  {
    Error_Handler();
 8002a42:	f7ff f919 	bl	8001c78 <Error_Handler>
  }
  if(HAL_CAN_Start(hCan) != HAL_OK)
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f001 f9e2 	bl	8003e10 <HAL_CAN_Start>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <canConfig_startCans+0x32>
  {
    Error_Handler();
 8002a52:	f7ff f911 	bl	8001c78 <Error_Handler>
  }
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <canRx_isCanOk>:
// Function Declarations:
bool canRx_isCanOk(uint8_t correctMsg);

//----------------
bool canRx_isCanOk(uint8_t correctMsg)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
  if(gCanIRQReceivedMsg == correctMsg)
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <canRx_isCanOk+0x30>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	79fa      	ldrb	r2, [r7, #7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d104      	bne.n	8002a7e <canRx_isCanOk+0x1e>
  {
    gCanIRQReceivedMsg = 0x00;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <canRx_isCanOk+0x30>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
    return true;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e003      	b.n	8002a86 <canRx_isCanOk+0x26>
  }
  else
  {
    gCanIRQReceivedMsg = 0x00;
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <canRx_isCanOk+0x30>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
    return false;
 8002a84:	2300      	movs	r3, #0
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	20000248 	.word	0x20000248

08002a94 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN1 reception:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance == CAN1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d117      	bne.n	8002ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
  {
    CAN_RxHeaderTypeDef RxHeader; // Struct specified
    uint8_t             canFrame[CAN_FRAME_LEN]; // Received 'hello' message

    // Gets the message
    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, canFrame) != HAL_OK)
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	f107 0214 	add.w	r2, r7, #20
 8002aae:	2100      	movs	r1, #0
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f001 facb 	bl	800404c <HAL_CAN_GetRxMessage>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
    {
      Error_Handler();
 8002abc:	f7ff f8dc 	bl	8001c78 <Error_Handler>
    }

    if(RxHeader.StdId == CAN_ID && RxHeader.RTR == 0) // Check the message details
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f240 1201 	movw	r2, #257	; 0x101
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d105      	bne.n	8002ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    {
      gCanIRQReceivedMsg = canFrame[0];
 8002ad0:	7b3a      	ldrb	r2, [r7, #12]
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002ad4:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3730      	adds	r7, #48	; 0x30
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40006400 	.word	0x40006400
 8002ae4:	20000248 	.word	0x20000248

08002ae8 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN2 reception:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08c      	sub	sp, #48	; 0x30
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(hcan->Instance == CAN2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d117      	bne.n	8002b2a <HAL_CAN_RxFifo1MsgPendingCallback+0x42>
  {
    CAN_RxHeaderTypeDef RxHeader;                // Struct specified
    uint8_t             canFrame[CAN_FRAME_LEN]; // Received 'hello' message

    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, canFrame) != HAL_OK)// gets the message
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	f107 0214 	add.w	r2, r7, #20
 8002b02:	2101      	movs	r1, #1
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f001 faa1 	bl	800404c <HAL_CAN_GetRxMessage>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
    {
      Error_Handler();
 8002b10:	f7ff f8b2 	bl	8001c78 <Error_Handler>
    }

    if(RxHeader.StdId == CAN_ID && RxHeader.RTR == 0) // Check the message details
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f240 1201 	movw	r2, #257	; 0x101
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d105      	bne.n	8002b2a <HAL_CAN_RxFifo1MsgPendingCallback+0x42>
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_CAN_RxFifo1MsgPendingCallback+0x42>
    {
      gCanIRQReceivedMsg = canFrame[0];
 8002b24:	7b3a      	ldrb	r2, [r7, #12]
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8002b28:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40006800 	.word	0x40006800
 8002b38:	20000248 	.word	0x20000248

08002b3c <canTx_sendMsg>:
// Function Declarations:
void canTx_sendMsg(uint32_t canId, uint8_t canMsg, CAN_HandleTypeDef *hCan);

//----------------
void canTx_sendMsg(uint32_t canId, uint8_t canMsg, CAN_HandleTypeDef *hCan)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	460b      	mov	r3, r1
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	72fb      	strb	r3, [r7, #11]
  uint8_t             sendMessage[1]; // Data sent
  uint32_t            TxMailbox;
  CAN_TxHeaderTypeDef TxHeader = {0};
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]

  TxHeader.DLC   = 8;                 // Length of the message in bytes - 'hello' is 5 bytes
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	623b      	str	r3, [r7, #32]
  TxHeader.StdId = canId;             // Standard Id
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	613b      	str	r3, [r7, #16]
  TxHeader.IDE   = CAN_ID_STD;        // Standard or extended
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
  TxHeader.RTR   = CAN_RTR_DATA;      // Data frame (request frame) or remote frame
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]

  sendMessage[0] = canMsg;            // Message That I will Send
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

  HAL_Delay(10);
 8002b72:	200a      	movs	r0, #10
 8002b74:	f000 f96a 	bl	8002e4c <HAL_Delay>
  // Sends the message through the with the desired can details.
  HAL_CAN_AddTxMessage(hCan, &TxHeader, sendMessage, &TxMailbox);
 8002b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b7c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b80:	f107 0110 	add.w	r1, r7, #16
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f001 f987 	bl	8003e98 <HAL_CAN_AddTxMessage>
}
 8002b8a:	bf00      	nop
 8002b8c:	3730      	adds	r7, #48	; 0x30
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <inits_canInit>:

CanCommunication_t inits_canInit(CAN_HandleTypeDef *hCan, CanCommunication_t can);
LinCommunication_t inits_linInit(LinCommunication_t lin);

CanCommunication_t inits_canInit(CAN_HandleTypeDef *hCan, CanCommunication_t can)
{
 8002b94:	b082      	sub	sp, #8
 8002b96:	b590      	push	{r4, r7, lr}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
 8002ba0:	f107 0118 	add.w	r1, r7, #24
 8002ba4:	e881 000c 	stmia.w	r1, {r2, r3}
  if(hCan -> Instance == CAN1)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <inits_canInit+0x74>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d106      	bne.n	8002bc0 <inits_canInit+0x2c>
  {
    can.uartRx         = CAN1_UART_CAN_OK;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	777b      	strb	r3, [r7, #29]
    can.uartTxMsgOk    = CAN1_UART_CAN_OK;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	77bb      	strb	r3, [r7, #30]
    can.uartTxMsgError = CAN1_UART_CAN_ERROR;
 8002bba:	2311      	movs	r3, #17
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e00a      	b.n	8002bd6 <inits_canInit+0x42>
  }
  else if(hCan -> Instance == CAN2)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <inits_canInit+0x78>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d105      	bne.n	8002bd6 <inits_canInit+0x42>
  {
    can.uartRx         = CAN2_UART_CAN_OK;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	777b      	strb	r3, [r7, #29]
    can.uartTxMsgOk    = CAN2_UART_CAN_OK;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	77bb      	strb	r3, [r7, #30]
    can.uartTxMsgError = CAN2_UART_CAN_ERROR;
 8002bd2:	2322      	movs	r3, #34	; 0x22
 8002bd4:	77fb      	strb	r3, [r7, #31]
  }
  can.canId          = CAN_ID;
 8002bd6:	f240 1301 	movw	r3, #257	; 0x101
 8002bda:	61bb      	str	r3, [r7, #24]
  can.canMsg         = CAN_MSG;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	773b      	strb	r3, [r7, #28]
  can.pCan = hCan;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  canConfig_filterConfig(can.pCan);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fed0 	bl	800298c <canConfig_filterConfig>

  return can;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	461c      	mov	r4, r3
 8002bf0:	f107 0318 	add.w	r3, r7, #24
 8002bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c04:	b002      	add	sp, #8
 8002c06:	4770      	bx	lr
 8002c08:	40006400 	.word	0x40006400
 8002c0c:	40006800 	.word	0x40006800

08002c10 <inits_linInit>:

LinCommunication_t inits_linInit(LinCommunication_t lin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	e883 0006 	stmia.w	r3, {r1, r2}
  lin.uartRx         = LIN_UART_MSG_RX;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	713b      	strb	r3, [r7, #4]
  lin.uartTxMsgOk    = LIN_UART_MSG_OK;
 8002c22:	2303      	movs	r3, #3
 8002c24:	717b      	strb	r3, [r7, #5]
  lin.uartTxMsgError = LIN_UART_MSG_ERROR;
 8002c26:	2333      	movs	r3, #51	; 0x33
 8002c28:	71bb      	strb	r3, [r7, #6]

  return lin;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c34:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_UART_RxHalfCpltCallback>:
extern uint8_t gLinIRQMsg[LIN_FRAME_LEN];
extern uint8_t gLinChecksum;

//----------------
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <HAL_UART_RxHalfCpltCallback+0x24>
  {
    HAL_UART_Receive_DMA(huart, gLinIRQMsg, 3);
 8002c56:	2203      	movs	r2, #3
 8002c58:	4906      	ldr	r1, [pc, #24]	; (8002c74 <HAL_UART_RxHalfCpltCallback+0x30>)
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f004 f86f 	bl	8006d3e <HAL_UART_Receive_DMA>
    gLinChecksum = gLinIRQMsg[2];
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <HAL_UART_RxHalfCpltCallback+0x30>)
 8002c62:	789a      	ldrb	r2, [r3, #2]
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_UART_RxHalfCpltCallback+0x34>)
 8002c66:	701a      	strb	r2, [r3, #0]
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40004400 	.word	0x40004400
 8002c74:	20000250 	.word	0x20000250
 8002c78:	2000025a 	.word	0x2000025a

08002c7c <HAL_UART_RxCpltCallback>:
// Global Variables:
extern uint8_t gUartConnRequest;

// Gets requested connection from uart:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  // UART reception from Right Mcu
  if(huart -> Instance == USART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <HAL_UART_RxCpltCallback+0x24>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d104      	bne.n	8002c98 <HAL_UART_RxCpltCallback+0x1c>
  {
    HAL_UART_Receive_DMA(huart, &gUartConnRequest, 1);
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <HAL_UART_RxCpltCallback+0x28>)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f004 f853 	bl	8006d3e <HAL_UART_Receive_DMA>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	2000024c 	.word	0x2000024c

08002ca8 <uartRx_isLinOk>:


bool uartRx_isLinOk(UART_HandleTypeDef *hUart2)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  bool bConnStatus = false;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  gLinChecksum = 0x00;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <uartRx_isLinOk+0x4c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
  // Tries to receive the sent message while the timer is ticking
  for(uint32_t i = 0; i < 100000; i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	e010      	b.n	8002ce2 <uartRx_isLinOk+0x3a>
  {
    HAL_UART_Receive_DMA(hUart2, gLinIRQMsg, 4);
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	490d      	ldr	r1, [pc, #52]	; (8002cf8 <uartRx_isLinOk+0x50>)
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f004 f83a 	bl	8006d3e <HAL_UART_Receive_DMA>
    if(gLinChecksum > 0x00)
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <uartRx_isLinOk+0x4c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <uartRx_isLinOk+0x34>
    {
      bConnStatus = true;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      gLinChecksum = 0x00;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <uartRx_isLinOk+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
  for(uint32_t i = 0; i < 100000; i++)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <uartRx_isLinOk+0x54>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d9ea      	bls.n	8002cc0 <uartRx_isLinOk+0x18>
    }
  }
  return bConnStatus;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000025a 	.word	0x2000025a
 8002cf8:	20000250 	.word	0x20000250
 8002cfc:	0001869f 	.word	0x0001869f

08002d00 <uart_sendStatus>:
void uart_sendStatus(bool bConnectionOk, uint8_t msgConnected, uint8_t msgDisconnected, UART_HandleTypeDef *hUart);

//----------------
// Sends connection status back in accordance to which connection was requested to the right MCU:
void uart_sendStatus(bool bIsConnected, uint8_t msgConnected, uint8_t msgDisconnected, UART_HandleTypeDef *hUart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	71fb      	strb	r3, [r7, #7]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	71bb      	strb	r3, [r7, #6]
 8002d10:	4613      	mov	r3, r2
 8002d12:	717b      	strb	r3, [r7, #5]
  uint8_t uartMsg;
  // Assigns the message sent using uart depending on the connection status
  if(bIsConnected)
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <uart_sendStatus+0x20>
  {
    uartMsg = msgConnected;
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	e001      	b.n	8002d24 <uart_sendStatus+0x24>
  }
  else
  {
    uartMsg = msgDisconnected;
 8002d20:	797b      	ldrb	r3, [r7, #5]
 8002d22:	73fb      	strb	r3, [r7, #15]
  }

  // Sends the status message:
  HAL_UART_Transmit(hUart, &uartMsg, 1, 5);
 8002d24:	f107 010f 	add.w	r1, r7, #15
 8002d28:	2305      	movs	r3, #5
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	6838      	ldr	r0, [r7, #0]
 8002d2e:	f003 ff74 	bl	8006c1a <HAL_UART_Transmit>
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d3e:	490d      	ldr	r1, [pc, #52]	; (8002d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d54:	4c0a      	ldr	r4, [pc, #40]	; (8002d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
;  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d62:	f7ff faed 	bl	8002340 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d66:	f004 fd35 	bl	80077d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d6a:	f7fe fb17 	bl	800139c <main>
  bx lr
 8002d6e:	4770      	bx	lr
  ldr r0, =_sdata
 8002d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d78:	080079b8 	.word	0x080079b8
  ldr r2, =_sbss
 8002d7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d80:	20000264 	.word	0x20000264

08002d84 <CAN1_RX1_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <CAN1_RX1_IRQHandler>
	...

08002d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_Init+0x28>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_Init+0x28>)
 8002d92:	f043 0310 	orr.w	r3, r3, #16
 8002d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f001 fd73 	bl	8004884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f000 f808 	bl	8002db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da4:	f7fe ff72 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40022000 	.word	0x40022000

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_InitTick+0x54>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_InitTick+0x58>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fd8b 	bl	80048ee <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00e      	b.n	8002e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d80a      	bhi.n	8002dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de8:	2200      	movs	r2, #0
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f001 fd53 	bl	800489a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <HAL_InitTick+0x5c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000008 	.word	0x20000008
 8002e10:	20000004 	.word	0x20000004

08002e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_IncTick+0x1c>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_IncTick+0x20>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <HAL_IncTick+0x20>)
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	20000008 	.word	0x20000008
 8002e34:	20000260 	.word	0x20000260

08002e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <HAL_GetTick+0x10>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000260 	.word	0x20000260

08002e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d005      	beq.n	8002e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_Delay+0x44>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e72:	bf00      	nop
 8002e74:	f7ff ffe0 	bl	8002e38 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d8f7      	bhi.n	8002e74 <HAL_Delay+0x28>
  {
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000008 	.word	0x20000008

08002e94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0be      	b.n	8003034 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe ff0c 	bl	8001cf0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fcc7 	bl	800386c <ADC_ConversionStop_Disable>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 8099 	bne.w	8003022 <HAL_ADC_Init+0x18e>
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 8095 	bne.w	8003022 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f00:	f023 0302 	bic.w	r3, r3, #2
 8002f04:	f043 0202 	orr.w	r2, r3, #2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7b1b      	ldrb	r3, [r3, #12]
 8002f1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2c:	d003      	beq.n	8002f36 <HAL_ADC_Init+0xa2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <HAL_ADC_Init+0xa8>
 8002f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3a:	e000      	b.n	8002f3e <HAL_ADC_Init+0xaa>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7d1b      	ldrb	r3, [r3, #20]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d119      	bne.n	8002f80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7b1b      	ldrb	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	035a      	lsls	r2, r3, #13
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e00b      	b.n	8002f80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_ADC_Init+0x1a8>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb0:	d003      	beq.n	8002fba <HAL_ADC_Init+0x126>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d104      	bne.n	8002fc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	051b      	lsls	r3, r3, #20
 8002fc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_ADC_Init+0x1ac>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d10b      	bne.n	8003000 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ffe:	e018      	b.n	8003032 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f023 0312 	bic.w	r3, r3, #18
 8003008:	f043 0210 	orr.w	r2, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003020:	e007      	b.n	8003032 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	ffe1f7fd 	.word	0xffe1f7fd
 8003040:	ff1f0efe 	.word	0xff1f0efe

08003044 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADC_Start+0x1a>
 800305a:	2302      	movs	r3, #2
 800305c:	e098      	b.n	8003190 <HAL_ADC_Start+0x14c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fba6 	bl	80037b8 <ADC_Enable>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 8087 	bne.w	8003186 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a41      	ldr	r2, [pc, #260]	; (8003198 <HAL_ADC_Start+0x154>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_Start+0x5e>
 8003096:	4b41      	ldr	r3, [pc, #260]	; (800319c <HAL_ADC_Start+0x158>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d115      	bne.n	80030ce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d026      	beq.n	800310a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030cc:	e01d      	b.n	800310a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <HAL_ADC_Start+0x158>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_ADC_Start+0xaa>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <HAL_ADC_Start+0x154>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10d      	bne.n	800310a <HAL_ADC_Start+0xc6>
 80030ee:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_ADC_Start+0x158>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003102:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f023 0206 	bic.w	r2, r3, #6
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c
 8003122:	e002      	b.n	800312a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0202 	mvn.w	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003146:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800314a:	d113      	bne.n	8003174 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003150:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_ADC_Start+0x154>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d105      	bne.n	8003162 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_ADC_Start+0x158>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	e00c      	b.n	800318e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e003      	b.n	800318e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40012800 	.word	0x40012800
 800319c:	40012400 	.word	0x40012400

080031a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_Stop+0x1a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e01a      	b.n	80031f0 <HAL_ADC_Stop+0x50>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fb52 	bl	800386c <ADC_ConversionStop_Disable>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800320e:	f7ff fe13 	bl	8002e38 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0d3      	b.n	80033e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d131      	bne.n	80032ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	d12a      	bne.n	80032ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003256:	e021      	b.n	800329c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d01d      	beq.n	800329c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_ADC_PollForConversion+0x7e>
 8003266:	f7ff fde7 	bl	8002e38 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d212      	bcs.n	800329c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0a2      	b.n	80033e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0d6      	beq.n	8003258 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032aa:	e070      	b.n	800338e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_ADC_PollForConversion+0x1f4>)
 80032ae:	681c      	ldr	r4, [r3, #0]
 80032b0:	2002      	movs	r0, #2
 80032b2:	f002 ffe3 	bl	800627c <HAL_RCCEx_GetPeriphCLKFreq>
 80032b6:	4603      	mov	r3, r0
 80032b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6919      	ldr	r1, [r3, #16]
 80032c2:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <HAL_ADC_PollForConversion+0x1f8>)
 80032c4:	400b      	ands	r3, r1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_ADC_PollForConversion+0x104>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68d9      	ldr	r1, [r3, #12]
 80032d0:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <HAL_ADC_PollForConversion+0x1fc>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_ADC_PollForConversion+0x104>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_ADC_PollForConversion+0x200>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x100>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	4b43      	ldr	r3, [pc, #268]	; (80033fc <HAL_ADC_PollForConversion+0x204>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x100>
 80032f4:	2314      	movs	r3, #20
 80032f6:	e020      	b.n	800333a <HAL_ADC_PollForConversion+0x142>
 80032f8:	2329      	movs	r3, #41	; 0x29
 80032fa:	e01e      	b.n	800333a <HAL_ADC_PollForConversion+0x142>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6919      	ldr	r1, [r3, #16]
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <HAL_ADC_PollForConversion+0x200>)
 8003304:	400b      	ands	r3, r1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_ADC_PollForConversion+0x120>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68d9      	ldr	r1, [r3, #12]
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_ADC_PollForConversion+0x204>)
 8003312:	400b      	ands	r3, r1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_ADC_PollForConversion+0x13c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_ADC_PollForConversion+0x208>)
 8003320:	400b      	ands	r3, r1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <HAL_ADC_PollForConversion+0x140>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_ADC_PollForConversion+0x208>)
 800332e:	400b      	ands	r3, r1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_ADC_PollForConversion+0x140>
 8003334:	2354      	movs	r3, #84	; 0x54
 8003336:	e000      	b.n	800333a <HAL_ADC_PollForConversion+0x142>
 8003338:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003340:	e021      	b.n	8003386 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d01a      	beq.n	8003380 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_ADC_PollForConversion+0x168>
 8003350:	f7ff fd72 	bl	8002e38 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d20f      	bcs.n	8003380 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d90b      	bls.n	8003380 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	f043 0204 	orr.w	r2, r3, #4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e030      	b.n	80033e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d8d9      	bhi.n	8003342 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0212 	mvn.w	r2, #18
 8003396:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033b2:	d115      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000000 	.word	0x20000000
 80033f0:	24924924 	.word	0x24924924
 80033f4:	00924924 	.word	0x00924924
 80033f8:	12492492 	.word	0x12492492
 80033fc:	00492492 	.word	0x00492492
 8003400:	00249249 	.word	0x00249249

08003404 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b20      	cmp	r3, #32
 8003430:	d140      	bne.n	80034b4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d139      	bne.n	80034b4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003462:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003466:	d11d      	bne.n	80034a4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800346c:	2b00      	cmp	r3, #0
 800346e:	d119      	bne.n	80034a4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0220 	bic.w	r2, r2, #32
 800347e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f87c 	bl	80035a2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0212 	mvn.w	r2, #18
 80034b2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d14f      	bne.n	8003562 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d148      	bne.n	8003562 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80034f2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80034f6:	d012      	beq.n	800351e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003502:	2b00      	cmp	r3, #0
 8003504:	d125      	bne.n	8003552 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003510:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003514:	d11d      	bne.n	8003552 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d119      	bne.n	8003552 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800352c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa78 	bl	8003a48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 020c 	mvn.w	r2, #12
 8003560:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d114      	bne.n	800359a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10d      	bne.n	800359a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f812 	bl	80035b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0201 	mvn.w	r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x20>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e0dc      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x1da>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b06      	cmp	r3, #6
 80035f6:	d81c      	bhi.n	8003632 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	3b05      	subs	r3, #5
 800360a:	221f      	movs	r2, #31
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	4019      	ands	r1, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	3b05      	subs	r3, #5
 8003624:	fa00 f203 	lsl.w	r2, r0, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	635a      	str	r2, [r3, #52]	; 0x34
 8003630:	e03c      	b.n	80036ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d81c      	bhi.n	8003674 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	3b23      	subs	r3, #35	; 0x23
 800364c:	221f      	movs	r2, #31
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	4019      	ands	r1, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b23      	subs	r3, #35	; 0x23
 8003666:	fa00 f203 	lsl.w	r2, r0, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
 8003672:	e01b      	b.n	80036ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	3b41      	subs	r3, #65	; 0x41
 8003686:	221f      	movs	r2, #31
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	4019      	ands	r1, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3b41      	subs	r3, #65	; 0x41
 80036a0:	fa00 f203 	lsl.w	r2, r0, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	d91c      	bls.n	80036ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68d9      	ldr	r1, [r3, #12]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	3b1e      	subs	r3, #30
 80036c6:	2207      	movs	r2, #7
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	4019      	ands	r1, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6898      	ldr	r0, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	3b1e      	subs	r3, #30
 80036e0:	fa00 f203 	lsl.w	r2, r0, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e019      	b.n	8003722 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6919      	ldr	r1, [r3, #16]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	2207      	movs	r2, #7
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	4019      	ands	r1, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6898      	ldr	r0, [r3, #8]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	fa00 f203 	lsl.w	r2, r0, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b10      	cmp	r3, #16
 8003728:	d003      	beq.n	8003732 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800372e:	2b11      	cmp	r3, #17
 8003730:	d132      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <HAL_ADC_ConfigChannel+0x1e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d125      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d126      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003758:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b10      	cmp	r3, #16
 8003760:	d11a      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	0c9a      	lsrs	r2, r3, #18
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003778:	e002      	b.n	8003780 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3b01      	subs	r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f9      	bne.n	800377a <HAL_ADC_ConfigChannel+0x1b2>
 8003786:	e007      	b.n	8003798 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012400 	.word	0x40012400
 80037b0:	20000000 	.word	0x20000000
 80037b4:	431bde83 	.word	0x431bde83

080037b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d040      	beq.n	8003858 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <ADC_Enable+0xac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <ADC_Enable+0xb0>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	0c9b      	lsrs	r3, r3, #18
 80037f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037f4:	e002      	b.n	80037fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f9      	bne.n	80037f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003802:	f7ff fb19 	bl	8002e38 <HAL_GetTick>
 8003806:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003808:	e01f      	b.n	800384a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800380a:	f7ff fb15 	bl	8002e38 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d918      	bls.n	800384a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d011      	beq.n	800384a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f043 0210 	orr.w	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e007      	b.n	800385a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d1d8      	bne.n	800380a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000
 8003868:	431bde83 	.word	0x431bde83

0800386c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d12e      	bne.n	80038e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003896:	f7ff facf 	bl	8002e38 <HAL_GetTick>
 800389a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800389c:	e01b      	b.n	80038d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800389e:	f7ff facb 	bl	8002e38 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d914      	bls.n	80038d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d10d      	bne.n	80038d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	f043 0210 	orr.w	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e007      	b.n	80038e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d0dc      	beq.n	800389e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_ADCEx_Calibration_Start+0x1e>
 800390a:	2302      	movs	r3, #2
 800390c:	e095      	b.n	8003a3a <HAL_ADCEx_Calibration_Start+0x14a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ffa8 	bl	800386c <ADC_ConversionStop_Disable>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 8084 	bne.w	8003a30 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003930:	f023 0302 	bic.w	r3, r3, #2
 8003934:	f043 0202 	orr.w	r2, r3, #2
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800393c:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_ADCEx_Calibration_Start+0x154>)
 800393e:	681c      	ldr	r4, [r3, #0]
 8003940:	2002      	movs	r0, #2
 8003942:	f002 fc9b 	bl	800627c <HAL_RCCEx_GetPeriphCLKFreq>
 8003946:	4603      	mov	r3, r0
 8003948:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800394c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800394e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003950:	e002      	b.n	8003958 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3b01      	subs	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f9      	bne.n	8003952 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff2a 	bl	80037b8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003974:	f7ff fa60 	bl	8002e38 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800397a:	e01b      	b.n	80039b4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800397c:	f7ff fa5c 	bl	8002e38 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b0a      	cmp	r3, #10
 8003988:	d914      	bls.n	80039b4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	f023 0312 	bic.w	r3, r3, #18
 80039a0:	f043 0210 	orr.w	r2, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e042      	b.n	8003a3a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1dc      	bne.n	800397c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0204 	orr.w	r2, r2, #4
 80039d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80039d2:	f7ff fa31 	bl	8002e38 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80039d8:	e01b      	b.n	8003a12 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80039da:	f7ff fa2d 	bl	8002e38 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b0a      	cmp	r3, #10
 80039e6:	d914      	bls.n	8003a12 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	f023 0312 	bic.w	r3, r3, #18
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e013      	b.n	8003a3a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1dc      	bne.n	80039da <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	f023 0303 	bic.w	r3, r3, #3
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd90      	pop	{r4, r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0ed      	b.n	8003c48 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fe f9ad 	bl	8001dd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8e:	f7ff f9d3 	bl	8002e38 <HAL_GetTick>
 8003a92:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a94:	e012      	b.n	8003abc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a96:	f7ff f9cf 	bl	8002e38 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b0a      	cmp	r3, #10
 8003aa2:	d90b      	bls.n	8003abc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0c5      	b.n	8003c48 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0e5      	beq.n	8003a96 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0202 	bic.w	r2, r2, #2
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ada:	f7ff f9ad 	bl	8002e38 <HAL_GetTick>
 8003ade:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ae0:	e012      	b.n	8003b08 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ae2:	f7ff f9a9 	bl	8002e38 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b0a      	cmp	r3, #10
 8003aee:	d90b      	bls.n	8003b08 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2205      	movs	r2, #5
 8003b00:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e09f      	b.n	8003c48 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e5      	bne.n	8003ae2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7e1b      	ldrb	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d108      	bne.n	8003b30 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e007      	b.n	8003b40 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7e5b      	ldrb	r3, [r3, #25]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d108      	bne.n	8003b5a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e007      	b.n	8003b6a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7e9b      	ldrb	r3, [r3, #26]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d108      	bne.n	8003b84 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0220 	orr.w	r2, r2, #32
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e007      	b.n	8003b94 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0220 	bic.w	r2, r2, #32
 8003b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7edb      	ldrb	r3, [r3, #27]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d108      	bne.n	8003bae <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0210 	bic.w	r2, r2, #16
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e007      	b.n	8003bbe <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0210 	orr.w	r2, r2, #16
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7f1b      	ldrb	r3, [r3, #28]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d108      	bne.n	8003bd8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0208 	orr.w	r2, r2, #8
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e007      	b.n	8003be8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0208 	bic.w	r2, r2, #8
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	7f5b      	ldrb	r3, [r3, #29]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d108      	bne.n	8003c02 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0204 	orr.w	r2, r2, #4
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e007      	b.n	8003c12 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0204 	bic.w	r2, r2, #4
 8003c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	ea42 0103 	orr.w	r1, r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d003      	beq.n	8003c76 <HAL_CAN_ConfigFilter+0x26>
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	f040 80be 	bne.w	8003df2 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c76:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <HAL_CAN_ConfigFilter+0x1bc>)
 8003c78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	401a      	ands	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d123      	bne.n	8003d20 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3248      	adds	r2, #72	; 0x48
 8003d00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	3348      	adds	r3, #72	; 0x48
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	440b      	add	r3, r1
 8003d1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d122      	bne.n	8003d6e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3248      	adds	r2, #72	; 0x48
 8003d4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	3348      	adds	r3, #72	; 0x48
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	401a      	ands	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d88:	e007      	b.n	8003d9a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	401a      	ands	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003db4:	e007      	b.n	8003dc6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003de4:	f023 0201 	bic.w	r2, r3, #1
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e006      	b.n	8003e00 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40006400 	.word	0x40006400

08003e10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d12e      	bne.n	8003e82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fffc 	bl	8002e38 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e42:	e012      	b.n	8003e6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e44:	f7fe fff8 	bl	8002e38 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b0a      	cmp	r3, #10
 8003e50:	d90b      	bls.n	8003e6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2205      	movs	r2, #5
 8003e62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e012      	b.n	8003e90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e006      	b.n	8003e90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d003      	beq.n	8003ec4 <HAL_CAN_AddTxMessage+0x2c>
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 80b8 	bne.w	8004034 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80a0 	beq.w	8004024 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	0e1b      	lsrs	r3, r3, #24
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d907      	bls.n	8003f04 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e09e      	b.n	8004042 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f04:	2201      	movs	r2, #1
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	6809      	ldr	r1, [r1, #0]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3318      	adds	r3, #24
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	440b      	add	r3, r1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e00f      	b.n	8003f52 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	440b      	add	r3, r1
 8003f50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	3318      	adds	r3, #24
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	440b      	add	r3, r1
 8003f62:	3304      	adds	r3, #4
 8003f64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	7d1b      	ldrb	r3, [r3, #20]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d111      	bne.n	8003f92 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3318      	adds	r3, #24
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	4413      	add	r3, r2
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	6811      	ldr	r1, [r2, #0]
 8003f82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3304      	adds	r3, #4
 8003f90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3307      	adds	r3, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	061a      	lsls	r2, r3, #24
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3306      	adds	r3, #6
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3305      	adds	r3, #5
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	4313      	orrs	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	3204      	adds	r2, #4
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6811      	ldr	r1, [r2, #0]
 8003fba:	ea43 0200 	orr.w	r2, r3, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003fc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3303      	adds	r3, #3
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	061a      	lsls	r2, r3, #24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	4610      	mov	r0, r2
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	6811      	ldr	r1, [r2, #0]
 8003ff0:	ea43 0200 	orr.w	r2, r3, r0
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ffe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3318      	adds	r3, #24
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6811      	ldr	r1, [r2, #0]
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3318      	adds	r3, #24
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	440b      	add	r3, r1
 800401e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e00e      	b.n	8004042 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e006      	b.n	8004042 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3724      	adds	r7, #36	; 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004060:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d003      	beq.n	8004070 <HAL_CAN_GetRxMessage+0x24>
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b02      	cmp	r3, #2
 800406c:	f040 80f3 	bne.w	8004256 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10e      	bne.n	8004094 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d116      	bne.n	80040b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0e7      	b.n	8004264 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0d8      	b.n	8004264 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	331b      	adds	r3, #27
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	4413      	add	r3, r2
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0204 	and.w	r2, r3, #4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10c      	bne.n	80040ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	331b      	adds	r3, #27
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	4413      	add	r3, r2
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	0d5b      	lsrs	r3, r3, #21
 80040e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e00b      	b.n	8004102 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	331b      	adds	r3, #27
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	4413      	add	r3, r2
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	331b      	adds	r3, #27
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	4413      	add	r3, r2
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0202 	and.w	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	331b      	adds	r3, #27
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	4413      	add	r3, r2
 8004124:	3304      	adds	r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	331b      	adds	r3, #27
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	331b      	adds	r3, #27
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4413      	add	r3, r2
 8004180:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	0a1a      	lsrs	r2, r3, #8
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	4413      	add	r3, r2
 800419a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0c1a      	lsrs	r2, r3, #16
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	3302      	adds	r3, #2
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0e1a      	lsrs	r2, r3, #24
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	3303      	adds	r3, #3
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	3304      	adds	r3, #4
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0a1a      	lsrs	r2, r3, #8
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3305      	adds	r3, #5
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	4413      	add	r3, r2
 8004200:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	0c1a      	lsrs	r2, r3, #16
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	3306      	adds	r3, #6
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	4413      	add	r3, r2
 800421a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	0e1a      	lsrs	r2, r3, #24
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3307      	adds	r3, #7
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d108      	bne.n	8004242 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0220 	orr.w	r2, r2, #32
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	e007      	b.n	8004252 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e006      	b.n	8004264 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d002      	beq.n	800428c <HAL_CAN_ActivateNotification+0x1e>
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d109      	bne.n	80042a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6959      	ldr	r1, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e006      	b.n	80042ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d07c      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d023      	beq.n	8004350 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f983 	bl	8004626 <HAL_CAN_TxMailbox0CompleteCallback>
 8004320:	e016      	b.n	8004350 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	e00c      	b.n	8004350 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	e002      	b.n	8004350 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f986 	bl	800465c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d024      	beq.n	80043a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004362:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f962 	bl	8004638 <HAL_CAN_TxMailbox1CompleteCallback>
 8004374:	e016      	b.n	80043a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	e00c      	b.n	80043a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e002      	b.n	80043a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f965 	bl	800466e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d024      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f941 	bl	800464a <HAL_CAN_TxMailbox2CompleteCallback>
 80043c8:	e016      	b.n	80043f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	e00c      	b.n	80043f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	e002      	b.n	80043f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f944 	bl	8004680 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004412:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2210      	movs	r2, #16
 800441a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2208      	movs	r2, #8
 8004436:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f92a 	bl	8004692 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fe fb1c 	bl	8002a94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004476:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2210      	movs	r2, #16
 800447e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d006      	beq.n	80044a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2208      	movs	r2, #8
 800449a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f901 	bl	80046a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe fb14 	bl	8002ae8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d006      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2210      	movs	r2, #16
 80044da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8ea 	bl	80046b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2208      	movs	r2, #8
 80044fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8e2 	bl	80046c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d07b      	beq.n	8004606 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d072      	beq.n	80045fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004572:	2b00      	cmp	r3, #0
 8004574:	d043      	beq.n	80045fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800457c:	2b00      	cmp	r3, #0
 800457e:	d03e      	beq.n	80045fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004586:	2b60      	cmp	r3, #96	; 0x60
 8004588:	d02b      	beq.n	80045e2 <HAL_CAN_IRQHandler+0x32a>
 800458a:	2b60      	cmp	r3, #96	; 0x60
 800458c:	d82e      	bhi.n	80045ec <HAL_CAN_IRQHandler+0x334>
 800458e:	2b50      	cmp	r3, #80	; 0x50
 8004590:	d022      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x320>
 8004592:	2b50      	cmp	r3, #80	; 0x50
 8004594:	d82a      	bhi.n	80045ec <HAL_CAN_IRQHandler+0x334>
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d019      	beq.n	80045ce <HAL_CAN_IRQHandler+0x316>
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d826      	bhi.n	80045ec <HAL_CAN_IRQHandler+0x334>
 800459e:	2b30      	cmp	r3, #48	; 0x30
 80045a0:	d010      	beq.n	80045c4 <HAL_CAN_IRQHandler+0x30c>
 80045a2:	2b30      	cmp	r3, #48	; 0x30
 80045a4:	d822      	bhi.n	80045ec <HAL_CAN_IRQHandler+0x334>
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	d002      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x2f8>
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d005      	beq.n	80045ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80045ae:	e01d      	b.n	80045ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f043 0308 	orr.w	r3, r3, #8
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045b8:	e019      	b.n	80045ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f043 0310 	orr.w	r3, r3, #16
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045c2:	e014      	b.n	80045ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	f043 0320 	orr.w	r3, r3, #32
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045cc:	e00f      	b.n	80045ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045d6:	e00a      	b.n	80045ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045e0:	e005      	b.n	80045ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045ea:	e000      	b.n	80045ee <HAL_CAN_IRQHandler+0x336>
            break;
 80045ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699a      	ldr	r2, [r3, #24]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2204      	movs	r2, #4
 8004604:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f85e 	bl	80046da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800461e:	bf00      	nop
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <__NVIC_SetPriorityGrouping+0x44>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004708:	4013      	ands	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800471e:	4a04      	ldr	r2, [pc, #16]	; (8004730 <__NVIC_SetPriorityGrouping+0x44>)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	60d3      	str	r3, [r2, #12]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <__NVIC_GetPriorityGrouping+0x18>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 0307 	and.w	r3, r3, #7
}
 8004742:	4618      	mov	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	db0b      	blt.n	800477a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	f003 021f 	and.w	r2, r3, #31
 8004768:	4906      	ldr	r1, [pc, #24]	; (8004784 <__NVIC_EnableIRQ+0x34>)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2001      	movs	r0, #1
 8004772:	fa00 f202 	lsl.w	r2, r0, r2
 8004776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr
 8004784:	e000e100 	.word	0xe000e100

08004788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	db0a      	blt.n	80047b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	490c      	ldr	r1, [pc, #48]	; (80047d4 <__NVIC_SetPriority+0x4c>)
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	0112      	lsls	r2, r2, #4
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	440b      	add	r3, r1
 80047ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b0:	e00a      	b.n	80047c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4908      	ldr	r1, [pc, #32]	; (80047d8 <__NVIC_SetPriority+0x50>)
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	3b04      	subs	r3, #4
 80047c0:	0112      	lsls	r2, r2, #4
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	440b      	add	r3, r1
 80047c6:	761a      	strb	r2, [r3, #24]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	e000e100 	.word	0xe000e100
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	; 0x24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf28      	it	cs
 80047fa:	2304      	movcs	r3, #4
 80047fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3304      	adds	r3, #4
 8004802:	2b06      	cmp	r3, #6
 8004804:	d902      	bls.n	800480c <NVIC_EncodePriority+0x30>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3b03      	subs	r3, #3
 800480a:	e000      	b.n	800480e <NVIC_EncodePriority+0x32>
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43da      	mvns	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	401a      	ands	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004824:	f04f 31ff 	mov.w	r1, #4294967295
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	43d9      	mvns	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	4313      	orrs	r3, r2
         );
}
 8004836:	4618      	mov	r0, r3
 8004838:	3724      	adds	r7, #36	; 0x24
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004850:	d301      	bcc.n	8004856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004852:	2301      	movs	r3, #1
 8004854:	e00f      	b.n	8004876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <SysTick_Config+0x40>)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3b01      	subs	r3, #1
 800485c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800485e:	210f      	movs	r1, #15
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	f7ff ff90 	bl	8004788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <SysTick_Config+0x40>)
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800486e:	4b04      	ldr	r3, [pc, #16]	; (8004880 <SysTick_Config+0x40>)
 8004870:	2207      	movs	r2, #7
 8004872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	e000e010 	.word	0xe000e010

08004884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ff2d 	bl	80046ec <__NVIC_SetPriorityGrouping>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	4603      	mov	r3, r0
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048ac:	f7ff ff42 	bl	8004734 <__NVIC_GetPriorityGrouping>
 80048b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f7ff ff90 	bl	80047dc <NVIC_EncodePriority>
 80048bc:	4602      	mov	r2, r0
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff5f 	bl	8004788 <__NVIC_SetPriority>
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff35 	bl	8004750 <__NVIC_EnableIRQ>
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ffa2 	bl	8004840 <SysTick_Config>
 80048fc:	4603      	mov	r3, r0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e059      	b.n	80049d2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_DMA_Init+0xd4>)
 8004926:	429a      	cmp	r2, r3
 8004928:	d80f      	bhi.n	800494a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_DMA_Init+0xd8>)
 8004932:	4413      	add	r3, r2
 8004934:	4a2b      	ldr	r2, [pc, #172]	; (80049e4 <HAL_DMA_Init+0xdc>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	009a      	lsls	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a28      	ldr	r2, [pc, #160]	; (80049e8 <HAL_DMA_Init+0xe0>)
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c
 8004948:	e00e      	b.n	8004968 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	4b26      	ldr	r3, [pc, #152]	; (80049ec <HAL_DMA_Init+0xe4>)
 8004952:	4413      	add	r3, r2
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <HAL_DMA_Init+0xdc>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	009a      	lsls	r2, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <HAL_DMA_Init+0xe8>)
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800497e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800498c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	40020407 	.word	0x40020407
 80049e0:	bffdfff8 	.word	0xbffdfff8
 80049e4:	cccccccd 	.word	0xcccccccd
 80049e8:	40020000 	.word	0x40020000
 80049ec:	bffdfbf8 	.word	0xbffdfbf8
 80049f0:	40020400 	.word	0x40020400

080049f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_DMA_Start_IT+0x20>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e04a      	b.n	8004aaa <HAL_DMA_Start_IT+0xb6>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d13a      	bne.n	8004a9c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fbb0 	bl	80051b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 020e 	orr.w	r2, r2, #14
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e00f      	b.n	8004a8a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0204 	bic.w	r2, r2, #4
 8004a78:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 020a 	orr.w	r2, r2, #10
 8004a88:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e005      	b.n	8004aa8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d008      	beq.n	8004ada <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2204      	movs	r2, #4
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e020      	b.n	8004b1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 020e 	bic.w	r2, r2, #14
 8004ae8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	2101      	movs	r1, #1
 8004b04:	fa01 f202 	lsl.w	r2, r1, r2
 8004b08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d005      	beq.n	8004b4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2204      	movs	r2, #4
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e0d6      	b.n	8004cf8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 020e 	bic.w	r2, r2, #14
 8004b58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b64      	ldr	r3, [pc, #400]	; (8004d04 <HAL_DMA_Abort_IT+0x1dc>)
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d958      	bls.n	8004c28 <HAL_DMA_Abort_IT+0x100>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a63      	ldr	r2, [pc, #396]	; (8004d08 <HAL_DMA_Abort_IT+0x1e0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d04f      	beq.n	8004c20 <HAL_DMA_Abort_IT+0xf8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a61      	ldr	r2, [pc, #388]	; (8004d0c <HAL_DMA_Abort_IT+0x1e4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d048      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xf4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a60      	ldr	r2, [pc, #384]	; (8004d10 <HAL_DMA_Abort_IT+0x1e8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d040      	beq.n	8004c16 <HAL_DMA_Abort_IT+0xee>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5e      	ldr	r2, [pc, #376]	; (8004d14 <HAL_DMA_Abort_IT+0x1ec>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d038      	beq.n	8004c10 <HAL_DMA_Abort_IT+0xe8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5d      	ldr	r2, [pc, #372]	; (8004d18 <HAL_DMA_Abort_IT+0x1f0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d030      	beq.n	8004c0a <HAL_DMA_Abort_IT+0xe2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a5b      	ldr	r2, [pc, #364]	; (8004d1c <HAL_DMA_Abort_IT+0x1f4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d028      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xdc>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a53      	ldr	r2, [pc, #332]	; (8004d04 <HAL_DMA_Abort_IT+0x1dc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d020      	beq.n	8004bfe <HAL_DMA_Abort_IT+0xd6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a57      	ldr	r2, [pc, #348]	; (8004d20 <HAL_DMA_Abort_IT+0x1f8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d019      	beq.n	8004bfa <HAL_DMA_Abort_IT+0xd2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a56      	ldr	r2, [pc, #344]	; (8004d24 <HAL_DMA_Abort_IT+0x1fc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d012      	beq.n	8004bf6 <HAL_DMA_Abort_IT+0xce>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a54      	ldr	r2, [pc, #336]	; (8004d28 <HAL_DMA_Abort_IT+0x200>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_DMA_Abort_IT+0xc8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a53      	ldr	r2, [pc, #332]	; (8004d2c <HAL_DMA_Abort_IT+0x204>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d102      	bne.n	8004bea <HAL_DMA_Abort_IT+0xc2>
 8004be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be8:	e01b      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bee:	e018      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf4:	e015      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	e013      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e011      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c02:	e00e      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004c04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c08:	e00b      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c0e:	e008      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c14:	e005      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c1a:	e002      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	e000      	b.n	8004c22 <HAL_DMA_Abort_IT+0xfa>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4a43      	ldr	r2, [pc, #268]	; (8004d30 <HAL_DMA_Abort_IT+0x208>)
 8004c24:	6053      	str	r3, [r2, #4]
 8004c26:	e057      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x1b0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a36      	ldr	r2, [pc, #216]	; (8004d08 <HAL_DMA_Abort_IT+0x1e0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d04f      	beq.n	8004cd2 <HAL_DMA_Abort_IT+0x1aa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a35      	ldr	r2, [pc, #212]	; (8004d0c <HAL_DMA_Abort_IT+0x1e4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d048      	beq.n	8004cce <HAL_DMA_Abort_IT+0x1a6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a33      	ldr	r2, [pc, #204]	; (8004d10 <HAL_DMA_Abort_IT+0x1e8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d040      	beq.n	8004cc8 <HAL_DMA_Abort_IT+0x1a0>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a32      	ldr	r2, [pc, #200]	; (8004d14 <HAL_DMA_Abort_IT+0x1ec>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d038      	beq.n	8004cc2 <HAL_DMA_Abort_IT+0x19a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <HAL_DMA_Abort_IT+0x1f0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d030      	beq.n	8004cbc <HAL_DMA_Abort_IT+0x194>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <HAL_DMA_Abort_IT+0x1f4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d028      	beq.n	8004cb6 <HAL_DMA_Abort_IT+0x18e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <HAL_DMA_Abort_IT+0x1dc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d020      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0x188>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <HAL_DMA_Abort_IT+0x1f8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d019      	beq.n	8004cac <HAL_DMA_Abort_IT+0x184>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_DMA_Abort_IT+0x1fc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d012      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x180>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <HAL_DMA_Abort_IT+0x200>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_DMA_Abort_IT+0x17a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <HAL_DMA_Abort_IT+0x204>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d102      	bne.n	8004c9c <HAL_DMA_Abort_IT+0x174>
 8004c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c9a:	e01b      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ca0:	e018      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca6:	e015      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	e013      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e011      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cb4:	e00e      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cba:	e00b      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cc0:	e008      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc6:	e005      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ccc:	e002      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cce:	2310      	movs	r3, #16
 8004cd0:	e000      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x1ac>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <HAL_DMA_Abort_IT+0x20c>)
 8004cd6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
    } 
  }
  return status;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40020080 	.word	0x40020080
 8004d08:	40020008 	.word	0x40020008
 8004d0c:	4002001c 	.word	0x4002001c
 8004d10:	40020030 	.word	0x40020030
 8004d14:	40020044 	.word	0x40020044
 8004d18:	40020058 	.word	0x40020058
 8004d1c:	4002006c 	.word	0x4002006c
 8004d20:	40020408 	.word	0x40020408
 8004d24:	4002041c 	.word	0x4002041c
 8004d28:	40020430 	.word	0x40020430
 8004d2c:	40020444 	.word	0x40020444
 8004d30:	40020400 	.word	0x40020400
 8004d34:	40020000 	.word	0x40020000

08004d38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2204      	movs	r2, #4
 8004d56:	409a      	lsls	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80f1 	beq.w	8004f44 <HAL_DMA_IRQHandler+0x20c>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80eb 	beq.w	8004f44 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d107      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b5f      	ldr	r3, [pc, #380]	; (8004f10 <HAL_DMA_IRQHandler+0x1d8>)
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d958      	bls.n	8004e4a <HAL_DMA_IRQHandler+0x112>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5d      	ldr	r2, [pc, #372]	; (8004f14 <HAL_DMA_IRQHandler+0x1dc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04f      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x10a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a5c      	ldr	r2, [pc, #368]	; (8004f18 <HAL_DMA_IRQHandler+0x1e0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d048      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x106>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a5a      	ldr	r2, [pc, #360]	; (8004f1c <HAL_DMA_IRQHandler+0x1e4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d040      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x100>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a59      	ldr	r2, [pc, #356]	; (8004f20 <HAL_DMA_IRQHandler+0x1e8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d038      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xfa>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a57      	ldr	r2, [pc, #348]	; (8004f24 <HAL_DMA_IRQHandler+0x1ec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d030      	beq.n	8004e2c <HAL_DMA_IRQHandler+0xf4>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a56      	ldr	r2, [pc, #344]	; (8004f28 <HAL_DMA_IRQHandler+0x1f0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d028      	beq.n	8004e26 <HAL_DMA_IRQHandler+0xee>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a4d      	ldr	r2, [pc, #308]	; (8004f10 <HAL_DMA_IRQHandler+0x1d8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d020      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xe8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a52      	ldr	r2, [pc, #328]	; (8004f2c <HAL_DMA_IRQHandler+0x1f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d019      	beq.n	8004e1c <HAL_DMA_IRQHandler+0xe4>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a50      	ldr	r2, [pc, #320]	; (8004f30 <HAL_DMA_IRQHandler+0x1f8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d012      	beq.n	8004e18 <HAL_DMA_IRQHandler+0xe0>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a4f      	ldr	r2, [pc, #316]	; (8004f34 <HAL_DMA_IRQHandler+0x1fc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00a      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xda>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a4d      	ldr	r2, [pc, #308]	; (8004f38 <HAL_DMA_IRQHandler+0x200>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d102      	bne.n	8004e0c <HAL_DMA_IRQHandler+0xd4>
 8004e06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e0a:	e01b      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e10:	e018      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e16:	e015      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	e013      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	e011      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e24:	e00e      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e2a:	e00b      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e30:	e008      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e36:	e005      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e3c:	e002      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e3e:	2340      	movs	r3, #64	; 0x40
 8004e40:	e000      	b.n	8004e44 <HAL_DMA_IRQHandler+0x10c>
 8004e42:	2304      	movs	r3, #4
 8004e44:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <HAL_DMA_IRQHandler+0x204>)
 8004e46:	6053      	str	r3, [r2, #4]
 8004e48:	e057      	b.n	8004efa <HAL_DMA_IRQHandler+0x1c2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a31      	ldr	r2, [pc, #196]	; (8004f14 <HAL_DMA_IRQHandler+0x1dc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d04f      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x1bc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2f      	ldr	r2, [pc, #188]	; (8004f18 <HAL_DMA_IRQHandler+0x1e0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d048      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x1b8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2e      	ldr	r2, [pc, #184]	; (8004f1c <HAL_DMA_IRQHandler+0x1e4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d040      	beq.n	8004eea <HAL_DMA_IRQHandler+0x1b2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <HAL_DMA_IRQHandler+0x1e8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d038      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x1ac>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <HAL_DMA_IRQHandler+0x1ec>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d030      	beq.n	8004ede <HAL_DMA_IRQHandler+0x1a6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a29      	ldr	r2, [pc, #164]	; (8004f28 <HAL_DMA_IRQHandler+0x1f0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d028      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x1a0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a21      	ldr	r2, [pc, #132]	; (8004f10 <HAL_DMA_IRQHandler+0x1d8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d020      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x19a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <HAL_DMA_IRQHandler+0x1f4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d019      	beq.n	8004ece <HAL_DMA_IRQHandler+0x196>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <HAL_DMA_IRQHandler+0x1f8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d012      	beq.n	8004eca <HAL_DMA_IRQHandler+0x192>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a22      	ldr	r2, [pc, #136]	; (8004f34 <HAL_DMA_IRQHandler+0x1fc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00a      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x18c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_DMA_IRQHandler+0x200>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d102      	bne.n	8004ebe <HAL_DMA_IRQHandler+0x186>
 8004eb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ebc:	e01b      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ebe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ec2:	e018      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec8:	e015      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004eca:	2340      	movs	r3, #64	; 0x40
 8004ecc:	e013      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ece:	2304      	movs	r3, #4
 8004ed0:	e011      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ed2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ed6:	e00e      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ed8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004edc:	e00b      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ede:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ee2:	e008      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ee8:	e005      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eee:	e002      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ef0:	2340      	movs	r3, #64	; 0x40
 8004ef2:	e000      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x1be>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <HAL_DMA_IRQHandler+0x208>)
 8004ef8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8136 	beq.w	8005170 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004f0c:	e130      	b.n	8005170 <HAL_DMA_IRQHandler+0x438>
 8004f0e:	bf00      	nop
 8004f10:	40020080 	.word	0x40020080
 8004f14:	40020008 	.word	0x40020008
 8004f18:	4002001c 	.word	0x4002001c
 8004f1c:	40020030 	.word	0x40020030
 8004f20:	40020044 	.word	0x40020044
 8004f24:	40020058 	.word	0x40020058
 8004f28:	4002006c 	.word	0x4002006c
 8004f2c:	40020408 	.word	0x40020408
 8004f30:	4002041c 	.word	0x4002041c
 8004f34:	40020430 	.word	0x40020430
 8004f38:	40020444 	.word	0x40020444
 8004f3c:	40020400 	.word	0x40020400
 8004f40:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2202      	movs	r2, #2
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80dd 	beq.w	8005110 <HAL_DMA_IRQHandler+0x3d8>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80d7 	beq.w	8005110 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 020a 	bic.w	r2, r2, #10
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b7b      	ldr	r3, [pc, #492]	; (800517c <HAL_DMA_IRQHandler+0x444>)
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d958      	bls.n	8005046 <HAL_DMA_IRQHandler+0x30e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a79      	ldr	r2, [pc, #484]	; (8005180 <HAL_DMA_IRQHandler+0x448>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d04f      	beq.n	800503e <HAL_DMA_IRQHandler+0x306>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a78      	ldr	r2, [pc, #480]	; (8005184 <HAL_DMA_IRQHandler+0x44c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d048      	beq.n	800503a <HAL_DMA_IRQHandler+0x302>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a76      	ldr	r2, [pc, #472]	; (8005188 <HAL_DMA_IRQHandler+0x450>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d040      	beq.n	8005034 <HAL_DMA_IRQHandler+0x2fc>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a75      	ldr	r2, [pc, #468]	; (800518c <HAL_DMA_IRQHandler+0x454>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d038      	beq.n	800502e <HAL_DMA_IRQHandler+0x2f6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a73      	ldr	r2, [pc, #460]	; (8005190 <HAL_DMA_IRQHandler+0x458>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d030      	beq.n	8005028 <HAL_DMA_IRQHandler+0x2f0>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a72      	ldr	r2, [pc, #456]	; (8005194 <HAL_DMA_IRQHandler+0x45c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d028      	beq.n	8005022 <HAL_DMA_IRQHandler+0x2ea>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a69      	ldr	r2, [pc, #420]	; (800517c <HAL_DMA_IRQHandler+0x444>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d020      	beq.n	800501c <HAL_DMA_IRQHandler+0x2e4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6e      	ldr	r2, [pc, #440]	; (8005198 <HAL_DMA_IRQHandler+0x460>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d019      	beq.n	8005018 <HAL_DMA_IRQHandler+0x2e0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a6c      	ldr	r2, [pc, #432]	; (800519c <HAL_DMA_IRQHandler+0x464>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d012      	beq.n	8005014 <HAL_DMA_IRQHandler+0x2dc>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6b      	ldr	r2, [pc, #428]	; (80051a0 <HAL_DMA_IRQHandler+0x468>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00a      	beq.n	800500e <HAL_DMA_IRQHandler+0x2d6>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a69      	ldr	r2, [pc, #420]	; (80051a4 <HAL_DMA_IRQHandler+0x46c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d102      	bne.n	8005008 <HAL_DMA_IRQHandler+0x2d0>
 8005002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005006:	e01b      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 8005008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800500c:	e018      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 800500e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005012:	e015      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 8005014:	2320      	movs	r3, #32
 8005016:	e013      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 8005018:	2302      	movs	r3, #2
 800501a:	e011      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 800501c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005020:	e00e      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 8005022:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005026:	e00b      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 8005028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800502c:	e008      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 800502e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005032:	e005      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 8005034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005038:	e002      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 800503a:	2320      	movs	r3, #32
 800503c:	e000      	b.n	8005040 <HAL_DMA_IRQHandler+0x308>
 800503e:	2302      	movs	r3, #2
 8005040:	4a59      	ldr	r2, [pc, #356]	; (80051a8 <HAL_DMA_IRQHandler+0x470>)
 8005042:	6053      	str	r3, [r2, #4]
 8005044:	e057      	b.n	80050f6 <HAL_DMA_IRQHandler+0x3be>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4d      	ldr	r2, [pc, #308]	; (8005180 <HAL_DMA_IRQHandler+0x448>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d04f      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x3b8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a4b      	ldr	r2, [pc, #300]	; (8005184 <HAL_DMA_IRQHandler+0x44c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d048      	beq.n	80050ec <HAL_DMA_IRQHandler+0x3b4>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a4a      	ldr	r2, [pc, #296]	; (8005188 <HAL_DMA_IRQHandler+0x450>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d040      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x3ae>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a48      	ldr	r2, [pc, #288]	; (800518c <HAL_DMA_IRQHandler+0x454>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d038      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x3a8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a47      	ldr	r2, [pc, #284]	; (8005190 <HAL_DMA_IRQHandler+0x458>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d030      	beq.n	80050da <HAL_DMA_IRQHandler+0x3a2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a45      	ldr	r2, [pc, #276]	; (8005194 <HAL_DMA_IRQHandler+0x45c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d028      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x39c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a3d      	ldr	r2, [pc, #244]	; (800517c <HAL_DMA_IRQHandler+0x444>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d020      	beq.n	80050ce <HAL_DMA_IRQHandler+0x396>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a41      	ldr	r2, [pc, #260]	; (8005198 <HAL_DMA_IRQHandler+0x460>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d019      	beq.n	80050ca <HAL_DMA_IRQHandler+0x392>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a40      	ldr	r2, [pc, #256]	; (800519c <HAL_DMA_IRQHandler+0x464>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d012      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x38e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a3e      	ldr	r2, [pc, #248]	; (80051a0 <HAL_DMA_IRQHandler+0x468>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00a      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x388>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3d      	ldr	r2, [pc, #244]	; (80051a4 <HAL_DMA_IRQHandler+0x46c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d102      	bne.n	80050ba <HAL_DMA_IRQHandler+0x382>
 80050b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050b8:	e01b      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050be:	e018      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c4:	e015      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050c6:	2320      	movs	r3, #32
 80050c8:	e013      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e011      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d2:	e00e      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050d8:	e00b      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050de:	e008      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050e4:	e005      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ea:	e002      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050ec:	2320      	movs	r3, #32
 80050ee:	e000      	b.n	80050f2 <HAL_DMA_IRQHandler+0x3ba>
 80050f0:	2302      	movs	r3, #2
 80050f2:	4a2e      	ldr	r2, [pc, #184]	; (80051ac <HAL_DMA_IRQHandler+0x474>)
 80050f4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d034      	beq.n	8005170 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800510e:	e02f      	b.n	8005170 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	2208      	movs	r2, #8
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d028      	beq.n	8005172 <HAL_DMA_IRQHandler+0x43a>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d023      	beq.n	8005172 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 020e 	bic.w	r2, r2, #14
 8005138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f202 	lsl.w	r2, r1, r2
 8005148:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
    }
  }
  return;
 8005170:	bf00      	nop
 8005172:	bf00      	nop
}
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40020080 	.word	0x40020080
 8005180:	40020008 	.word	0x40020008
 8005184:	4002001c 	.word	0x4002001c
 8005188:	40020030 	.word	0x40020030
 800518c:	40020044 	.word	0x40020044
 8005190:	40020058 	.word	0x40020058
 8005194:	4002006c 	.word	0x4002006c
 8005198:	40020408 	.word	0x40020408
 800519c:	4002041c 	.word	0x4002041c
 80051a0:	40020430 	.word	0x40020430
 80051a4:	40020444 	.word	0x40020444
 80051a8:	40020400 	.word	0x40020400
 80051ac:	40020000 	.word	0x40020000

080051b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	2101      	movs	r1, #1
 80051c8:	fa01 f202 	lsl.w	r2, r1, r2
 80051cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d108      	bne.n	80051f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051ee:	e007      	b.n	8005200 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
	...

0800520c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800520c:	b480      	push	{r7}
 800520e:	b08b      	sub	sp, #44	; 0x2c
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800521a:	2300      	movs	r3, #0
 800521c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800521e:	e169      	b.n	80054f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005220:	2201      	movs	r2, #1
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	429a      	cmp	r2, r3
 800523a:	f040 8158 	bne.w	80054ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	4a9a      	ldr	r2, [pc, #616]	; (80054ac <HAL_GPIO_Init+0x2a0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d05e      	beq.n	8005306 <HAL_GPIO_Init+0xfa>
 8005248:	4a98      	ldr	r2, [pc, #608]	; (80054ac <HAL_GPIO_Init+0x2a0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d875      	bhi.n	800533a <HAL_GPIO_Init+0x12e>
 800524e:	4a98      	ldr	r2, [pc, #608]	; (80054b0 <HAL_GPIO_Init+0x2a4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d058      	beq.n	8005306 <HAL_GPIO_Init+0xfa>
 8005254:	4a96      	ldr	r2, [pc, #600]	; (80054b0 <HAL_GPIO_Init+0x2a4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d86f      	bhi.n	800533a <HAL_GPIO_Init+0x12e>
 800525a:	4a96      	ldr	r2, [pc, #600]	; (80054b4 <HAL_GPIO_Init+0x2a8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d052      	beq.n	8005306 <HAL_GPIO_Init+0xfa>
 8005260:	4a94      	ldr	r2, [pc, #592]	; (80054b4 <HAL_GPIO_Init+0x2a8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d869      	bhi.n	800533a <HAL_GPIO_Init+0x12e>
 8005266:	4a94      	ldr	r2, [pc, #592]	; (80054b8 <HAL_GPIO_Init+0x2ac>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d04c      	beq.n	8005306 <HAL_GPIO_Init+0xfa>
 800526c:	4a92      	ldr	r2, [pc, #584]	; (80054b8 <HAL_GPIO_Init+0x2ac>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d863      	bhi.n	800533a <HAL_GPIO_Init+0x12e>
 8005272:	4a92      	ldr	r2, [pc, #584]	; (80054bc <HAL_GPIO_Init+0x2b0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d046      	beq.n	8005306 <HAL_GPIO_Init+0xfa>
 8005278:	4a90      	ldr	r2, [pc, #576]	; (80054bc <HAL_GPIO_Init+0x2b0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d85d      	bhi.n	800533a <HAL_GPIO_Init+0x12e>
 800527e:	2b12      	cmp	r3, #18
 8005280:	d82a      	bhi.n	80052d8 <HAL_GPIO_Init+0xcc>
 8005282:	2b12      	cmp	r3, #18
 8005284:	d859      	bhi.n	800533a <HAL_GPIO_Init+0x12e>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <HAL_GPIO_Init+0x80>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	08005307 	.word	0x08005307
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052f3 	.word	0x080052f3
 8005298:	08005335 	.word	0x08005335
 800529c:	0800533b 	.word	0x0800533b
 80052a0:	0800533b 	.word	0x0800533b
 80052a4:	0800533b 	.word	0x0800533b
 80052a8:	0800533b 	.word	0x0800533b
 80052ac:	0800533b 	.word	0x0800533b
 80052b0:	0800533b 	.word	0x0800533b
 80052b4:	0800533b 	.word	0x0800533b
 80052b8:	0800533b 	.word	0x0800533b
 80052bc:	0800533b 	.word	0x0800533b
 80052c0:	0800533b 	.word	0x0800533b
 80052c4:	0800533b 	.word	0x0800533b
 80052c8:	0800533b 	.word	0x0800533b
 80052cc:	0800533b 	.word	0x0800533b
 80052d0:	080052e9 	.word	0x080052e9
 80052d4:	080052fd 	.word	0x080052fd
 80052d8:	4a79      	ldr	r2, [pc, #484]	; (80054c0 <HAL_GPIO_Init+0x2b4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80052de:	e02c      	b.n	800533a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	623b      	str	r3, [r7, #32]
          break;
 80052e6:	e029      	b.n	800533c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	623b      	str	r3, [r7, #32]
          break;
 80052f0:	e024      	b.n	800533c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	3308      	adds	r3, #8
 80052f8:	623b      	str	r3, [r7, #32]
          break;
 80052fa:	e01f      	b.n	800533c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	330c      	adds	r3, #12
 8005302:	623b      	str	r3, [r7, #32]
          break;
 8005304:	e01a      	b.n	800533c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800530e:	2304      	movs	r3, #4
 8005310:	623b      	str	r3, [r7, #32]
          break;
 8005312:	e013      	b.n	800533c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800531c:	2308      	movs	r3, #8
 800531e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	611a      	str	r2, [r3, #16]
          break;
 8005326:	e009      	b.n	800533c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005328:	2308      	movs	r3, #8
 800532a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	615a      	str	r2, [r3, #20]
          break;
 8005332:	e003      	b.n	800533c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005334:	2300      	movs	r3, #0
 8005336:	623b      	str	r3, [r7, #32]
          break;
 8005338:	e000      	b.n	800533c <HAL_GPIO_Init+0x130>
          break;
 800533a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2bff      	cmp	r3, #255	; 0xff
 8005340:	d801      	bhi.n	8005346 <HAL_GPIO_Init+0x13a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	e001      	b.n	800534a <HAL_GPIO_Init+0x13e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2bff      	cmp	r3, #255	; 0xff
 8005350:	d802      	bhi.n	8005358 <HAL_GPIO_Init+0x14c>
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	e002      	b.n	800535e <HAL_GPIO_Init+0x152>
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	3b08      	subs	r3, #8
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	210f      	movs	r1, #15
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	401a      	ands	r2, r3
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	431a      	orrs	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80b1 	beq.w	80054ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800538c:	4b4d      	ldr	r3, [pc, #308]	; (80054c4 <HAL_GPIO_Init+0x2b8>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	4a4c      	ldr	r2, [pc, #304]	; (80054c4 <HAL_GPIO_Init+0x2b8>)
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	6193      	str	r3, [r2, #24]
 8005398:	4b4a      	ldr	r3, [pc, #296]	; (80054c4 <HAL_GPIO_Init+0x2b8>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80053a4:	4a48      	ldr	r2, [pc, #288]	; (80054c8 <HAL_GPIO_Init+0x2bc>)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	089b      	lsrs	r3, r3, #2
 80053aa:	3302      	adds	r3, #2
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	220f      	movs	r2, #15
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4013      	ands	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a40      	ldr	r2, [pc, #256]	; (80054cc <HAL_GPIO_Init+0x2c0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <HAL_GPIO_Init+0x1ec>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <HAL_GPIO_Init+0x2c4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00d      	beq.n	80053f4 <HAL_GPIO_Init+0x1e8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a3e      	ldr	r2, [pc, #248]	; (80054d4 <HAL_GPIO_Init+0x2c8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <HAL_GPIO_Init+0x1e4>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3d      	ldr	r2, [pc, #244]	; (80054d8 <HAL_GPIO_Init+0x2cc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_GPIO_Init+0x1e0>
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <HAL_GPIO_Init+0x1ee>
 80053ec:	2304      	movs	r3, #4
 80053ee:	e004      	b.n	80053fa <HAL_GPIO_Init+0x1ee>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e002      	b.n	80053fa <HAL_GPIO_Init+0x1ee>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_GPIO_Init+0x1ee>
 80053f8:	2300      	movs	r3, #0
 80053fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fc:	f002 0203 	and.w	r2, r2, #3
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	4093      	lsls	r3, r2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800540a:	492f      	ldr	r1, [pc, #188]	; (80054c8 <HAL_GPIO_Init+0x2bc>)
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	3302      	adds	r3, #2
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005424:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	492c      	ldr	r1, [pc, #176]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4313      	orrs	r3, r2
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	e006      	b.n	8005440 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005432:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	43db      	mvns	r3, r3
 800543a:	4928      	ldr	r1, [pc, #160]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 800543c:	4013      	ands	r3, r2
 800543e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800544c:	4b23      	ldr	r3, [pc, #140]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	4922      	ldr	r1, [pc, #136]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	e006      	b.n	8005468 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800545a:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	43db      	mvns	r3, r3
 8005462:	491e      	ldr	r1, [pc, #120]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 8005464:	4013      	ands	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d006      	beq.n	8005482 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4918      	ldr	r1, [pc, #96]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]
 8005480:	e006      	b.n	8005490 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	43db      	mvns	r3, r3
 800548a:	4914      	ldr	r1, [pc, #80]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 800548c:	4013      	ands	r3, r2
 800548e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d021      	beq.n	80054e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <HAL_GPIO_Init+0x2d0>)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60cb      	str	r3, [r1, #12]
 80054a8:	e021      	b.n	80054ee <HAL_GPIO_Init+0x2e2>
 80054aa:	bf00      	nop
 80054ac:	10320000 	.word	0x10320000
 80054b0:	10310000 	.word	0x10310000
 80054b4:	10220000 	.word	0x10220000
 80054b8:	10210000 	.word	0x10210000
 80054bc:	10120000 	.word	0x10120000
 80054c0:	10110000 	.word	0x10110000
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40010800 	.word	0x40010800
 80054d0:	40010c00 	.word	0x40010c00
 80054d4:	40011000 	.word	0x40011000
 80054d8:	40011400 	.word	0x40011400
 80054dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <HAL_GPIO_Init+0x304>)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	43db      	mvns	r3, r3
 80054e8:	4909      	ldr	r1, [pc, #36]	; (8005510 <HAL_GPIO_Init+0x304>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	3301      	adds	r3, #1
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	fa22 f303 	lsr.w	r3, r2, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f47f ae8e 	bne.w	8005220 <HAL_GPIO_Init+0x14>
  }
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	372c      	adds	r7, #44	; 0x2c
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	40010400 	.word	0x40010400

08005514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	807b      	strh	r3, [r7, #2]
 8005520:	4613      	mov	r3, r2
 8005522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005524:	787b      	ldrb	r3, [r7, #1]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800552a:	887a      	ldrh	r2, [r7, #2]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005530:	e003      	b.n	800553a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	041a      	lsls	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	611a      	str	r2, [r3, #16]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005556:	887a      	ldrh	r2, [r7, #2]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	041a      	lsls	r2, r3, #16
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	43d9      	mvns	r1, r3
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	400b      	ands	r3, r1
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	611a      	str	r2, [r3, #16]
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
	...

08005578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d006      	beq.n	800559c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f806 	bl	80055a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40010400 	.word	0x40010400

080055a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e304      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8087 	beq.w	80056ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055dc:	4b92      	ldr	r3, [pc, #584]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 030c 	and.w	r3, r3, #12
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d00c      	beq.n	8005602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055e8:	4b8f      	ldr	r3, [pc, #572]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d112      	bne.n	800561a <HAL_RCC_OscConfig+0x5e>
 80055f4:	4b8c      	ldr	r3, [pc, #560]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d10b      	bne.n	800561a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005602:	4b89      	ldr	r3, [pc, #548]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d06c      	beq.n	80056e8 <HAL_RCC_OscConfig+0x12c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d168      	bne.n	80056e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e2de      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005622:	d106      	bne.n	8005632 <HAL_RCC_OscConfig+0x76>
 8005624:	4b80      	ldr	r3, [pc, #512]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a7f      	ldr	r2, [pc, #508]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800562a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	e02e      	b.n	8005690 <HAL_RCC_OscConfig+0xd4>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x98>
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a7a      	ldr	r2, [pc, #488]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b78      	ldr	r3, [pc, #480]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a77      	ldr	r2, [pc, #476]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800564c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e01d      	b.n	8005690 <HAL_RCC_OscConfig+0xd4>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800565c:	d10c      	bne.n	8005678 <HAL_RCC_OscConfig+0xbc>
 800565e:	4b72      	ldr	r3, [pc, #456]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a71      	ldr	r2, [pc, #452]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a6e      	ldr	r2, [pc, #440]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e00b      	b.n	8005690 <HAL_RCC_OscConfig+0xd4>
 8005678:	4b6b      	ldr	r3, [pc, #428]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6a      	ldr	r2, [pc, #424]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800567e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a67      	ldr	r2, [pc, #412]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800568a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800568e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d013      	beq.n	80056c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fd fbce 	bl	8002e38 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a0:	f7fd fbca 	bl	8002e38 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e292      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b2:	4b5d      	ldr	r3, [pc, #372]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0xe4>
 80056be:	e014      	b.n	80056ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c0:	f7fd fbba 	bl	8002e38 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c8:	f7fd fbb6 	bl	8002e38 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e27e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056da:	4b53      	ldr	r3, [pc, #332]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x10c>
 80056e6:	e000      	b.n	80056ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d063      	beq.n	80057be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056f6:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005702:	4b49      	ldr	r3, [pc, #292]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b08      	cmp	r3, #8
 800570c:	d11c      	bne.n	8005748 <HAL_RCC_OscConfig+0x18c>
 800570e:	4b46      	ldr	r3, [pc, #280]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d116      	bne.n	8005748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571a:	4b43      	ldr	r3, [pc, #268]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_RCC_OscConfig+0x176>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d001      	beq.n	8005732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e252      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005732:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4939      	ldr	r1, [pc, #228]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005742:	4313      	orrs	r3, r2
 8005744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005746:	e03a      	b.n	80057be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005750:	4b36      	ldr	r3, [pc, #216]	; (800582c <HAL_RCC_OscConfig+0x270>)
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005756:	f7fd fb6f 	bl	8002e38 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800575e:	f7fd fb6b 	bl	8002e38 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e233      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577c:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4927      	ldr	r1, [pc, #156]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	600b      	str	r3, [r1, #0]
 8005790:	e015      	b.n	80057be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005792:	4b26      	ldr	r3, [pc, #152]	; (800582c <HAL_RCC_OscConfig+0x270>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fd fb4e 	bl	8002e38 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a0:	f7fd fb4a 	bl	8002e38 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e212      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d03a      	beq.n	8005840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d019      	beq.n	8005806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d2:	4b17      	ldr	r3, [pc, #92]	; (8005830 <HAL_RCC_OscConfig+0x274>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d8:	f7fd fb2e 	bl	8002e38 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e0:	f7fd fb2a 	bl	8002e38 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e1f2      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <HAL_RCC_OscConfig+0x26c>)
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80057fe:	2001      	movs	r0, #1
 8005800:	f000 fbec 	bl	8005fdc <RCC_Delay>
 8005804:	e01c      	b.n	8005840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005806:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <HAL_RCC_OscConfig+0x274>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580c:	f7fd fb14 	bl	8002e38 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005812:	e00f      	b.n	8005834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005814:	f7fd fb10 	bl	8002e38 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d908      	bls.n	8005834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1d8      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
 800582c:	42420000 	.word	0x42420000
 8005830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005834:	4b9b      	ldr	r3, [pc, #620]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e9      	bne.n	8005814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a6 	beq.w	800599a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584e:	2300      	movs	r3, #0
 8005850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005852:	4b94      	ldr	r3, [pc, #592]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	4b91      	ldr	r3, [pc, #580]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	4a90      	ldr	r2, [pc, #576]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	61d3      	str	r3, [r2, #28]
 800586a:	4b8e      	ldr	r3, [pc, #568]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005876:	2301      	movs	r3, #1
 8005878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587a:	4b8b      	ldr	r3, [pc, #556]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d118      	bne.n	80058b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005886:	4b88      	ldr	r3, [pc, #544]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a87      	ldr	r2, [pc, #540]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 800588c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005892:	f7fd fad1 	bl	8002e38 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589a:	f7fd facd 	bl	8002e38 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b64      	cmp	r3, #100	; 0x64
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e195      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ac:	4b7e      	ldr	r3, [pc, #504]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d106      	bne.n	80058ce <HAL_RCC_OscConfig+0x312>
 80058c0:	4b78      	ldr	r3, [pc, #480]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	4a77      	ldr	r2, [pc, #476]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6213      	str	r3, [r2, #32]
 80058cc:	e02d      	b.n	800592a <HAL_RCC_OscConfig+0x36e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x334>
 80058d6:	4b73      	ldr	r3, [pc, #460]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	4a72      	ldr	r2, [pc, #456]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	6213      	str	r3, [r2, #32]
 80058e2:	4b70      	ldr	r3, [pc, #448]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	4a6f      	ldr	r2, [pc, #444]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	6213      	str	r3, [r2, #32]
 80058ee:	e01c      	b.n	800592a <HAL_RCC_OscConfig+0x36e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	d10c      	bne.n	8005912 <HAL_RCC_OscConfig+0x356>
 80058f8:	4b6a      	ldr	r3, [pc, #424]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	4a69      	ldr	r2, [pc, #420]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	6213      	str	r3, [r2, #32]
 8005904:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	4a66      	ldr	r2, [pc, #408]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6213      	str	r3, [r2, #32]
 8005910:	e00b      	b.n	800592a <HAL_RCC_OscConfig+0x36e>
 8005912:	4b64      	ldr	r3, [pc, #400]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4a63      	ldr	r2, [pc, #396]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	6213      	str	r3, [r2, #32]
 800591e:	4b61      	ldr	r3, [pc, #388]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	4a60      	ldr	r2, [pc, #384]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d015      	beq.n	800595e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005932:	f7fd fa81 	bl	8002e38 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005938:	e00a      	b.n	8005950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7fd fa7d 	bl	8002e38 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e143      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	4b54      	ldr	r3, [pc, #336]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ee      	beq.n	800593a <HAL_RCC_OscConfig+0x37e>
 800595c:	e014      	b.n	8005988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595e:	f7fd fa6b 	bl	8002e38 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005964:	e00a      	b.n	800597c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fd fa67 	bl	8002e38 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e12d      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1ee      	bne.n	8005966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d105      	bne.n	800599a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598e:	4b45      	ldr	r3, [pc, #276]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	4a44      	ldr	r2, [pc, #272]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005998:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 808c 	beq.w	8005abc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80059a4:	4b3f      	ldr	r3, [pc, #252]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b0:	d10e      	bne.n	80059d0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80059b2:	4b3c      	ldr	r3, [pc, #240]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d108      	bne.n	80059d0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80059be:	4b39      	ldr	r3, [pc, #228]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d101      	bne.n	80059d0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e103      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d14e      	bne.n	8005a76 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80059d8:	4b32      	ldr	r3, [pc, #200]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80059e4:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0ef      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80059f8:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <HAL_RCC_OscConfig+0x4f0>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fd fa1b 	bl	8002e38 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a06:	f7fd fa17 	bl	8002e38 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b64      	cmp	r3, #100	; 0x64
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0df      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005a18:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005a24:	4b1f      	ldr	r3, [pc, #124]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a30:	491c      	ldr	r1, [pc, #112]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005a36:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	4918      	ldr	r1, [pc, #96]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <HAL_RCC_OscConfig+0x4f0>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4e:	f7fd f9f3 	bl	8002e38 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a56:	f7fd f9ef 	bl	8002e38 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b64      	cmp	r3, #100	; 0x64
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e0b7      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x49a>
 8005a74:	e022      	b.n	8005abc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <HAL_RCC_OscConfig+0x4f0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a88:	f7fd f9d6 	bl	8002e38 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005a8e:	e00f      	b.n	8005ab0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a90:	f7fd f9d2 	bl	8002e38 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	; 0x64
 8005a9c:	d908      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e09a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005ab0:	4b4b      	ldr	r3, [pc, #300]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e9      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8088 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ac6:	4b46      	ldr	r3, [pc, #280]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d068      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d14d      	bne.n	8005b76 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ada:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fd f9aa 	bl	8002e38 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fd f9a6 	bl	8002e38 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e06e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005afa:	4b39      	ldr	r3, [pc, #228]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0e:	d10f      	bne.n	8005b30 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005b10:	4b33      	ldr	r3, [pc, #204]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4931      	ldr	r1, [pc, #196]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b1e:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	f023 020f 	bic.w	r2, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	492d      	ldr	r1, [pc, #180]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b30:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	430b      	orrs	r3, r1
 8005b42:	4927      	ldr	r1, [pc, #156]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b48:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4e:	f7fd f973 	bl	8002e38 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b56:	f7fd f96f 	bl	8002e38 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e037      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x59a>
 8005b74:	e02f      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b76:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fd f95c 	bl	8002e38 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b84:	f7fd f958 	bl	8002e38 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e020      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_OscConfig+0x5c8>
 8005ba2:	e018      	b.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e013      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <HAL_RCC_OscConfig+0x624>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d106      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40021000 	.word	0x40021000
 8005be4:	42420060 	.word	0x42420060

08005be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0d0      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b6a      	ldr	r3, [pc, #424]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d910      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b67      	ldr	r3, [pc, #412]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 0207 	bic.w	r2, r3, #7
 8005c12:	4965      	ldr	r1, [pc, #404]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0b8      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d020      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c44:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4a58      	ldr	r2, [pc, #352]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c5c:	4b53      	ldr	r3, [pc, #332]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a52      	ldr	r2, [pc, #328]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c68:	4b50      	ldr	r3, [pc, #320]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	494d      	ldr	r1, [pc, #308]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d040      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d115      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d107      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca6:	4b41      	ldr	r3, [pc, #260]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e073      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb6:	4b3d      	ldr	r3, [pc, #244]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e06b      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc6:	4b39      	ldr	r3, [pc, #228]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f023 0203 	bic.w	r2, r3, #3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4936      	ldr	r1, [pc, #216]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd8:	f7fd f8ae 	bl	8002e38 <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cde:	e00a      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce0:	f7fd f8aa 	bl	8002e38 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e053      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 020c 	and.w	r2, r3, #12
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d1eb      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d08:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d210      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 0207 	bic.w	r2, r3, #7
 8005d1e:	4922      	ldr	r1, [pc, #136]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e032      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4916      	ldr	r1, [pc, #88]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	490e      	ldr	r1, [pc, #56]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d76:	f000 f821 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	490a      	ldr	r1, [pc, #40]	; (8005db0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <HAL_RCC_ClockConfig+0x1cc>)
 8005d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_ClockConfig+0x1d0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fd f80c 	bl	8002db4 <HAL_InitTick>

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40022000 	.word	0x40022000
 8005dac:	40021000 	.word	0x40021000
 8005db0:	08007968 	.word	0x08007968
 8005db4:	20000000 	.word	0x20000000
 8005db8:	20000004 	.word	0x20000004

08005dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	b099      	sub	sp, #100	; 0x64
 8005dc2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005dc6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8005dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dcc:	c407      	stmia	r4!, {r0, r1, r2}
 8005dce:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005dd0:	4b64      	ldr	r3, [pc, #400]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005dd2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	657b      	str	r3, [r7, #84]	; 0x54
 8005de0:	2300      	movs	r3, #0
 8005de2:	653b      	str	r3, [r7, #80]	; 0x50
 8005de4:	2300      	movs	r3, #0
 8005de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de8:	2300      	movs	r3, #0
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df4:	2300      	movs	r3, #0
 8005df6:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005df8:	4b5b      	ldr	r3, [pc, #364]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e00:	f003 030c 	and.w	r3, r3, #12
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d002      	beq.n	8005e0e <HAL_RCC_GetSysClockFreq+0x52>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d003      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0x58>
 8005e0c:	e09f      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e0e:	4b57      	ldr	r3, [pc, #348]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005e10:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005e12:	e09f      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	0c9b      	lsrs	r3, r3, #18
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	3340      	adds	r3, #64	; 0x40
 8005e1e:	f107 0220 	add.w	r2, r7, #32
 8005e22:	4413      	add	r3, r2
 8005e24:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005e28:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8084 	beq.w	8005f3e <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005e36:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	3340      	adds	r3, #64	; 0x40
 8005e40:	f107 0220 	add.w	r2, r7, #32
 8005e44:	4413      	add	r3, r2
 8005e46:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8005e4a:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005e4c:	4b46      	ldr	r3, [pc, #280]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d060      	beq.n	8005f1a <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005e58:	4b43      	ldr	r3, [pc, #268]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	3301      	adds	r3, #1
 8005e64:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005e66:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	3302      	adds	r3, #2
 8005e72:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e76:	2200      	movs	r2, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	617a      	str	r2, [r7, #20]
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7e:	2200      	movs	r2, #0
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	61fa      	str	r2, [r7, #28]
 8005e84:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005e88:	4622      	mov	r2, r4
 8005e8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e8e:	4684      	mov	ip, r0
 8005e90:	fb0c f202 	mul.w	r2, ip, r2
 8005e94:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8005e98:	468c      	mov	ip, r1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	fb03 f30c 	mul.w	r3, r3, ip
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	69b9      	ldr	r1, [r7, #24]
 8005eaa:	fba2 8901 	umull	r8, r9, r2, r1
 8005eae:	444b      	add	r3, r9
 8005eb0:	4699      	mov	r9, r3
 8005eb2:	4b2e      	ldr	r3, [pc, #184]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005eb4:	fb03 f209 	mul.w	r2, r3, r9
 8005eb8:	2300      	movs	r3, #0
 8005eba:	fb03 f308 	mul.w	r3, r3, r8
 8005ebe:	4413      	add	r3, r2
 8005ec0:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005ec2:	fba8 ab02 	umull	sl, fp, r8, r2
 8005ec6:	445b      	add	r3, fp
 8005ec8:	469b      	mov	fp, r3
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	2200      	movs	r2, #0
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	60fa      	str	r2, [r7, #12]
 8005ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005ede:	4622      	mov	r2, r4
 8005ee0:	e9d7 8900 	ldrd	r8, r9, [r7]
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	fb01 f202 	mul.w	r2, r1, r2
 8005eea:	46cc      	mov	ip, r9
 8005eec:	4618      	mov	r0, r3
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	fb03 f30c 	mul.w	r3, r3, ip
 8005ef6:	4413      	add	r3, r2
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4641      	mov	r1, r8
 8005efc:	fba2 5601 	umull	r5, r6, r2, r1
 8005f00:	4433      	add	r3, r6
 8005f02:	461e      	mov	r6, r3
 8005f04:	462a      	mov	r2, r5
 8005f06:	4633      	mov	r3, r6
 8005f08:	4650      	mov	r0, sl
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	f7fb f8ac 	bl	8001068 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f18:	e007      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005f1e:	fb03 f202 	mul.w	r2, r3, r2
 8005f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005f2a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8005f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f3c:	e004      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	4a0b      	ldr	r2, [pc, #44]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
 8005f46:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8005f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f4a:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005f4c:	e002      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f50:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005f52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3764      	adds	r7, #100	; 0x64
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	08007928 	.word	0x08007928
 8005f64:	08007938 	.word	0x08007938
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	00b71b00 	.word	0x00b71b00
 8005f70:	003d0900 	.word	0x003d0900
 8005f74:	007a1200 	.word	0x007a1200

08005f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	20000000 	.word	0x20000000

08005f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f90:	f7ff fff2 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005f94:	4602      	mov	r2, r0
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	0a1b      	lsrs	r3, r3, #8
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	4903      	ldr	r1, [pc, #12]	; (8005fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa2:	5ccb      	ldrb	r3, [r1, r3]
 8005fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	08007978 	.word	0x08007978

08005fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fb8:	f7ff ffde 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	0adb      	lsrs	r3, r3, #11
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4903      	ldr	r1, [pc, #12]	; (8005fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	08007978 	.word	0x08007978

08005fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <RCC_Delay+0x34>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <RCC_Delay+0x38>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	0a5b      	lsrs	r3, r3, #9
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ff8:	bf00      	nop
  }
  while (Delay --);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	60fa      	str	r2, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f9      	bne.n	8005ff8 <RCC_Delay+0x1c>
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr
 8006010:	20000000 	.word	0x20000000
 8006014:	10624dd3 	.word	0x10624dd3

08006018 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	2300      	movs	r3, #0
 8006026:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d07d      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8006038:	2300      	movs	r3, #0
 800603a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603c:	4b8b      	ldr	r3, [pc, #556]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006048:	4b88      	ldr	r3, [pc, #544]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	4a87      	ldr	r2, [pc, #540]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800604e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006052:	61d3      	str	r3, [r2, #28]
 8006054:	4b85      	ldr	r3, [pc, #532]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006060:	2301      	movs	r3, #1
 8006062:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006064:	4b82      	ldr	r3, [pc, #520]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	2b00      	cmp	r3, #0
 800606e:	d118      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006070:	4b7f      	ldr	r3, [pc, #508]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a7e      	ldr	r2, [pc, #504]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800607c:	f7fc fedc 	bl	8002e38 <HAL_GetTick>
 8006080:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006082:	e008      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006084:	f7fc fed8 	bl	8002e38 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b64      	cmp	r3, #100	; 0x64
 8006090:	d901      	bls.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e0e5      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006096:	4b76      	ldr	r3, [pc, #472]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060a2:	4b72      	ldr	r3, [pc, #456]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060aa:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d02e      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d027      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060c0:	4b6a      	ldr	r3, [pc, #424]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ca:	4b6a      	ldr	r3, [pc, #424]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060d0:	4b68      	ldr	r3, [pc, #416]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060d6:	4a65      	ldr	r2, [pc, #404]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d014      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e6:	f7fc fea7 	bl	8002e38 <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ec:	e00a      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fc fea3 	bl	8002e38 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e0ae      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006104:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0ee      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006110:	4b56      	ldr	r3, [pc, #344]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4953      	ldr	r1, [pc, #332]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800611e:	4313      	orrs	r3, r2
 8006120:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006122:	7efb      	ldrb	r3, [r7, #27]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d105      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006128:	4b50      	ldr	r3, [pc, #320]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	4a4f      	ldr	r2, [pc, #316]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800612e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006132:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006140:	4b4a      	ldr	r3, [pc, #296]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4947      	ldr	r1, [pc, #284]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800614e:	4313      	orrs	r3, r2
 8006150:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800615e:	4b43      	ldr	r3, [pc, #268]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	4940      	ldr	r1, [pc, #256]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800616c:	4313      	orrs	r3, r2
 800616e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800617c:	4b3b      	ldr	r3, [pc, #236]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	4938      	ldr	r1, [pc, #224]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800618a:	4313      	orrs	r3, r2
 800618c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800618e:	4b37      	ldr	r3, [pc, #220]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80061a6:	2301      	movs	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d148      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80061b0:	4b2e      	ldr	r3, [pc, #184]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d138      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80061bc:	4b2b      	ldr	r3, [pc, #172]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80061c8:	4b28      	ldr	r3, [pc, #160]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e042      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80061dc:	4b23      	ldr	r3, [pc, #140]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	4920      	ldr	r1, [pc, #128]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80061ee:	4b1f      	ldr	r3, [pc, #124]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	491c      	ldr	r1, [pc, #112]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8006200:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006206:	f7fc fe17 	bl	8002e38 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800620e:	f7fc fe13 	bl	8002e38 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b64      	cmp	r3, #100	; 0x64
 800621a:	d901      	bls.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e020      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006220:	4b12      	ldr	r3, [pc, #72]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800622c:	e009      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	429a      	cmp	r2, r3
 800623c:	d001      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e00f      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800624e:	4b07      	ldr	r3, [pc, #28]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	4904      	ldr	r1, [pc, #16]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800625c:	4313      	orrs	r3, r2
 800625e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
 8006270:	40007000 	.word	0x40007000
 8006274:	42420440 	.word	0x42420440
 8006278:	42420070 	.word	0x42420070

0800627c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b093      	sub	sp, #76	; 0x4c
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8006284:	4ba7      	ldr	r3, [pc, #668]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006286:	f107 0418 	add.w	r4, r7, #24
 800628a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800628c:	c407      	stmia	r4!, {r0, r1, r2}
 800628e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8006290:	4ba5      	ldr	r3, [pc, #660]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8006292:	f107 0408 	add.w	r4, r7, #8
 8006296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a0:	2300      	movs	r3, #0
 80062a2:	647b      	str	r3, [r7, #68]	; 0x44
 80062a4:	2300      	movs	r3, #0
 80062a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
 80062ac:	2300      	movs	r3, #0
 80062ae:	633b      	str	r3, [r7, #48]	; 0x30
 80062b0:	2300      	movs	r3, #0
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b8:	2300      	movs	r3, #0
 80062ba:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	2b0f      	cmp	r3, #15
 80062c2:	f200 8121 	bhi.w	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	08006489 	.word	0x08006489
 80062d0:	080064ed 	.word	0x080064ed
 80062d4:	08006509 	.word	0x08006509
 80062d8:	080063e7 	.word	0x080063e7
 80062dc:	08006509 	.word	0x08006509
 80062e0:	08006509 	.word	0x08006509
 80062e4:	08006509 	.word	0x08006509
 80062e8:	08006439 	.word	0x08006439
 80062ec:	08006509 	.word	0x08006509
 80062f0:	08006509 	.word	0x08006509
 80062f4:	08006509 	.word	0x08006509
 80062f8:	08006509 	.word	0x08006509
 80062fc:	08006509 	.word	0x08006509
 8006300:	08006509 	.word	0x08006509
 8006304:	08006509 	.word	0x08006509
 8006308:	0800630d 	.word	0x0800630d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800630c:	4b87      	ldr	r3, [pc, #540]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006312:	4b86      	ldr	r3, [pc, #536]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80f6 	beq.w	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x290>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	0c9b      	lsrs	r3, r3, #18
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	3348      	adds	r3, #72	; 0x48
 800632a:	443b      	add	r3, r7
 800632c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8006330:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d03d      	beq.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800633c:	4b7b      	ldr	r3, [pc, #492]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	3348      	adds	r3, #72	; 0x48
 8006346:	443b      	add	r3, r7
 8006348:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800634e:	4b77      	ldr	r3, [pc, #476]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01c      	beq.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800635a:	4b74      	ldr	r3, [pc, #464]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	091b      	lsrs	r3, r3, #4
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	3301      	adds	r3, #1
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006368:	4b70      	ldr	r3, [pc, #448]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	3302      	adds	r3, #2
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8006376:	4a6e      	ldr	r2, [pc, #440]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006380:	fb03 f202 	mul.w	r2, r3, r2
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006386:	fbb2 f2f3 	udiv	r2, r2, r3
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	fb02 f303 	mul.w	r3, r2, r3
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
 8006392:	e007      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006394:	4a66      	ldr	r2, [pc, #408]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006398:	fbb2 f2f3 	udiv	r2, r2, r3
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80063a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80063a8:	461a      	mov	r2, r3
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d108      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            pllclk = pllclk / 2;
 80063b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	647b      	str	r3, [r7, #68]	; 0x44
 80063b6:	e004      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	4a5e      	ldr	r2, [pc, #376]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80063bc:	fb02 f303 	mul.w	r3, r2, r3
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80063c2:	4b5a      	ldr	r3, [pc, #360]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ce:	d102      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80063d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d2:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80063d4:	e09a      	b.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x290>
          frequency = (2 * pllclk) / 3;
 80063d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4a57      	ldr	r2, [pc, #348]	; (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063dc:	fba2 2303 	umull	r2, r3, r2, r3
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80063e4:	e092      	b.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80063e6:	4b51      	ldr	r3, [pc, #324]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 80063f2:	f7ff fce3 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 80063f6:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80063f8:	e08a      	b.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80063fa:	4b4c      	ldr	r3, [pc, #304]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8084 	beq.w	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006408:	4b48      	ldr	r3, [pc, #288]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	091b      	lsrs	r3, r3, #4
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	3301      	adds	r3, #1
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8006416:	4b45      	ldr	r3, [pc, #276]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	0b1b      	lsrs	r3, r3, #12
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	3302      	adds	r3, #2
 8006422:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8006424:	4a42      	ldr	r2, [pc, #264]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	fbb2 f3f3 	udiv	r3, r2, r3
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006436:	e06b      	b.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8006438:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8006444:	f7ff fcba 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8006448:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800644a:	e063      	b.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800644c:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05d      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006458:	4b34      	ldr	r3, [pc, #208]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	3301      	adds	r3, #1
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8006466:	4b31      	ldr	r3, [pc, #196]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	0b1b      	lsrs	r3, r3, #12
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	3302      	adds	r3, #2
 8006472:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8006474:	4a2e      	ldr	r2, [pc, #184]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006486:	e045      	b.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006488:	4b28      	ldr	r3, [pc, #160]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d108      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSE_VALUE;
 80064a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a8:	643b      	str	r3, [r7, #64]	; 0x40
 80064aa:	e01e      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b6:	d109      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80064b8:	4b1c      	ldr	r3, [pc, #112]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      {
        frequency = LSI_VALUE;
 80064c4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80064c8:	643b      	str	r3, [r7, #64]	; 0x40
 80064ca:	e00e      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d6:	d11f      	bne.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d019      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
      {
        frequency = HSE_VALUE / 128U;
 80064e4:	4b15      	ldr	r3, [pc, #84]	; (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80064e6:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80064e8:	e016      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80064ea:	e015      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80064ec:	f7ff fd62 	bl	8005fb4 <HAL_RCC_GetPCLK2Freq>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b0e      	ldr	r3, [pc, #56]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	0b9b      	lsrs	r3, r3, #14
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	3301      	adds	r3, #1
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	fbb2 f3f3 	udiv	r3, r2, r3
 8006504:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006506:	e008      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
    default:
    {
      break;
 8006508:	bf00      	nop
 800650a:	e006      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      break;
 800650c:	bf00      	nop
 800650e:	e004      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      break;
 8006510:	bf00      	nop
 8006512:	e002      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      break;
 8006514:	bf00      	nop
 8006516:	e000      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      break;
 8006518:	bf00      	nop
    }
  }
  return (frequency);
 800651a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800651c:	4618      	mov	r0, r3
 800651e:	374c      	adds	r7, #76	; 0x4c
 8006520:	46bd      	mov	sp, r7
 8006522:	bd90      	pop	{r4, r7, pc}
 8006524:	08007948 	.word	0x08007948
 8006528:	08007958 	.word	0x08007958
 800652c:	40021000 	.word	0x40021000
 8006530:	00b71b00 	.word	0x00b71b00
 8006534:	003d0900 	.word	0x003d0900
 8006538:	aaaaaaab 	.word	0xaaaaaaab
 800653c:	00016e36 	.word	0x00016e36

08006540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e041      	b.n	80065d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fb fd20 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	4619      	mov	r1, r3
 800657e:	4610      	mov	r0, r2
 8006580:	f000 f9b4 	bl	80068ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d001      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e03f      	b.n	8006678 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1b      	ldr	r2, [pc, #108]	; (8006684 <HAL_TIM_Base_Start_IT+0xa4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_TIM_Base_Start_IT+0x62>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006622:	d00e      	beq.n	8006642 <HAL_TIM_Base_Start_IT+0x62>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a17      	ldr	r2, [pc, #92]	; (8006688 <HAL_TIM_Base_Start_IT+0xa8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_TIM_Base_Start_IT+0x62>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a16      	ldr	r2, [pc, #88]	; (800668c <HAL_TIM_Base_Start_IT+0xac>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_TIM_Base_Start_IT+0x62>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a14      	ldr	r2, [pc, #80]	; (8006690 <HAL_TIM_Base_Start_IT+0xb0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d111      	bne.n	8006666 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b06      	cmp	r3, #6
 8006652:	d010      	beq.n	8006676 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006664:	e007      	b.n	8006676 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0201 	orr.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40012c00 	.word	0x40012c00
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00

08006694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d122      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d11b      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0202 	mvn.w	r2, #2
 80066c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f8ed 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f8e0 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f8ef 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d122      	bne.n	8006744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d11b      	bne.n	8006744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0204 	mvn.w	r2, #4
 8006714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8c3 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 8006730:	e005      	b.n	800673e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f8b6 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f8c5 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b08      	cmp	r3, #8
 8006750:	d122      	bne.n	8006798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d11b      	bne.n	8006798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0208 	mvn.w	r2, #8
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2204      	movs	r2, #4
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f899 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f88c 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f89b 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0210 	mvn.w	r2, #16
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2208      	movs	r2, #8
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f86f 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f862 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f871 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d107      	bne.n	8006818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0201 	mvn.w	r2, #1
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fa fdac 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d10e      	bne.n	8006844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d107      	bne.n	8006844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800683c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f92f 	bl	8006aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d10e      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d107      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f835 	bl	80068da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b20      	cmp	r3, #32
 800687c:	d10e      	bne.n	800689c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b20      	cmp	r3, #32
 800688a:	d107      	bne.n	800689c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0220 	mvn.w	r2, #32
 8006894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8fa 	bl	8006a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr

080068ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <TIM_Base_SetConfig+0xc8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00f      	beq.n	8006924 <TIM_Base_SetConfig+0x38>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d00b      	beq.n	8006924 <TIM_Base_SetConfig+0x38>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <TIM_Base_SetConfig+0xcc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d007      	beq.n	8006924 <TIM_Base_SetConfig+0x38>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a29      	ldr	r2, [pc, #164]	; (80069bc <TIM_Base_SetConfig+0xd0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_Base_SetConfig+0x38>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a28      	ldr	r2, [pc, #160]	; (80069c0 <TIM_Base_SetConfig+0xd4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d108      	bne.n	8006936 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <TIM_Base_SetConfig+0xc8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00f      	beq.n	800695e <TIM_Base_SetConfig+0x72>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d00b      	beq.n	800695e <TIM_Base_SetConfig+0x72>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <TIM_Base_SetConfig+0xcc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <TIM_Base_SetConfig+0x72>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <TIM_Base_SetConfig+0xd0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_Base_SetConfig+0x72>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <TIM_Base_SetConfig+0xd4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d108      	bne.n	8006970 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a07      	ldr	r2, [pc, #28]	; (80069b4 <TIM_Base_SetConfig+0xc8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d103      	bne.n	80069a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	615a      	str	r2, [r3, #20]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00

080069c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d8:	2302      	movs	r3, #2
 80069da:	e04b      	b.n	8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d013      	beq.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a28:	d00e      	beq.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d009      	beq.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a12      	ldr	r2, [pc, #72]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d10c      	bne.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00

08006a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e03f      	b.n	8006b46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fb faa0 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2224      	movs	r2, #36	; 0x24
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fddd 	bl	80076b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695a      	ldr	r2, [r3, #20]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e057      	b.n	8006c12 <HAL_LIN_Init+0xc4>
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fb fa52 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2224      	movs	r2, #36	; 0x24
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fd8f 	bl	80076b8 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bb8:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc8:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0220 	bic.w	r2, r2, #32
 8006bd8:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6919      	ldr	r1, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b08a      	sub	sp, #40	; 0x28
 8006c1e:	af02      	add	r7, sp, #8
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d17c      	bne.n	8006d34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_UART_Transmit+0x2c>
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e075      	b.n	8006d36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_UART_Transmit+0x3e>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e06e      	b.n	8006d36 <HAL_UART_Transmit+0x11c>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2221      	movs	r2, #33	; 0x21
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c6e:	f7fc f8e3 	bl	8002e38 <HAL_GetTick>
 8006c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	88fa      	ldrh	r2, [r7, #6]
 8006c7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c88:	d108      	bne.n	8006c9c <HAL_UART_Transmit+0x82>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	e003      	b.n	8006ca4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006cac:	e02a      	b.n	8006d04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fae8 	bl	800728e <UART_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e036      	b.n	8006d36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10b      	bne.n	8006ce6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	e007      	b.n	8006cf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1cf      	bne.n	8006cae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2200      	movs	r2, #0
 8006d16:	2140      	movs	r1, #64	; 0x40
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fab8 	bl	800728e <UART_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e006      	b.n	8006d36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e000      	b.n	8006d36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d11d      	bne.n	8006d94 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_UART_Receive_DMA+0x26>
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e016      	b.n	8006d96 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_UART_Receive_DMA+0x38>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e00f      	b.n	8006d96 <HAL_UART_Receive_DMA+0x58>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006d84:	88fb      	ldrh	r3, [r7, #6]
 8006d86:	461a      	mov	r2, r3
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 faca 	bl	8007324 <UART_Start_Receive_DMA>
 8006d90:	4603      	mov	r3, r0
 8006d92:	e000      	b.n	8006d96 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
  }
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	; 0x28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_UART_IRQHandler+0x52>
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fbba 	bl	8007564 <UART_Receive_IT>
      return;
 8006df0:	e17b      	b.n	80070ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80b1 	beq.w	8006f5c <HAL_UART_IRQHandler+0x1bc>
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <HAL_UART_IRQHandler+0x70>
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 80a6 	beq.w	8006f5c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <HAL_UART_IRQHandler+0x90>
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f043 0201 	orr.w	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <HAL_UART_IRQHandler+0xb0>
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	f043 0202 	orr.w	r2, r3, #2
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <HAL_UART_IRQHandler+0xd0>
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	f043 0204 	orr.w	r2, r3, #4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00f      	beq.n	8006e9a <HAL_UART_IRQHandler+0xfa>
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <HAL_UART_IRQHandler+0xee>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f043 0208 	orr.w	r2, r3, #8
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 811e 	beq.w	80070e0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <HAL_UART_IRQHandler+0x11e>
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fb53 	bl	8007564 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bf14      	ite	ne
 8006ecc:	2301      	movne	r3, #1
 8006ece:	2300      	moveq	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x146>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d031      	beq.n	8006f4a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa95 	bl	8007416 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d023      	beq.n	8006f42 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d013      	beq.n	8006f3a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	4a76      	ldr	r2, [pc, #472]	; (80070f0 <HAL_UART_IRQHandler+0x350>)
 8006f18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fd fe02 	bl	8004b28 <HAL_DMA_Abort_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f38:	e00e      	b.n	8006f58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f8e3 	bl	8007106 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e00a      	b.n	8006f58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8df 	bl	8007106 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	e006      	b.n	8006f58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8db 	bl	8007106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f56:	e0c3      	b.n	80070e0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	bf00      	nop
    return;
 8006f5a:	e0c1      	b.n	80070e0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	f040 80a1 	bne.w	80070a8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 809b 	beq.w	80070a8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8095 	beq.w	80070a8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04e      	beq.n	8007040 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006fac:	8a3b      	ldrh	r3, [r7, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8098 	beq.w	80070e4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fb8:	8a3a      	ldrh	r2, [r7, #16]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	f080 8092 	bcs.w	80070e4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8a3a      	ldrh	r2, [r7, #16]
 8006fc4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d02b      	beq.n	8007028 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fde:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0210 	bic.w	r2, r2, #16
 800701c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd fd45 	bl	8004ab2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007030:	b29b      	uxth	r3, r3
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	b29b      	uxth	r3, r3
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f86d 	bl	8007118 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800703e:	e051      	b.n	80070e4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007048:	b29b      	uxth	r3, r3
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d047      	beq.n	80070e8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007058:	8a7b      	ldrh	r3, [r7, #18]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d044      	beq.n	80070e8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800706c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0210 	bic.w	r2, r2, #16
 800709a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800709c:	8a7b      	ldrh	r3, [r7, #18]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f839 	bl	8007118 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80070a6:	e01f      	b.n	80070e8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <HAL_UART_IRQHandler+0x324>
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9ea 	bl	8007496 <UART_Transmit_IT>
    return;
 80070c2:	e012      	b.n	80070ea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00d      	beq.n	80070ea <HAL_UART_IRQHandler+0x34a>
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa2b 	bl	8007534 <UART_EndTransmit_IT>
    return;
 80070de:	e004      	b.n	80070ea <HAL_UART_IRQHandler+0x34a>
    return;
 80070e0:	bf00      	nop
 80070e2:	e002      	b.n	80070ea <HAL_UART_IRQHandler+0x34a>
      return;
 80070e4:	bf00      	nop
 80070e6:	e000      	b.n	80070ea <HAL_UART_IRQHandler+0x34a>
      return;
 80070e8:	bf00      	nop
  }
}
 80070ea:	3728      	adds	r7, #40	; 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	0800746f 	.word	0x0800746f

080070f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	bc80      	pop	{r7}
 800712c:	4770      	bx	lr

0800712e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d12a      	bne.n	80071a0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800715e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695a      	ldr	r2, [r3, #20]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695a      	ldr	r2, [r3, #20]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	2b01      	cmp	r3, #1
 800718e:	d107      	bne.n	80071a0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0210 	bic.w	r2, r2, #16
 800719e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d106      	bne.n	80071b6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071ac:	4619      	mov	r1, r3
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff ffb2 	bl	8007118 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071b4:	e002      	b.n	80071bc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7fb fd60 	bl	8002c7c <HAL_UART_RxCpltCallback>
}
 80071bc:	bf00      	nop
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d108      	bne.n	80071ec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff ff97 	bl	8007118 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071ea:	e002      	b.n	80071f2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7fb fd29 	bl	8002c44 <HAL_UART_RxHalfCpltCallback>
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	bf14      	ite	ne
 800721a:	2301      	movne	r3, #1
 800721c:	2300      	moveq	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b21      	cmp	r3, #33	; 0x21
 800722c:	d108      	bne.n	8007240 <UART_DMAError+0x46>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2200      	movs	r2, #0
 8007238:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800723a:	68b8      	ldr	r0, [r7, #8]
 800723c:	f000 f8d6 	bl	80073ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	bf14      	ite	ne
 800724e:	2301      	movne	r3, #1
 8007250:	2300      	moveq	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b22      	cmp	r3, #34	; 0x22
 8007260:	d108      	bne.n	8007274 <UART_DMAError+0x7a>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2200      	movs	r2, #0
 800726c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800726e:	68b8      	ldr	r0, [r7, #8]
 8007270:	f000 f8d1 	bl	8007416 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	f043 0210 	orr.w	r2, r3, #16
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007280:	68b8      	ldr	r0, [r7, #8]
 8007282:	f7ff ff40 	bl	8007106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729e:	e02c      	b.n	80072fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d028      	beq.n	80072fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0x30>
 80072ae:	f7fb fdc3 	bl	8002e38 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d21d      	bcs.n	80072fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0201 	bic.w	r2, r2, #1
 80072dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e00f      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4013      	ands	r3, r2
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	bf0c      	ite	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	2300      	movne	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	429a      	cmp	r2, r3
 8007316:	d0c3      	beq.n	80072a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2222      	movs	r2, #34	; 0x22
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	4a23      	ldr	r2, [pc, #140]	; (80073e0 <UART_Start_Receive_DMA+0xbc>)
 8007352:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	4a22      	ldr	r2, [pc, #136]	; (80073e4 <UART_Start_Receive_DMA+0xc0>)
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	4a21      	ldr	r2, [pc, #132]	; (80073e8 <UART_Start_Receive_DMA+0xc4>)
 8007362:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	2200      	movs	r2, #0
 800736a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800736c:	f107 0308 	add.w	r3, r7, #8
 8007370:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	f7fd fb36 	bl	80049f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007388:	2300      	movs	r3, #0
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695a      	ldr	r2, [r3, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695a      	ldr	r2, [r3, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	0800712f 	.word	0x0800712f
 80073e4:	080071c5 	.word	0x080071c5
 80073e8:	080071fb 	.word	0x080071fb

080073ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007402:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr

08007416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800742c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695a      	ldr	r2, [r3, #20]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	2b01      	cmp	r3, #1
 8007444:	d107      	bne.n	8007456 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0210 	bic.w	r2, r2, #16
 8007454:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff fe3c 	bl	8007106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b21      	cmp	r3, #33	; 0x21
 80074a8:	d13e      	bne.n	8007528 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b2:	d114      	bne.n	80074de <UART_Transmit_IT+0x48>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d110      	bne.n	80074de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	1c9a      	adds	r2, r3, #2
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	621a      	str	r2, [r3, #32]
 80074dc:	e008      	b.n	80074f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6211      	str	r1, [r2, #32]
 80074e8:	781a      	ldrb	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4619      	mov	r1, r3
 80074fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10f      	bne.n	8007524 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007512:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007522:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	e000      	b.n	800752a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007528:	2302      	movs	r3, #2
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr

08007534 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fdcd 	bl	80070f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b22      	cmp	r3, #34	; 0x22
 8007576:	f040 8099 	bne.w	80076ac <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007582:	d117      	bne.n	80075b4 <UART_Receive_IT+0x50>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d113      	bne.n	80075b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	1c9a      	adds	r2, r3, #2
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	629a      	str	r2, [r3, #40]	; 0x28
 80075b2:	e026      	b.n	8007602 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c6:	d007      	beq.n	80075d8 <UART_Receive_IT+0x74>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <UART_Receive_IT+0x82>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	701a      	strb	r2, [r3, #0]
 80075e4:	e008      	b.n	80075f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29b      	uxth	r3, r3
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4619      	mov	r1, r3
 8007610:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007612:	2b00      	cmp	r3, #0
 8007614:	d148      	bne.n	80076a8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0220 	bic.w	r2, r2, #32
 8007624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0201 	bic.w	r2, r2, #1
 8007644:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2220      	movs	r2, #32
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	2b01      	cmp	r3, #1
 8007654:	d123      	bne.n	800769e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0210 	bic.w	r2, r2, #16
 800766a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b10      	cmp	r3, #16
 8007678:	d10a      	bne.n	8007690 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff fd3e 	bl	8007118 <HAL_UARTEx_RxEventCallback>
 800769c:	e002      	b.n	80076a4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fb faec 	bl	8002c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e002      	b.n	80076ae <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80076f2:	f023 030c 	bic.w	r3, r3, #12
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	430b      	orrs	r3, r1
 80076fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <UART_SetConfig+0x114>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d103      	bne.n	8007728 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007720:	f7fe fc48 	bl	8005fb4 <HAL_RCC_GetPCLK2Freq>
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	e002      	b.n	800772e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fe fc30 	bl	8005f8c <HAL_RCC_GetPCLK1Freq>
 800772c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009a      	lsls	r2, r3, #2
 8007738:	441a      	add	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	4a22      	ldr	r2, [pc, #136]	; (80077d0 <UART_SetConfig+0x118>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	0119      	lsls	r1, r3, #4
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009a      	lsls	r2, r3, #2
 8007758:	441a      	add	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	fbb2 f2f3 	udiv	r2, r2, r3
 8007764:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <UART_SetConfig+0x118>)
 8007766:	fba3 0302 	umull	r0, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	2064      	movs	r0, #100	; 0x64
 800776e:	fb00 f303 	mul.w	r3, r0, r3
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	3332      	adds	r3, #50	; 0x32
 8007778:	4a15      	ldr	r2, [pc, #84]	; (80077d0 <UART_SetConfig+0x118>)
 800777a:	fba2 2303 	umull	r2, r3, r2, r3
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007784:	4419      	add	r1, r3
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009a      	lsls	r2, r3, #2
 8007790:	441a      	add	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	fbb2 f2f3 	udiv	r2, r2, r3
 800779c:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <UART_SetConfig+0x118>)
 800779e:	fba3 0302 	umull	r0, r3, r3, r2
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	2064      	movs	r0, #100	; 0x64
 80077a6:	fb00 f303 	mul.w	r3, r0, r3
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	3332      	adds	r3, #50	; 0x32
 80077b0:	4a07      	ldr	r2, [pc, #28]	; (80077d0 <UART_SetConfig+0x118>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	f003 020f 	and.w	r2, r3, #15
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	440a      	add	r2, r1
 80077c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40013800 	.word	0x40013800
 80077d0:	51eb851f 	.word	0x51eb851f

080077d4 <__libc_init_array>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	2600      	movs	r6, #0
 80077d8:	4d0c      	ldr	r5, [pc, #48]	; (800780c <__libc_init_array+0x38>)
 80077da:	4c0d      	ldr	r4, [pc, #52]	; (8007810 <__libc_init_array+0x3c>)
 80077dc:	1b64      	subs	r4, r4, r5
 80077de:	10a4      	asrs	r4, r4, #2
 80077e0:	42a6      	cmp	r6, r4
 80077e2:	d109      	bne.n	80077f8 <__libc_init_array+0x24>
 80077e4:	f000 f88e 	bl	8007904 <_init>
 80077e8:	2600      	movs	r6, #0
 80077ea:	4d0a      	ldr	r5, [pc, #40]	; (8007814 <__libc_init_array+0x40>)
 80077ec:	4c0a      	ldr	r4, [pc, #40]	; (8007818 <__libc_init_array+0x44>)
 80077ee:	1b64      	subs	r4, r4, r5
 80077f0:	10a4      	asrs	r4, r4, #2
 80077f2:	42a6      	cmp	r6, r4
 80077f4:	d105      	bne.n	8007802 <__libc_init_array+0x2e>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fc:	4798      	blx	r3
 80077fe:	3601      	adds	r6, #1
 8007800:	e7ee      	b.n	80077e0 <__libc_init_array+0xc>
 8007802:	f855 3b04 	ldr.w	r3, [r5], #4
 8007806:	4798      	blx	r3
 8007808:	3601      	adds	r6, #1
 800780a:	e7f2      	b.n	80077f2 <__libc_init_array+0x1e>
 800780c:	080079b0 	.word	0x080079b0
 8007810:	080079b0 	.word	0x080079b0
 8007814:	080079b0 	.word	0x080079b0
 8007818:	080079b4 	.word	0x080079b4

0800781c <__itoa>:
 800781c:	1e93      	subs	r3, r2, #2
 800781e:	2b22      	cmp	r3, #34	; 0x22
 8007820:	b510      	push	{r4, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	d904      	bls.n	8007830 <__itoa+0x14>
 8007826:	2300      	movs	r3, #0
 8007828:	461c      	mov	r4, r3
 800782a:	700b      	strb	r3, [r1, #0]
 800782c:	4620      	mov	r0, r4
 800782e:	bd10      	pop	{r4, pc}
 8007830:	2a0a      	cmp	r2, #10
 8007832:	d109      	bne.n	8007848 <__itoa+0x2c>
 8007834:	2800      	cmp	r0, #0
 8007836:	da07      	bge.n	8007848 <__itoa+0x2c>
 8007838:	232d      	movs	r3, #45	; 0x2d
 800783a:	700b      	strb	r3, [r1, #0]
 800783c:	2101      	movs	r1, #1
 800783e:	4240      	negs	r0, r0
 8007840:	4421      	add	r1, r4
 8007842:	f000 f81d 	bl	8007880 <__utoa>
 8007846:	e7f1      	b.n	800782c <__itoa+0x10>
 8007848:	2100      	movs	r1, #0
 800784a:	e7f9      	b.n	8007840 <__itoa+0x24>

0800784c <itoa>:
 800784c:	f7ff bfe6 	b.w	800781c <__itoa>

08007850 <memset>:
 8007850:	4603      	mov	r3, r0
 8007852:	4402      	add	r2, r0
 8007854:	4293      	cmp	r3, r2
 8007856:	d100      	bne.n	800785a <memset+0xa>
 8007858:	4770      	bx	lr
 800785a:	f803 1b01 	strb.w	r1, [r3], #1
 800785e:	e7f9      	b.n	8007854 <memset+0x4>

08007860 <strcat>:
 8007860:	4602      	mov	r2, r0
 8007862:	b510      	push	{r4, lr}
 8007864:	7814      	ldrb	r4, [r2, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	3201      	adds	r2, #1
 800786a:	2c00      	cmp	r4, #0
 800786c:	d1fa      	bne.n	8007864 <strcat+0x4>
 800786e:	3b01      	subs	r3, #1
 8007870:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007874:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007878:	2a00      	cmp	r2, #0
 800787a:	d1f9      	bne.n	8007870 <strcat+0x10>
 800787c:	bd10      	pop	{r4, pc}
	...

08007880 <__utoa>:
 8007880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007882:	b08b      	sub	sp, #44	; 0x2c
 8007884:	4605      	mov	r5, r0
 8007886:	460b      	mov	r3, r1
 8007888:	466e      	mov	r6, sp
 800788a:	4c1d      	ldr	r4, [pc, #116]	; (8007900 <__utoa+0x80>)
 800788c:	f104 0c20 	add.w	ip, r4, #32
 8007890:	4637      	mov	r7, r6
 8007892:	6820      	ldr	r0, [r4, #0]
 8007894:	6861      	ldr	r1, [r4, #4]
 8007896:	3408      	adds	r4, #8
 8007898:	c703      	stmia	r7!, {r0, r1}
 800789a:	4564      	cmp	r4, ip
 800789c:	463e      	mov	r6, r7
 800789e:	d1f7      	bne.n	8007890 <__utoa+0x10>
 80078a0:	7921      	ldrb	r1, [r4, #4]
 80078a2:	6820      	ldr	r0, [r4, #0]
 80078a4:	7139      	strb	r1, [r7, #4]
 80078a6:	1e91      	subs	r1, r2, #2
 80078a8:	2922      	cmp	r1, #34	; 0x22
 80078aa:	6038      	str	r0, [r7, #0]
 80078ac:	f04f 0100 	mov.w	r1, #0
 80078b0:	d904      	bls.n	80078bc <__utoa+0x3c>
 80078b2:	7019      	strb	r1, [r3, #0]
 80078b4:	460b      	mov	r3, r1
 80078b6:	4618      	mov	r0, r3
 80078b8:	b00b      	add	sp, #44	; 0x2c
 80078ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078bc:	1e58      	subs	r0, r3, #1
 80078be:	4684      	mov	ip, r0
 80078c0:	fbb5 f7f2 	udiv	r7, r5, r2
 80078c4:	fb02 5617 	mls	r6, r2, r7, r5
 80078c8:	3628      	adds	r6, #40	; 0x28
 80078ca:	446e      	add	r6, sp
 80078cc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80078d0:	460c      	mov	r4, r1
 80078d2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80078d6:	462e      	mov	r6, r5
 80078d8:	42b2      	cmp	r2, r6
 80078da:	463d      	mov	r5, r7
 80078dc:	f101 0101 	add.w	r1, r1, #1
 80078e0:	d9ee      	bls.n	80078c0 <__utoa+0x40>
 80078e2:	2200      	movs	r2, #0
 80078e4:	545a      	strb	r2, [r3, r1]
 80078e6:	1919      	adds	r1, r3, r4
 80078e8:	1aa5      	subs	r5, r4, r2
 80078ea:	42aa      	cmp	r2, r5
 80078ec:	dae3      	bge.n	80078b6 <__utoa+0x36>
 80078ee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80078f2:	780e      	ldrb	r6, [r1, #0]
 80078f4:	3201      	adds	r2, #1
 80078f6:	7006      	strb	r6, [r0, #0]
 80078f8:	f801 5901 	strb.w	r5, [r1], #-1
 80078fc:	e7f4      	b.n	80078e8 <__utoa+0x68>
 80078fe:	bf00      	nop
 8007900:	08007980 	.word	0x08007980

08007904 <_init>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr

08007910 <_fini>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	bf00      	nop
 8007914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007916:	bc08      	pop	{r3}
 8007918:	469e      	mov	lr, r3
 800791a:	4770      	bx	lr
